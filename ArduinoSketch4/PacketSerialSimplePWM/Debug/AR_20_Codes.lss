
AR_20_Codes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001af0  00001b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000127  0080014c  0080014c  00001bd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011ad6  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000275f  00000000  00000000  00013e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b0e  00000000  00000000  000165e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002660  00000000  00000000  0001a0f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000411b  00000000  00000000  0001c754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d655  00000000  00000000  0002086f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  0002dec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_3>
      10:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_3>
      14:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_18>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	6a 01       	movw	r12, r20
      c4:	29 06       	cpc	r2, r25

000000c6 <__ctors_end>:
      c6:	7b 01       	movw	r14, r22

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e0 ef       	ldi	r30, 0xF0	; 240
      dc:	fa e1       	ldi	r31, 0x1A	; 26
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 34       	cpi	r26, 0x4C	; 76
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	ac e4       	ldi	r26, 0x4C	; 76
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 37       	cpi	r26, 0x73	; 115
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 57 06 	call	0xcae	; 0xcae <main>
     114:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     11c:	26 e0       	ldi	r18, 0x06	; 6
     11e:	40 e0       	ldi	r20, 0x00	; 0
     120:	52 ec       	ldi	r21, 0xC2	; 194
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	89 e8       	ldi	r24, 0x89	; 137
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 62 05 	call	0xac4	; 0xac4 <_ZN14HardwareSerial5beginEmh>
int setPoint = 0;

void setup() {
  //Open roboclaw serial ports
  Serial.begin(115200);
  roboclaw.begin(38400);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	56 e9       	ldi	r21, 0x96	; 150
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	84 e5       	ldi	r24, 0x54	; 84
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN8RoboClaw5beginEl>
  pinMode(ledPin, OUTPUT);
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ledPin>
     144:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pinMode>
  pinMode(potPin, INPUT);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <potPin>
     14e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pinMode>
  setPoint = 4;
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     15a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
  threshold = 0.1;
     15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     166:	08 95       	ret

00000168 <loop>:
  //setPoint = 0;
}
 
void loop() {
     168:	8f 92       	push	r8
     16a:	9f 92       	push	r9
     16c:	af 92       	push	r10
     16e:	bf 92       	push	r11
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
  delay(5000);
*/
  
  ////////////////////////////////////////////////////////////////////////////////
  
 val = analogRead(potPin);
     180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <potPin>
     184:	0e 94 8f 08 	call	0x111e	; 0x111e <analogRead>
     188:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <val+0x1>
     18c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <val>
  pos = map(val, 0, 1023, 0, 5);
     190:	bc 01       	movw	r22, r24
     192:	99 0f       	add	r25, r25
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
     198:	1f 92       	push	r1
     19a:	1f 92       	push	r1
     19c:	1f 92       	push	r1
     19e:	25 e0       	ldi	r18, 0x05	; 5
     1a0:	2f 93       	push	r18
     1a2:	a1 2c       	mov	r10, r1
     1a4:	b1 2c       	mov	r11, r1
     1a6:	65 01       	movw	r12, r10
     1a8:	ee 24       	eor	r14, r14
     1aa:	ea 94       	dec	r14
     1ac:	13 e0       	ldi	r17, 0x03	; 3
     1ae:	f1 2e       	mov	r15, r17
     1b0:	00 e0       	ldi	r16, 0x00	; 0
     1b2:	10 e0       	ldi	r17, 0x00	; 0
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	a9 01       	movw	r20, r18
     1ba:	0e 94 40 09 	call	0x1280	; 0x1280 <_Z3maplllll>
     1be:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__floatsisf>
     1c2:	6b 01       	movw	r12, r22
     1c4:	7c 01       	movw	r14, r24
     1c6:	60 93 4e 01 	sts	0x014E, r22	; 0x80014e <pos>
     1ca:	70 93 4f 01 	sts	0x014F, r23	; 0x80014f <pos+0x1>
     1ce:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <pos+0x2>
     1d2:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <pos+0x3>
  if (pos >= (setPoint - threshold) && pos <= (setPoint + threshold)) {
     1d6:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <__data_end>
     1da:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <__data_end+0x1>
     1de:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
     1e2:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
     1e6:	b8 01       	movw	r22, r16
     1e8:	6c 1b       	sub	r22, r28
     1ea:	7d 0b       	sbc	r23, r29
     1ec:	07 2e       	mov	r0, r23
     1ee:	00 0c       	add	r0, r0
     1f0:	88 0b       	sbc	r24, r24
     1f2:	99 0b       	sbc	r25, r25
     1f4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__floatsisf>
     1f8:	4b 01       	movw	r8, r22
     1fa:	5c 01       	movw	r10, r24
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	9b 01       	movw	r18, r22
     206:	ac 01       	movw	r20, r24
     208:	c7 01       	movw	r24, r14
     20a:	b6 01       	movw	r22, r12
     20c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
     210:	87 fd       	sbrc	r24, 7
     212:	13 c0       	rjmp	.+38     	; 0x23a <loop+0xd2>
     214:	b8 01       	movw	r22, r16
     216:	6c 0f       	add	r22, r28
     218:	7d 1f       	adc	r23, r29
     21a:	07 2e       	mov	r0, r23
     21c:	00 0c       	add	r0, r0
     21e:	88 0b       	sbc	r24, r24
     220:	99 0b       	sbc	r25, r25
     222:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__floatsisf>
     226:	9b 01       	movw	r18, r22
     228:	ac 01       	movw	r20, r24
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
     232:	18 16       	cp	r1, r24
     234:	14 f0       	brlt	.+4      	; 0x23a <loop+0xd2>
	  roboclaw.ForwardM1(address,0);
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	09 c0       	rjmp	.+18     	; 0x24c <loop+0xe4>
	  Serial.print(pos);
	}
  else if (pos > (setPoint - threshold)){
     23a:	a5 01       	movw	r20, r10
     23c:	94 01       	movw	r18, r8
     23e:	c7 01       	movw	r24, r14
     240:	b6 01       	movw	r22, r12
     242:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
     246:	18 16       	cp	r1, r24
     248:	3c f4       	brge	.+14     	; 0x258 <loop+0xf0>
		roboclaw.ForwardM1(address, 70);
     24a:	46 e4       	ldi	r20, 0x46	; 70
     24c:	60 e8       	ldi	r22, 0x80	; 128
     24e:	84 e5       	ldi	r24, 0x54	; 84
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 01 03 	call	0x602	; 0x602 <_ZN8RoboClaw9ForwardM1Ehh>
     256:	17 c0       	rjmp	.+46     	; 0x286 <loop+0x11e>
		Serial.print(pos);
	}
  else if (pos < (setPoint + threshold)){
     258:	b8 01       	movw	r22, r16
     25a:	6c 0f       	add	r22, r28
     25c:	7d 1f       	adc	r23, r29
     25e:	07 2e       	mov	r0, r23
     260:	00 0c       	add	r0, r0
     262:	88 0b       	sbc	r24, r24
     264:	99 0b       	sbc	r25, r25
     266:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__floatsisf>
     26a:	9b 01       	movw	r18, r22
     26c:	ac 01       	movw	r20, r24
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
     276:	87 ff       	sbrs	r24, 7
     278:	20 c0       	rjmp	.+64     	; 0x2ba <loop+0x152>
		roboclaw.BackwardM1(address, 50);
     27a:	42 e3       	ldi	r20, 0x32	; 50
     27c:	60 e8       	ldi	r22, 0x80	; 128
     27e:	84 e5       	ldi	r24, 0x54	; 84
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN8RoboClaw10BackwardM1Ehh>
		Serial.print(pos);
     286:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <pos>
     28a:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <pos+0x1>
     28e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <pos+0x2>
     292:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <pos+0x3>
     296:	22 e0       	ldi	r18, 0x02	; 2
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	89 e8       	ldi	r24, 0x89	; 137
     29c:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	9f 90       	pop	r9
     2b4:	8f 90       	pop	r8
		roboclaw.ForwardM1(address, 70);
		Serial.print(pos);
	}
  else if (pos < (setPoint + threshold)){
		roboclaw.BackwardM1(address, 50);
		Serial.print(pos);
     2b6:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_ZN5Print5printEdi>
	}
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	9f 90       	pop	r9
     2d0:	8f 90       	pop	r8
     2d2:	08 95       	ret

000002d4 <_GLOBAL__sub_I_serial>:
#include <Arduino.h>
#include <SoftwareSerial.h>
#include "RoboClaw.h"

//See limitations of Arduino SoftwareSerial
SoftwareSerial serial(0,1);	
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	41 e0       	ldi	r20, 0x01	; 1
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	8a e6       	ldi	r24, 0x6A	; 106
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 35 0b 	call	0x166a	; 0x166a <_ZN14SoftwareSerialC1Ehhb>
RoboClaw roboclaw = RoboClaw(&serial,10000);
     2e2:	20 e1       	ldi	r18, 0x10	; 16
     2e4:	37 e2       	ldi	r19, 0x27	; 39
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	6a e6       	ldi	r22, 0x6A	; 106
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	84 e5       	ldi	r24, 0x54	; 84
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_ZN8RoboClawC1EP14SoftwareSerialm>

000002f6 <_GLOBAL__sub_D_serial>:
     2f6:	84 e5       	ldi	r24, 0x54	; 84
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 05 02 	call	0x40a	; 0x40a <_ZN8RoboClawD1Ev>
#include <Arduino.h>
#include <SoftwareSerial.h>
#include "RoboClaw.h"

//See limitations of Arduino SoftwareSerial
SoftwareSerial serial(0,1);	
     2fe:	8a e6       	ldi	r24, 0x6A	; 106
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <_ZN14SoftwareSerialD1Ev>

00000306 <_ZN5Print17availableForWriteEv>:
			}
		}
	}while(trys--);

	return false;
}
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	08 95       	ret

0000030c <_ZN8RoboClaw5flushEv>:
     30c:	dc 01       	movw	r26, r24
     30e:	52 96       	adiw	r26, 0x12	; 18
     310:	8d 91       	ld	r24, X+
     312:	9c 91       	ld	r25, X
     314:	53 97       	sbiw	r26, 0x13	; 19
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	39 f0       	breq	.+14     	; 0x328 <_ZN8RoboClaw5flushEv+0x1c>
     31a:	dc 01       	movw	r26, r24
     31c:	ed 91       	ld	r30, X+
     31e:	fc 91       	ld	r31, X
     320:	06 80       	ldd	r0, Z+6	; 0x06
     322:	f7 81       	ldd	r31, Z+7	; 0x07
     324:	e0 2d       	mov	r30, r0
     326:	09 94       	ijmp
     328:	08 95       	ret

0000032a <_ZN8RoboClaw9availableEv>:
     32a:	fc 01       	movw	r30, r24
     32c:	a2 89       	ldd	r26, Z+18	; 0x12
     32e:	b3 89       	ldd	r27, Z+19	; 0x13
     330:	10 97       	sbiw	r26, 0x00	; 0
     332:	41 f0       	breq	.+16     	; 0x344 <_ZN8RoboClaw9availableEv+0x1a>
     334:	ed 91       	ld	r30, X+
     336:	fc 91       	ld	r31, X
     338:	11 97       	sbiw	r26, 0x01	; 1
     33a:	00 84       	ldd	r0, Z+8	; 0x08
     33c:	f1 85       	ldd	r31, Z+9	; 0x09
     33e:	e0 2d       	mov	r30, r0
     340:	cd 01       	movw	r24, r26
     342:	08 c0       	rjmp	.+16     	; 0x354 <_ZN8RoboClaw9availableEv+0x2a>
     344:	84 89       	ldd	r24, Z+20	; 0x14
     346:	95 89       	ldd	r25, Z+21	; 0x15
     348:	dc 01       	movw	r26, r24
     34a:	ed 91       	ld	r30, X+
     34c:	fc 91       	ld	r31, X
     34e:	00 84       	ldd	r0, Z+8	; 0x08
     350:	f1 85       	ldd	r31, Z+9	; 0x09
     352:	e0 2d       	mov	r30, r0
     354:	09 94       	ijmp

00000356 <_ZN8RoboClaw4readEv>:
     356:	fc 01       	movw	r30, r24
     358:	a2 89       	ldd	r26, Z+18	; 0x12
     35a:	b3 89       	ldd	r27, Z+19	; 0x13
     35c:	10 97       	sbiw	r26, 0x00	; 0
     35e:	41 f0       	breq	.+16     	; 0x370 <_ZN8RoboClaw4readEv+0x1a>
     360:	ed 91       	ld	r30, X+
     362:	fc 91       	ld	r31, X
     364:	11 97       	sbiw	r26, 0x01	; 1
     366:	02 84       	ldd	r0, Z+10	; 0x0a
     368:	f3 85       	ldd	r31, Z+11	; 0x0b
     36a:	e0 2d       	mov	r30, r0
     36c:	cd 01       	movw	r24, r26
     36e:	08 c0       	rjmp	.+16     	; 0x380 <_ZN8RoboClaw4readEv+0x2a>
     370:	84 89       	ldd	r24, Z+20	; 0x14
     372:	95 89       	ldd	r25, Z+21	; 0x15
     374:	dc 01       	movw	r26, r24
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	02 84       	ldd	r0, Z+10	; 0x0a
     37c:	f3 85       	ldd	r31, Z+11	; 0x0b
     37e:	e0 2d       	mov	r30, r0
     380:	09 94       	ijmp

00000382 <_ZN8RoboClaw5writeEh>:
     382:	fc 01       	movw	r30, r24
     384:	a2 89       	ldd	r26, Z+18	; 0x12
     386:	b3 89       	ldd	r27, Z+19	; 0x13
     388:	10 97       	sbiw	r26, 0x00	; 0
     38a:	41 f0       	breq	.+16     	; 0x39c <_ZN8RoboClaw5writeEh+0x1a>
     38c:	ed 91       	ld	r30, X+
     38e:	fc 91       	ld	r31, X
     390:	11 97       	sbiw	r26, 0x01	; 1
     392:	01 90       	ld	r0, Z+
     394:	f0 81       	ld	r31, Z
     396:	e0 2d       	mov	r30, r0
     398:	cd 01       	movw	r24, r26
     39a:	08 c0       	rjmp	.+16     	; 0x3ac <_ZN8RoboClaw5writeEh+0x2a>
     39c:	84 89       	ldd	r24, Z+20	; 0x14
     39e:	95 89       	ldd	r25, Z+21	; 0x15
     3a0:	dc 01       	movw	r26, r24
     3a2:	ed 91       	ld	r30, X+
     3a4:	fc 91       	ld	r31, X
     3a6:	01 90       	ld	r0, Z+
     3a8:	f0 81       	ld	r31, Z
     3aa:	e0 2d       	mov	r30, r0
     3ac:	09 94       	ijmp

000003ae <_ZN8RoboClaw4peekEv>:
     3ae:	fc 01       	movw	r30, r24
     3b0:	a2 89       	ldd	r26, Z+18	; 0x12
     3b2:	b3 89       	ldd	r27, Z+19	; 0x13
     3b4:	10 97       	sbiw	r26, 0x00	; 0
     3b6:	41 f0       	breq	.+16     	; 0x3c8 <_ZN8RoboClaw4peekEv+0x1a>
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	11 97       	sbiw	r26, 0x01	; 1
     3be:	04 84       	ldd	r0, Z+12	; 0x0c
     3c0:	f5 85       	ldd	r31, Z+13	; 0x0d
     3c2:	e0 2d       	mov	r30, r0
     3c4:	cd 01       	movw	r24, r26
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <_ZN8RoboClaw4peekEv+0x2a>
     3c8:	84 89       	ldd	r24, Z+20	; 0x14
     3ca:	95 89       	ldd	r25, Z+21	; 0x15
     3cc:	dc 01       	movw	r26, r24
     3ce:	ed 91       	ld	r30, X+
     3d0:	fc 91       	ld	r31, X
     3d2:	04 84       	ldd	r0, Z+12	; 0x0c
     3d4:	f5 85       	ldd	r31, Z+13	; 0x0d
     3d6:	e0 2d       	mov	r30, r0
     3d8:	09 94       	ijmp

000003da <_ZN8RoboClawC1EP14SoftwareSerialm>:
     3da:	fc 01       	movw	r30, r24
     3dc:	13 82       	std	Z+3, r1	; 0x03
     3de:	12 82       	std	Z+2, r1	; 0x02
     3e0:	88 ee       	ldi	r24, 0xE8	; 232
     3e2:	93 e0       	ldi	r25, 0x03	; 3
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	84 83       	std	Z+4, r24	; 0x04
     3ea:	95 83       	std	Z+5, r25	; 0x05
     3ec:	a6 83       	std	Z+6, r26	; 0x06
     3ee:	b7 83       	std	Z+7, r27	; 0x07
     3f0:	8b e0       	ldi	r24, 0x0B	; 11
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	91 83       	std	Z+1, r25	; 0x01
     3f6:	80 83       	st	Z, r24
     3f8:	26 87       	std	Z+14, r18	; 0x0e
     3fa:	37 87       	std	Z+15, r19	; 0x0f
     3fc:	40 8b       	std	Z+16, r20	; 0x10
     3fe:	51 8b       	std	Z+17, r21	; 0x11
     400:	75 8b       	std	Z+21, r23	; 0x15
     402:	64 8b       	std	Z+20, r22	; 0x14
     404:	13 8a       	std	Z+19, r1	; 0x13
     406:	12 8a       	std	Z+18, r1	; 0x12
     408:	08 95       	ret

0000040a <_ZN8RoboClawD1Ev>:
     40a:	08 95       	ret

0000040c <_ZN8RoboClaw5beginEl>:
     40c:	fc 01       	movw	r30, r24
     40e:	82 89       	ldd	r24, Z+18	; 0x12
     410:	93 89       	ldd	r25, Z+19	; 0x13
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	19 f0       	breq	.+6      	; 0x41c <_ZN8RoboClaw5beginEl+0x10>
     416:	26 e0       	ldi	r18, 0x06	; 6
     418:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_ZN14HardwareSerial5beginEmh>
     41c:	84 89       	ldd	r24, Z+20	; 0x14
     41e:	95 89       	ldd	r25, Z+21	; 0x15
     420:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <_ZN14SoftwareSerial5beginEl>

00000424 <_ZN8RoboClaw4readEm>:
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
     43a:	6a 01       	movw	r12, r20
     43c:	7b 01       	movw	r14, r22
     43e:	8a 89       	ldd	r24, Y+18	; 0x12
     440:	9b 89       	ldd	r25, Y+19	; 0x13
     442:	89 2b       	or	r24, r25
     444:	01 f1       	breq	.+64     	; 0x486 <_ZN8RoboClaw4readEm+0x62>
     446:	0e 94 2f 08 	call	0x105e	; 0x105e <micros>
     44a:	4b 01       	movw	r8, r22
     44c:	5c 01       	movw	r10, r24
     44e:	8a 89       	ldd	r24, Y+18	; 0x12
     450:	9b 89       	ldd	r25, Y+19	; 0x13
     452:	dc 01       	movw	r26, r24
     454:	ed 91       	ld	r30, X+
     456:	fc 91       	ld	r31, X
     458:	00 84       	ldd	r0, Z+8	; 0x08
     45a:	f1 85       	ldd	r31, Z+9	; 0x09
     45c:	e0 2d       	mov	r30, r0
     45e:	09 95       	icall
     460:	89 2b       	or	r24, r25
     462:	71 f4       	brne	.+28     	; 0x480 <_ZN8RoboClaw4readEm+0x5c>
     464:	0e 94 2f 08 	call	0x105e	; 0x105e <micros>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	88 19       	sub	r24, r8
     46e:	99 09       	sbc	r25, r9
     470:	aa 09       	sbc	r26, r10
     472:	bb 09       	sbc	r27, r11
     474:	8c 15       	cp	r24, r12
     476:	9d 05       	cpc	r25, r13
     478:	ae 05       	cpc	r26, r14
     47a:	bf 05       	cpc	r27, r15
     47c:	40 f3       	brcs	.-48     	; 0x44e <_ZN8RoboClaw4readEm+0x2a>
     47e:	3d c0       	rjmp	.+122    	; 0x4fa <_ZN8RoboClaw4readEm+0xd6>
     480:	8a 89       	ldd	r24, Y+18	; 0x12
     482:	9b 89       	ldd	r25, Y+19	; 0x13
     484:	28 c0       	rjmp	.+80     	; 0x4d6 <_ZN8RoboClaw4readEm+0xb2>
     486:	2c 89       	ldd	r18, Y+20	; 0x14
     488:	3d 89       	ldd	r19, Y+21	; 0x15
     48a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
     48e:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
     492:	28 17       	cp	r18, r24
     494:	39 07       	cpc	r19, r25
     496:	81 f5       	brne	.+96     	; 0x4f8 <_ZN8RoboClaw4readEm+0xd4>
     498:	0e 94 2f 08 	call	0x105e	; 0x105e <micros>
     49c:	4b 01       	movw	r8, r22
     49e:	5c 01       	movw	r10, r24
     4a0:	8c 89       	ldd	r24, Y+20	; 0x14
     4a2:	9d 89       	ldd	r25, Y+21	; 0x15
     4a4:	dc 01       	movw	r26, r24
     4a6:	ed 91       	ld	r30, X+
     4a8:	fc 91       	ld	r31, X
     4aa:	00 84       	ldd	r0, Z+8	; 0x08
     4ac:	f1 85       	ldd	r31, Z+9	; 0x09
     4ae:	e0 2d       	mov	r30, r0
     4b0:	09 95       	icall
     4b2:	89 2b       	or	r24, r25
     4b4:	71 f4       	brne	.+28     	; 0x4d2 <_ZN8RoboClaw4readEm+0xae>
     4b6:	0e 94 2f 08 	call	0x105e	; 0x105e <micros>
     4ba:	dc 01       	movw	r26, r24
     4bc:	cb 01       	movw	r24, r22
     4be:	88 19       	sub	r24, r8
     4c0:	99 09       	sbc	r25, r9
     4c2:	aa 09       	sbc	r26, r10
     4c4:	bb 09       	sbc	r27, r11
     4c6:	8c 15       	cp	r24, r12
     4c8:	9d 05       	cpc	r25, r13
     4ca:	ae 05       	cpc	r26, r14
     4cc:	bf 05       	cpc	r27, r15
     4ce:	40 f3       	brcs	.-48     	; 0x4a0 <_ZN8RoboClaw4readEm+0x7c>
     4d0:	14 c0       	rjmp	.+40     	; 0x4fa <_ZN8RoboClaw4readEm+0xd6>
     4d2:	8c 89       	ldd	r24, Y+20	; 0x14
     4d4:	9d 89       	ldd	r25, Y+21	; 0x15
     4d6:	dc 01       	movw	r26, r24
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	02 84       	ldd	r0, Z+10	; 0x0a
     4de:	f3 85       	ldd	r31, Z+11	; 0x0b
     4e0:	e0 2d       	mov	r30, r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	09 94       	ijmp
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <_ZN8RoboClaw4readEm+0xda>
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	bf 90       	pop	r11
     50c:	af 90       	pop	r10
     50e:	9f 90       	pop	r9
     510:	8f 90       	pop	r8
     512:	08 95       	ret

00000514 <_ZN8RoboClaw10crc_updateEh>:
     514:	fc 01       	movw	r30, r24
     516:	84 85       	ldd	r24, Z+12	; 0x0c
     518:	95 85       	ldd	r25, Z+13	; 0x0d
     51a:	96 27       	eor	r25, r22
     51c:	95 87       	std	Z+13, r25	; 0x0d
     51e:	84 87       	std	Z+12, r24	; 0x0c
     520:	28 e0       	ldi	r18, 0x08	; 8
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	44 85       	ldd	r20, Z+12	; 0x0c
     526:	55 85       	ldd	r21, Z+13	; 0x0d
     528:	ca 01       	movw	r24, r20
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	57 ff       	sbrs	r21, 7
     530:	04 c0       	rjmp	.+8      	; 0x53a <_ZN8RoboClaw10crc_updateEh+0x26>
     532:	41 e2       	ldi	r20, 0x21	; 33
     534:	84 27       	eor	r24, r20
     536:	40 e1       	ldi	r20, 0x10	; 16
     538:	94 27       	eor	r25, r20
     53a:	95 87       	std	Z+13, r25	; 0x0d
     53c:	84 87       	std	Z+12, r24	; 0x0c
     53e:	21 50       	subi	r18, 0x01	; 1
     540:	31 09       	sbc	r19, r1
     542:	81 f7       	brne	.-32     	; 0x524 <_ZN8RoboClaw10crc_updateEh+0x10>
     544:	08 95       	ret

00000546 <_ZN8RoboClaw7write_nEhz>:
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	0c 85       	ldd	r16, Y+12	; 0x0c
     55e:	1d 85       	ldd	r17, Y+13	; 0x0d
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	f8 2e       	mov	r15, r24
     564:	d8 01       	movw	r26, r16
     566:	1d 96       	adiw	r26, 0x0d	; 13
     568:	1c 92       	st	X, r1
     56a:	1e 92       	st	-X, r1
     56c:	1c 97       	sbiw	r26, 0x0c	; 12
     56e:	fe 01       	movw	r30, r28
     570:	3f 96       	adiw	r30, 0x0f	; 15
     572:	e1 2c       	mov	r14, r1
     574:	be 85       	ldd	r27, Y+14	; 0x0e
     576:	eb 16       	cp	r14, r27
     578:	a9 f0       	breq	.+42     	; 0x5a4 <_ZN8RoboClaw7write_nEhz+0x5e>
     57a:	5f 01       	movw	r10, r30
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	a8 0e       	add	r10, r24
     580:	b1 1c       	adc	r11, r1
     582:	d0 80       	ld	r13, Z
     584:	6d 2d       	mov	r22, r13
     586:	c8 01       	movw	r24, r16
     588:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN8RoboClaw10crc_updateEh>
     58c:	d8 01       	movw	r26, r16
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	01 90       	ld	r0, Z+
     594:	f0 81       	ld	r31, Z
     596:	e0 2d       	mov	r30, r0
     598:	6d 2d       	mov	r22, r13
     59a:	c8 01       	movw	r24, r16
     59c:	09 95       	icall
     59e:	e3 94       	inc	r14
     5a0:	f5 01       	movw	r30, r10
     5a2:	e8 cf       	rjmp	.-48     	; 0x574 <_ZN8RoboClaw7write_nEhz+0x2e>
     5a4:	f8 01       	movw	r30, r16
     5a6:	e4 84       	ldd	r14, Z+12	; 0x0c
     5a8:	65 85       	ldd	r22, Z+13	; 0x0d
     5aa:	01 90       	ld	r0, Z+
     5ac:	f0 81       	ld	r31, Z
     5ae:	e0 2d       	mov	r30, r0
     5b0:	01 90       	ld	r0, Z+
     5b2:	f0 81       	ld	r31, Z
     5b4:	e0 2d       	mov	r30, r0
     5b6:	c8 01       	movw	r24, r16
     5b8:	09 95       	icall
     5ba:	d8 01       	movw	r26, r16
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	01 90       	ld	r0, Z+
     5c2:	f0 81       	ld	r31, Z
     5c4:	e0 2d       	mov	r30, r0
     5c6:	6e 2d       	mov	r22, r14
     5c8:	c8 01       	movw	r24, r16
     5ca:	09 95       	icall
     5cc:	f8 01       	movw	r30, r16
     5ce:	46 85       	ldd	r20, Z+14	; 0x0e
     5d0:	57 85       	ldd	r21, Z+15	; 0x0f
     5d2:	60 89       	ldd	r22, Z+16	; 0x10
     5d4:	71 89       	ldd	r23, Z+17	; 0x11
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 12 02 	call	0x424	; 0x424 <_ZN8RoboClaw4readEm>
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	91 05       	cpc	r25, r1
     5e0:	29 f0       	breq	.+10     	; 0x5ec <_ZN8RoboClaw7write_nEhz+0xa6>
     5e2:	fa 94       	dec	r15
     5e4:	f1 10       	cpse	r15, r1
     5e6:	be cf       	rjmp	.-132    	; 0x564 <_ZN8RoboClaw7write_nEhz+0x1e>
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <_ZN8RoboClaw7write_nEhz+0xa8>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	08 95       	ret

00000602 <_ZN8RoboClaw9ForwardM1Ehh>:

bool RoboClaw::ForwardM1(uint8_t address, uint8_t speed){
	return write_n(3,address,M1FORWARD,speed);
     602:	1f 92       	push	r1
     604:	4f 93       	push	r20
     606:	1f 92       	push	r1
     608:	1f 92       	push	r1
     60a:	1f 92       	push	r1
     60c:	6f 93       	push	r22
     60e:	23 e0       	ldi	r18, 0x03	; 3
     610:	2f 93       	push	r18
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN8RoboClaw7write_nEhz>
     61a:	2d b7       	in	r18, 0x3d	; 61
     61c:	3e b7       	in	r19, 0x3e	; 62
     61e:	27 5f       	subi	r18, 0xF7	; 247
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	3e bf       	out	0x3e, r19	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	2d bf       	out	0x3d, r18	; 61
}
     62c:	08 95       	ret

0000062e <_ZN8RoboClaw10BackwardM1Ehh>:

bool RoboClaw::BackwardM1(uint8_t address, uint8_t speed){
	return write_n(3,address,M1BACKWARD,speed);
     62e:	1f 92       	push	r1
     630:	4f 93       	push	r20
     632:	1f 92       	push	r1
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	2f 93       	push	r18
     638:	1f 92       	push	r1
     63a:	6f 93       	push	r22
     63c:	23 e0       	ldi	r18, 0x03	; 3
     63e:	2f 93       	push	r18
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN8RoboClaw7write_nEhz>
     648:	2d b7       	in	r18, 0x3d	; 61
     64a:	3e b7       	in	r19, 0x3e	; 62
     64c:	27 5f       	subi	r18, 0xF7	; 247
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	3e bf       	out	0x3e, r19	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	2d bf       	out	0x3d, r18	; 61
}
     65a:	08 95       	ret

0000065c <__cmpsf2>:
     65c:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_cmp>
     660:	08 f4       	brcc	.+2      	; 0x664 <__cmpsf2+0x8>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	08 95       	ret

00000666 <__fixunssfsi>:
     666:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_splitA>
     66a:	88 f0       	brcs	.+34     	; 0x68e <__fixunssfsi+0x28>
     66c:	9f 57       	subi	r25, 0x7F	; 127
     66e:	98 f0       	brcs	.+38     	; 0x696 <__fixunssfsi+0x30>
     670:	b9 2f       	mov	r27, r25
     672:	99 27       	eor	r25, r25
     674:	b7 51       	subi	r27, 0x17	; 23
     676:	b0 f0       	brcs	.+44     	; 0x6a4 <__fixunssfsi+0x3e>
     678:	e1 f0       	breq	.+56     	; 0x6b2 <__fixunssfsi+0x4c>
     67a:	66 0f       	add	r22, r22
     67c:	77 1f       	adc	r23, r23
     67e:	88 1f       	adc	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	1a f0       	brmi	.+6      	; 0x68a <__fixunssfsi+0x24>
     684:	ba 95       	dec	r27
     686:	c9 f7       	brne	.-14     	; 0x67a <__fixunssfsi+0x14>
     688:	14 c0       	rjmp	.+40     	; 0x6b2 <__fixunssfsi+0x4c>
     68a:	b1 30       	cpi	r27, 0x01	; 1
     68c:	91 f0       	breq	.+36     	; 0x6b2 <__fixunssfsi+0x4c>
     68e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_zero>
     692:	b1 e0       	ldi	r27, 0x01	; 1
     694:	08 95       	ret
     696:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
     69a:	67 2f       	mov	r22, r23
     69c:	78 2f       	mov	r23, r24
     69e:	88 27       	eor	r24, r24
     6a0:	b8 5f       	subi	r27, 0xF8	; 248
     6a2:	39 f0       	breq	.+14     	; 0x6b2 <__fixunssfsi+0x4c>
     6a4:	b9 3f       	cpi	r27, 0xF9	; 249
     6a6:	cc f3       	brlt	.-14     	; 0x69a <__fixunssfsi+0x34>
     6a8:	86 95       	lsr	r24
     6aa:	77 95       	ror	r23
     6ac:	67 95       	ror	r22
     6ae:	b3 95       	inc	r27
     6b0:	d9 f7       	brne	.-10     	; 0x6a8 <__fixunssfsi+0x42>
     6b2:	3e f4       	brtc	.+14     	; 0x6c2 <__fixunssfsi+0x5c>
     6b4:	90 95       	com	r25
     6b6:	80 95       	com	r24
     6b8:	70 95       	com	r23
     6ba:	61 95       	neg	r22
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	8f 4f       	sbci	r24, 0xFF	; 255
     6c0:	9f 4f       	sbci	r25, 0xFF	; 255
     6c2:	08 95       	ret

000006c4 <__floatunsisf>:
     6c4:	e8 94       	clt
     6c6:	09 c0       	rjmp	.+18     	; 0x6da <__floatsisf+0x12>

000006c8 <__floatsisf>:
     6c8:	97 fb       	bst	r25, 7
     6ca:	3e f4       	brtc	.+14     	; 0x6da <__floatsisf+0x12>
     6cc:	90 95       	com	r25
     6ce:	80 95       	com	r24
     6d0:	70 95       	com	r23
     6d2:	61 95       	neg	r22
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	8f 4f       	sbci	r24, 0xFF	; 255
     6d8:	9f 4f       	sbci	r25, 0xFF	; 255
     6da:	99 23       	and	r25, r25
     6dc:	a9 f0       	breq	.+42     	; 0x708 <__floatsisf+0x40>
     6de:	f9 2f       	mov	r31, r25
     6e0:	96 e9       	ldi	r25, 0x96	; 150
     6e2:	bb 27       	eor	r27, r27
     6e4:	93 95       	inc	r25
     6e6:	f6 95       	lsr	r31
     6e8:	87 95       	ror	r24
     6ea:	77 95       	ror	r23
     6ec:	67 95       	ror	r22
     6ee:	b7 95       	ror	r27
     6f0:	f1 11       	cpse	r31, r1
     6f2:	f8 cf       	rjmp	.-16     	; 0x6e4 <__floatsisf+0x1c>
     6f4:	fa f4       	brpl	.+62     	; 0x734 <__floatsisf+0x6c>
     6f6:	bb 0f       	add	r27, r27
     6f8:	11 f4       	brne	.+4      	; 0x6fe <__floatsisf+0x36>
     6fa:	60 ff       	sbrs	r22, 0
     6fc:	1b c0       	rjmp	.+54     	; 0x734 <__floatsisf+0x6c>
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	8f 4f       	sbci	r24, 0xFF	; 255
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	16 c0       	rjmp	.+44     	; 0x734 <__floatsisf+0x6c>
     708:	88 23       	and	r24, r24
     70a:	11 f0       	breq	.+4      	; 0x710 <__floatsisf+0x48>
     70c:	96 e9       	ldi	r25, 0x96	; 150
     70e:	11 c0       	rjmp	.+34     	; 0x732 <__floatsisf+0x6a>
     710:	77 23       	and	r23, r23
     712:	21 f0       	breq	.+8      	; 0x71c <__floatsisf+0x54>
     714:	9e e8       	ldi	r25, 0x8E	; 142
     716:	87 2f       	mov	r24, r23
     718:	76 2f       	mov	r23, r22
     71a:	05 c0       	rjmp	.+10     	; 0x726 <__floatsisf+0x5e>
     71c:	66 23       	and	r22, r22
     71e:	71 f0       	breq	.+28     	; 0x73c <__floatsisf+0x74>
     720:	96 e8       	ldi	r25, 0x86	; 134
     722:	86 2f       	mov	r24, r22
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	2a f0       	brmi	.+10     	; 0x734 <__floatsisf+0x6c>
     72a:	9a 95       	dec	r25
     72c:	66 0f       	add	r22, r22
     72e:	77 1f       	adc	r23, r23
     730:	88 1f       	adc	r24, r24
     732:	da f7       	brpl	.-10     	; 0x72a <__floatsisf+0x62>
     734:	88 0f       	add	r24, r24
     736:	96 95       	lsr	r25
     738:	87 95       	ror	r24
     73a:	97 f9       	bld	r25, 7
     73c:	08 95       	ret

0000073e <__fp_cmp>:
     73e:	99 0f       	add	r25, r25
     740:	00 08       	sbc	r0, r0
     742:	55 0f       	add	r21, r21
     744:	aa 0b       	sbc	r26, r26
     746:	e0 e8       	ldi	r30, 0x80	; 128
     748:	fe ef       	ldi	r31, 0xFE	; 254
     74a:	16 16       	cp	r1, r22
     74c:	17 06       	cpc	r1, r23
     74e:	e8 07       	cpc	r30, r24
     750:	f9 07       	cpc	r31, r25
     752:	c0 f0       	brcs	.+48     	; 0x784 <__fp_cmp+0x46>
     754:	12 16       	cp	r1, r18
     756:	13 06       	cpc	r1, r19
     758:	e4 07       	cpc	r30, r20
     75a:	f5 07       	cpc	r31, r21
     75c:	98 f0       	brcs	.+38     	; 0x784 <__fp_cmp+0x46>
     75e:	62 1b       	sub	r22, r18
     760:	73 0b       	sbc	r23, r19
     762:	84 0b       	sbc	r24, r20
     764:	95 0b       	sbc	r25, r21
     766:	39 f4       	brne	.+14     	; 0x776 <__fp_cmp+0x38>
     768:	0a 26       	eor	r0, r26
     76a:	61 f0       	breq	.+24     	; 0x784 <__fp_cmp+0x46>
     76c:	23 2b       	or	r18, r19
     76e:	24 2b       	or	r18, r20
     770:	25 2b       	or	r18, r21
     772:	21 f4       	brne	.+8      	; 0x77c <__fp_cmp+0x3e>
     774:	08 95       	ret
     776:	0a 26       	eor	r0, r26
     778:	09 f4       	brne	.+2      	; 0x77c <__fp_cmp+0x3e>
     77a:	a1 40       	sbci	r26, 0x01	; 1
     77c:	a6 95       	lsr	r26
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	81 1d       	adc	r24, r1
     782:	81 1d       	adc	r24, r1
     784:	08 95       	ret

00000786 <__fp_split3>:
     786:	57 fd       	sbrc	r21, 7
     788:	90 58       	subi	r25, 0x80	; 128
     78a:	44 0f       	add	r20, r20
     78c:	55 1f       	adc	r21, r21
     78e:	59 f0       	breq	.+22     	; 0x7a6 <__fp_splitA+0x10>
     790:	5f 3f       	cpi	r21, 0xFF	; 255
     792:	71 f0       	breq	.+28     	; 0x7b0 <__fp_splitA+0x1a>
     794:	47 95       	ror	r20

00000796 <__fp_splitA>:
     796:	88 0f       	add	r24, r24
     798:	97 fb       	bst	r25, 7
     79a:	99 1f       	adc	r25, r25
     79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_splitA+0x20>
     79e:	9f 3f       	cpi	r25, 0xFF	; 255
     7a0:	79 f0       	breq	.+30     	; 0x7c0 <__fp_splitA+0x2a>
     7a2:	87 95       	ror	r24
     7a4:	08 95       	ret
     7a6:	12 16       	cp	r1, r18
     7a8:	13 06       	cpc	r1, r19
     7aa:	14 06       	cpc	r1, r20
     7ac:	55 1f       	adc	r21, r21
     7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__fp_split3+0xe>
     7b0:	46 95       	lsr	r20
     7b2:	f1 df       	rcall	.-30     	; 0x796 <__fp_splitA>
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__fp_splitA+0x30>
     7b6:	16 16       	cp	r1, r22
     7b8:	17 06       	cpc	r1, r23
     7ba:	18 06       	cpc	r1, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	f1 cf       	rjmp	.-30     	; 0x7a2 <__fp_splitA+0xc>
     7c0:	86 95       	lsr	r24
     7c2:	71 05       	cpc	r23, r1
     7c4:	61 05       	cpc	r22, r1
     7c6:	08 94       	sec
     7c8:	08 95       	ret

000007ca <__fp_zero>:
     7ca:	e8 94       	clt

000007cc <__fp_szero>:
     7cc:	bb 27       	eor	r27, r27
     7ce:	66 27       	eor	r22, r22
     7d0:	77 27       	eor	r23, r23
     7d2:	cb 01       	movw	r24, r22
     7d4:	97 f9       	bld	r25, 7
     7d6:	08 95       	ret

000007d8 <__gesf2>:
     7d8:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_cmp>
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <__gesf2+0x8>
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	08 95       	ret

000007e2 <__mulsf3>:
     7e2:	0e 94 04 04 	call	0x808	; 0x808 <__mulsf3x>
     7e6:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
     7ea:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
     7ee:	38 f0       	brcs	.+14     	; 0x7fe <__mulsf3+0x1c>
     7f0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
     7f4:	20 f0       	brcs	.+8      	; 0x7fe <__mulsf3+0x1c>
     7f6:	95 23       	and	r25, r21
     7f8:	11 f0       	breq	.+4      	; 0x7fe <__mulsf3+0x1c>
     7fa:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_inf>
     7fe:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_nan>
     802:	11 24       	eor	r1, r1
     804:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>

00000808 <__mulsf3x>:
     808:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
     80c:	70 f3       	brcs	.-36     	; 0x7ea <__mulsf3+0x8>

0000080e <__mulsf3_pse>:
     80e:	95 9f       	mul	r25, r21
     810:	c1 f3       	breq	.-16     	; 0x802 <__mulsf3+0x20>
     812:	95 0f       	add	r25, r21
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	55 1f       	adc	r21, r21
     818:	62 9f       	mul	r22, r18
     81a:	f0 01       	movw	r30, r0
     81c:	72 9f       	mul	r23, r18
     81e:	bb 27       	eor	r27, r27
     820:	f0 0d       	add	r31, r0
     822:	b1 1d       	adc	r27, r1
     824:	63 9f       	mul	r22, r19
     826:	aa 27       	eor	r26, r26
     828:	f0 0d       	add	r31, r0
     82a:	b1 1d       	adc	r27, r1
     82c:	aa 1f       	adc	r26, r26
     82e:	64 9f       	mul	r22, r20
     830:	66 27       	eor	r22, r22
     832:	b0 0d       	add	r27, r0
     834:	a1 1d       	adc	r26, r1
     836:	66 1f       	adc	r22, r22
     838:	82 9f       	mul	r24, r18
     83a:	22 27       	eor	r18, r18
     83c:	b0 0d       	add	r27, r0
     83e:	a1 1d       	adc	r26, r1
     840:	62 1f       	adc	r22, r18
     842:	73 9f       	mul	r23, r19
     844:	b0 0d       	add	r27, r0
     846:	a1 1d       	adc	r26, r1
     848:	62 1f       	adc	r22, r18
     84a:	83 9f       	mul	r24, r19
     84c:	a0 0d       	add	r26, r0
     84e:	61 1d       	adc	r22, r1
     850:	22 1f       	adc	r18, r18
     852:	74 9f       	mul	r23, r20
     854:	33 27       	eor	r19, r19
     856:	a0 0d       	add	r26, r0
     858:	61 1d       	adc	r22, r1
     85a:	23 1f       	adc	r18, r19
     85c:	84 9f       	mul	r24, r20
     85e:	60 0d       	add	r22, r0
     860:	21 1d       	adc	r18, r1
     862:	82 2f       	mov	r24, r18
     864:	76 2f       	mov	r23, r22
     866:	6a 2f       	mov	r22, r26
     868:	11 24       	eor	r1, r1
     86a:	9f 57       	subi	r25, 0x7F	; 127
     86c:	50 40       	sbci	r21, 0x00	; 0
     86e:	9a f0       	brmi	.+38     	; 0x896 <__mulsf3_pse+0x88>
     870:	f1 f0       	breq	.+60     	; 0x8ae <__mulsf3_pse+0xa0>
     872:	88 23       	and	r24, r24
     874:	4a f0       	brmi	.+18     	; 0x888 <__mulsf3_pse+0x7a>
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	bb 1f       	adc	r27, r27
     87c:	66 1f       	adc	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	88 1f       	adc	r24, r24
     882:	91 50       	subi	r25, 0x01	; 1
     884:	50 40       	sbci	r21, 0x00	; 0
     886:	a9 f7       	brne	.-22     	; 0x872 <__mulsf3_pse+0x64>
     888:	9e 3f       	cpi	r25, 0xFE	; 254
     88a:	51 05       	cpc	r21, r1
     88c:	80 f0       	brcs	.+32     	; 0x8ae <__mulsf3_pse+0xa0>
     88e:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_inf>
     892:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
     896:	5f 3f       	cpi	r21, 0xFF	; 255
     898:	e4 f3       	brlt	.-8      	; 0x892 <__mulsf3_pse+0x84>
     89a:	98 3e       	cpi	r25, 0xE8	; 232
     89c:	d4 f3       	brlt	.-12     	; 0x892 <__mulsf3_pse+0x84>
     89e:	86 95       	lsr	r24
     8a0:	77 95       	ror	r23
     8a2:	67 95       	ror	r22
     8a4:	b7 95       	ror	r27
     8a6:	f7 95       	ror	r31
     8a8:	e7 95       	ror	r30
     8aa:	9f 5f       	subi	r25, 0xFF	; 255
     8ac:	c1 f7       	brne	.-16     	; 0x89e <__mulsf3_pse+0x90>
     8ae:	fe 2b       	or	r31, r30
     8b0:	88 0f       	add	r24, r24
     8b2:	91 1d       	adc	r25, r1
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	97 f9       	bld	r25, 7
     8ba:	08 95       	ret

000008bc <__fp_inf>:
     8bc:	97 f9       	bld	r25, 7
     8be:	9f 67       	ori	r25, 0x7F	; 127
     8c0:	80 e8       	ldi	r24, 0x80	; 128
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	08 95       	ret

000008c8 <__fp_nan>:
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	08 95       	ret

000008ce <__fp_pscA>:
     8ce:	00 24       	eor	r0, r0
     8d0:	0a 94       	dec	r0
     8d2:	16 16       	cp	r1, r22
     8d4:	17 06       	cpc	r1, r23
     8d6:	18 06       	cpc	r1, r24
     8d8:	09 06       	cpc	r0, r25
     8da:	08 95       	ret

000008dc <__fp_pscB>:
     8dc:	00 24       	eor	r0, r0
     8de:	0a 94       	dec	r0
     8e0:	12 16       	cp	r1, r18
     8e2:	13 06       	cpc	r1, r19
     8e4:	14 06       	cpc	r1, r20
     8e6:	05 06       	cpc	r0, r21
     8e8:	08 95       	ret

000008ea <__fp_round>:
     8ea:	09 2e       	mov	r0, r25
     8ec:	03 94       	inc	r0
     8ee:	00 0c       	add	r0, r0
     8f0:	11 f4       	brne	.+4      	; 0x8f6 <__fp_round+0xc>
     8f2:	88 23       	and	r24, r24
     8f4:	52 f0       	brmi	.+20     	; 0x90a <__stack+0xb>
     8f6:	bb 0f       	add	r27, r27
     8f8:	40 f4       	brcc	.+16     	; 0x90a <__stack+0xb>
     8fa:	bf 2b       	or	r27, r31
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
     8fe:	60 ff       	sbrs	r22, 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xb>
     902:	6f 5f       	subi	r22, 0xFF	; 255
     904:	7f 4f       	sbci	r23, 0xFF	; 255
     906:	8f 4f       	sbci	r24, 0xFF	; 255
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	08 95       	ret

0000090c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     90c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     90e:	91 8d       	ldd	r25, Z+25	; 0x19
     910:	22 8d       	ldd	r18, Z+26	; 0x1a
     912:	89 2f       	mov	r24, r25
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	80 5c       	subi	r24, 0xC0	; 192
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	82 1b       	sub	r24, r18
     91c:	91 09       	sbc	r25, r1
}
     91e:	8f 73       	andi	r24, 0x3F	; 63
     920:	99 27       	eor	r25, r25
     922:	08 95       	ret

00000924 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     924:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     926:	91 8d       	ldd	r25, Z+25	; 0x19
     928:	82 8d       	ldd	r24, Z+26	; 0x1a
     92a:	98 17       	cp	r25, r24
     92c:	31 f0       	breq	.+12     	; 0x93a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     92e:	82 8d       	ldd	r24, Z+26	; 0x1a
     930:	e8 0f       	add	r30, r24
     932:	f1 1d       	adc	r31, r1
     934:	85 8d       	ldd	r24, Z+29	; 0x1d
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     93e:	08 95       	ret

00000940 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     940:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     942:	91 8d       	ldd	r25, Z+25	; 0x19
     944:	82 8d       	ldd	r24, Z+26	; 0x1a
     946:	98 17       	cp	r25, r24
     948:	61 f0       	breq	.+24     	; 0x962 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     94a:	82 8d       	ldd	r24, Z+26	; 0x1a
     94c:	df 01       	movw	r26, r30
     94e:	a8 0f       	add	r26, r24
     950:	b1 1d       	adc	r27, r1
     952:	5d 96       	adiw	r26, 0x1d	; 29
     954:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     956:	92 8d       	ldd	r25, Z+26	; 0x1a
     958:	9f 5f       	subi	r25, 0xFF	; 255
     95a:	9f 73       	andi	r25, 0x3F	; 63
     95c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     966:	08 95       	ret

00000968 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     968:	fc 01       	movw	r30, r24
     96a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     96c:	44 8d       	ldd	r20, Z+28	; 0x1c
     96e:	25 2f       	mov	r18, r21
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	84 2f       	mov	r24, r20
     974:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     976:	82 1b       	sub	r24, r18
     978:	93 0b       	sbc	r25, r19
     97a:	54 17       	cp	r21, r20
     97c:	10 f0       	brcs	.+4      	; 0x982 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     97e:	cf 96       	adiw	r24, 0x3f	; 63
     980:	08 95       	ret
  return tail - head - 1;
     982:	01 97       	sbiw	r24, 0x01	; 1
}
     984:	08 95       	ret

00000986 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     986:	8f e1       	ldi	r24, 0x1F	; 31
     988:	96 e0       	ldi	r25, 0x06	; 6
     98a:	89 2b       	or	r24, r25
     98c:	49 f0       	breq	.+18     	; 0x9a0 <_Z14serialEventRunv+0x1a>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	89 2b       	or	r24, r25
     994:	29 f0       	breq	.+10     	; 0x9a0 <_Z14serialEventRunv+0x1a>
     996:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z17Serial0_availablev>
     99a:	81 11       	cpse	r24, r1
     99c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     9a0:	08 95       	ret

000009a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     9a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     9a4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9a6:	df 01       	movw	r26, r30
     9a8:	a8 0f       	add	r26, r24
     9aa:	b1 1d       	adc	r27, r1
     9ac:	a3 5a       	subi	r26, 0xA3	; 163
     9ae:	bf 4f       	sbci	r27, 0xFF	; 255
     9b0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9b2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	8f 73       	andi	r24, 0x3F	; 63
     9ba:	99 27       	eor	r25, r25
     9bc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9be:	a6 89       	ldd	r26, Z+22	; 0x16
     9c0:	b7 89       	ldd	r27, Z+23	; 0x17
     9c2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9c4:	a0 89       	ldd	r26, Z+16	; 0x10
     9c6:	b1 89       	ldd	r27, Z+17	; 0x11
     9c8:	8c 91       	ld	r24, X
     9ca:	83 70       	andi	r24, 0x03	; 3
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     9d0:	93 8d       	ldd	r25, Z+27	; 0x1b
     9d2:	84 8d       	ldd	r24, Z+28	; 0x1c
     9d4:	98 13       	cpse	r25, r24
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9d8:	02 88       	ldd	r0, Z+18	; 0x12
     9da:	f3 89       	ldd	r31, Z+19	; 0x13
     9dc:	e0 2d       	mov	r30, r0
     9de:	80 81       	ld	r24, Z
     9e0:	8f 7d       	andi	r24, 0xDF	; 223
     9e2:	80 83       	st	Z, r24
     9e4:	08 95       	ret

000009e6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ec 01       	movw	r28, r24
  _written = true;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fc:	98 13       	cpse	r25, r24
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <_ZN14HardwareSerial5writeEh+0x24>
     a00:	e8 89       	ldd	r30, Y+16	; 0x10
     a02:	f9 89       	ldd	r31, Y+17	; 0x11
     a04:	80 81       	ld	r24, Z
     a06:	85 fd       	sbrc	r24, 5
     a08:	26 c0       	rjmp	.+76     	; 0xa56 <_ZN14HardwareSerial5writeEh+0x70>
     a0a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a0c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	0f 5f       	subi	r16, 0xFF	; 255
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	0f 73       	andi	r16, 0x3F	; 63
     a16:	11 27       	eor	r17, r17
     a18:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a1c:	e8 12       	cpse	r14, r24
     a1e:	0c c0       	rjmp	.+24     	; 0xa38 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	07 fc       	sbrc	r0, 7
     a24:	fa cf       	rjmp	.-12     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a26:	e8 89       	ldd	r30, Y+16	; 0x10
     a28:	f9 89       	ldd	r31, Y+17	; 0x11
     a2a:	80 81       	ld	r24, Z
     a2c:	85 ff       	sbrs	r24, 5
     a2e:	f5 cf       	rjmp	.-22     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a36:	f1 cf       	rjmp	.-30     	; 0xa1a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a3a:	fe 01       	movw	r30, r28
     a3c:	e8 0f       	add	r30, r24
     a3e:	f1 1d       	adc	r31, r1
     a40:	e3 5a       	subi	r30, 0xA3	; 163
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a46:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a48:	f8 94       	cli
    _tx_buffer_head = i;
     a4a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a4c:	ea 89       	ldd	r30, Y+18	; 0x12
     a4e:	fb 89       	ldd	r31, Y+19	; 0x13
     a50:	80 81       	ld	r24, Z
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	0a c0       	rjmp	.+20     	; 0xa6a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a56:	9f b7       	in	r25, 0x3f	; 63
     a58:	f8 94       	cli
      *_udr = c;
     a5a:	ee 89       	ldd	r30, Y+22	; 0x16
     a5c:	ff 89       	ldd	r31, Y+23	; 0x17
     a5e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a60:	e8 89       	ldd	r30, Y+16	; 0x10
     a62:	f9 89       	ldd	r31, Y+17	; 0x11
     a64:	80 81       	ld	r24, Z
     a66:	83 70       	andi	r24, 0x03	; 3
     a68:	80 64       	ori	r24, 0x40	; 64
     a6a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a6c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a86:	88 8d       	ldd	r24, Y+24	; 0x18
     a88:	88 23       	and	r24, r24
     a8a:	c9 f0       	breq	.+50     	; 0xabe <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a8c:	ea 89       	ldd	r30, Y+18	; 0x12
     a8e:	fb 89       	ldd	r31, Y+19	; 0x13
     a90:	80 81       	ld	r24, Z
     a92:	85 fd       	sbrc	r24, 5
     a94:	05 c0       	rjmp	.+10     	; 0xaa0 <_ZN14HardwareSerial5flushEv+0x20>
     a96:	a8 89       	ldd	r26, Y+16	; 0x10
     a98:	b9 89       	ldd	r27, Y+17	; 0x11
     a9a:	8c 91       	ld	r24, X
     a9c:	86 fd       	sbrc	r24, 6
     a9e:	0f c0       	rjmp	.+30     	; 0xabe <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	07 fc       	sbrc	r0, 7
     aa4:	f5 cf       	rjmp	.-22     	; 0xa90 <_ZN14HardwareSerial5flushEv+0x10>
     aa6:	80 81       	ld	r24, Z
     aa8:	85 ff       	sbrs	r24, 5
     aaa:	f2 cf       	rjmp	.-28     	; 0xa90 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     aac:	a8 89       	ldd	r26, Y+16	; 0x10
     aae:	b9 89       	ldd	r27, Y+17	; 0x11
     ab0:	8c 91       	ld	r24, X
     ab2:	85 ff       	sbrs	r24, 5
     ab4:	ed cf       	rjmp	.-38     	; 0xa90 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ab6:	ce 01       	movw	r24, r28
     ab8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     abc:	e7 cf       	rjmp	.-50     	; 0xa8c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	ec 01       	movw	r28, r24
     ad4:	6a 01       	movw	r12, r20
     ad6:	7b 01       	movw	r14, r22
     ad8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ada:	e8 89       	ldd	r30, Y+16	; 0x10
     adc:	f9 89       	ldd	r31, Y+17	; 0x11
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ae2:	41 15       	cp	r20, r1
     ae4:	51 4e       	sbci	r21, 0xE1	; 225
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	b1 f0       	breq	.+44     	; 0xb18 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	79 e0       	ldi	r23, 0x09	; 9
     af0:	8d e3       	ldi	r24, 0x3D	; 61
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a7 01       	movw	r20, r14
     af6:	96 01       	movw	r18, r12
     af8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__udivmodsi4>
     afc:	da 01       	movw	r26, r20
     afe:	c9 01       	movw	r24, r18
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	a1 09       	sbc	r26, r1
     b04:	b1 09       	sbc	r27, r1
     b06:	b6 95       	lsr	r27
     b08:	a7 95       	ror	r26
     b0a:	97 95       	ror	r25
     b0c:	87 95       	ror	r24
     b0e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b10:	21 15       	cp	r18, r1
     b12:	80 e1       	ldi	r24, 0x10	; 16
     b14:	38 07       	cpc	r19, r24
     b16:	a8 f0       	brcs	.+42     	; 0xb42 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b18:	e8 89       	ldd	r30, Y+16	; 0x10
     b1a:	f9 89       	ldd	r31, Y+17	; 0x11
     b1c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b1e:	60 e8       	ldi	r22, 0x80	; 128
     b20:	74 e8       	ldi	r23, 0x84	; 132
     b22:	8e e1       	ldi	r24, 0x1E	; 30
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	a7 01       	movw	r20, r14
     b28:	96 01       	movw	r18, r12
     b2a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__udivmodsi4>
     b2e:	da 01       	movw	r26, r20
     b30:	c9 01       	movw	r24, r18
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	a1 09       	sbc	r26, r1
     b36:	b1 09       	sbc	r27, r1
     b38:	b6 95       	lsr	r27
     b3a:	a7 95       	ror	r26
     b3c:	97 95       	ror	r25
     b3e:	87 95       	ror	r24
     b40:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b42:	ec 85       	ldd	r30, Y+12	; 0x0c
     b44:	fd 85       	ldd	r31, Y+13	; 0x0d
     b46:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b48:	ee 85       	ldd	r30, Y+14	; 0x0e
     b4a:	ff 85       	ldd	r31, Y+15	; 0x0f
     b4c:	20 83       	st	Z, r18

  _written = false;
     b4e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b50:	ec 89       	ldd	r30, Y+20	; 0x14
     b52:	fd 89       	ldd	r31, Y+21	; 0x15
     b54:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b56:	ea 89       	ldd	r30, Y+18	; 0x12
     b58:	fb 89       	ldd	r31, Y+19	; 0x13
     b5a:	80 81       	ld	r24, Z
     b5c:	80 61       	ori	r24, 0x10	; 16
     b5e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b60:	ea 89       	ldd	r30, Y+18	; 0x12
     b62:	fb 89       	ldd	r31, Y+19	; 0x13
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b6a:	ea 89       	ldd	r30, Y+18	; 0x12
     b6c:	fb 89       	ldd	r31, Y+19	; 0x13
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b74:	ea 89       	ldd	r30, Y+18	; 0x12
     b76:	fb 89       	ldd	r31, Y+19	; 0x13
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7d       	andi	r24, 0xDF	; 223
     b7c:	80 83       	st	Z, r24
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	2f 93       	push	r18
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ba2:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <Serial+0x10>
     ba6:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <Serial+0x11>
     baa:	80 81       	ld	r24, Z
     bac:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <Serial+0x16>
     bb0:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <Serial+0x17>
     bb4:	82 fd       	sbrc	r24, 2
     bb6:	12 c0       	rjmp	.+36     	; 0xbdc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     bb8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     bba:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Serial+0x19>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     bc2:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <Serial+0x1a>
     bc6:	82 17       	cp	r24, r18
     bc8:	51 f0       	breq	.+20     	; 0xbde <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     bca:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <Serial+0x19>
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e7 57       	subi	r30, 0x77	; 119
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bd6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Serial+0x19>
     bda:	01 c0       	rjmp	.+2      	; 0xbde <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bdc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	2f 91       	pop	r18
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c14:	89 e8       	ldi	r24, 0x89	; 137
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c3e:	89 e8       	ldi	r24, 0x89	; 137
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN14HardwareSerial9availableEv>
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	89 2b       	or	r24, r25
     c4a:	09 f4       	brne	.+2      	; 0xc4e <_Z17Serial0_availablev+0x10>
     c4c:	20 e0       	ldi	r18, 0x00	; 0
}
     c4e:	82 2f       	mov	r24, r18
     c50:	08 95       	ret

00000c52 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c52:	e9 e8       	ldi	r30, 0x89	; 137
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	13 82       	std	Z+3, r1	; 0x03
     c58:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c5a:	88 ee       	ldi	r24, 0xE8	; 232
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	84 83       	std	Z+4, r24	; 0x04
     c64:	95 83       	std	Z+5, r25	; 0x05
     c66:	a6 83       	std	Z+6, r26	; 0x06
     c68:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c6a:	8d e1       	ldi	r24, 0x1D	; 29
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
     c72:	85 ec       	ldi	r24, 0xC5	; 197
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	95 87       	std	Z+13, r25	; 0x0d
     c78:	84 87       	std	Z+12, r24	; 0x0c
     c7a:	84 ec       	ldi	r24, 0xC4	; 196
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	97 87       	std	Z+15, r25	; 0x0f
     c80:	86 87       	std	Z+14, r24	; 0x0e
     c82:	80 ec       	ldi	r24, 0xC0	; 192
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	91 8b       	std	Z+17, r25	; 0x11
     c88:	80 8b       	std	Z+16, r24	; 0x10
     c8a:	81 ec       	ldi	r24, 0xC1	; 193
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	93 8b       	std	Z+19, r25	; 0x13
     c90:	82 8b       	std	Z+18, r24	; 0x12
     c92:	82 ec       	ldi	r24, 0xC2	; 194
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	95 8b       	std	Z+21, r25	; 0x15
     c98:	84 8b       	std	Z+20, r24	; 0x14
     c9a:	86 ec       	ldi	r24, 0xC6	; 198
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	97 8b       	std	Z+23, r25	; 0x17
     ca0:	86 8b       	std	Z+22, r24	; 0x16
     ca2:	11 8e       	std	Z+25, r1	; 0x19
     ca4:	12 8e       	std	Z+26, r1	; 0x1a
     ca6:	13 8e       	std	Z+27, r1	; 0x1b
     ca8:	14 8e       	std	Z+28, r1	; 0x1c
     caa:	08 95       	ret

00000cac <initVariant>:
     cac:	08 95       	ret

00000cae <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     cae:	0e 94 54 08 	call	0x10a8	; 0x10a8 <init>

	initVariant();
     cb2:	0e 94 56 06 	call	0xcac	; 0xcac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     cb6:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     cba:	c3 ec       	ldi	r28, 0xC3	; 195
     cbc:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     cbe:	0e 94 b4 00 	call	0x168	; 0x168 <loop>
		if (serialEventRun) serialEventRun();
     cc2:	20 97       	sbiw	r28, 0x00	; 0
     cc4:	e1 f3       	breq	.-8      	; 0xcbe <main+0x10>
     cc6:	0e 94 c3 04 	call	0x986	; 0x986 <_Z14serialEventRunv>
     cca:	f9 cf       	rjmp	.-14     	; 0xcbe <main+0x10>

00000ccc <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	6c 01       	movw	r12, r24
     cde:	7a 01       	movw	r14, r20
     ce0:	8b 01       	movw	r16, r22
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	ce 15       	cp	r28, r14
     ce8:	df 05       	cpc	r29, r15
     cea:	81 f0       	breq	.+32     	; 0xd0c <_ZN5Print5writeEPKhj+0x40>
     cec:	d8 01       	movw	r26, r16
     cee:	6d 91       	ld	r22, X+
     cf0:	8d 01       	movw	r16, r26
     cf2:	d6 01       	movw	r26, r12
     cf4:	ed 91       	ld	r30, X+
     cf6:	fc 91       	ld	r31, X
     cf8:	01 90       	ld	r0, Z+
     cfa:	f0 81       	ld	r31, Z
     cfc:	e0 2d       	mov	r30, r0
     cfe:	c6 01       	movw	r24, r12
     d00:	09 95       	icall
     d02:	89 2b       	or	r24, r25
     d04:	11 f0       	breq	.+4      	; 0xd0a <_ZN5Print5writeEPKhj+0x3e>
     d06:	21 96       	adiw	r28, 0x01	; 1
     d08:	ee cf       	rjmp	.-36     	; 0xce6 <_ZN5Print5writeEPKhj+0x1a>
     d0a:	7e 01       	movw	r14, r28
     d0c:	c7 01       	movw	r24, r14
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	08 95       	ret

00000d20 <_ZN5Print5writeEPKc>:
     d20:	61 15       	cp	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	79 f0       	breq	.+30     	; 0xd44 <_ZN5Print5writeEPKc+0x24>
     d26:	fb 01       	movw	r30, r22
     d28:	01 90       	ld	r0, Z+
     d2a:	00 20       	and	r0, r0
     d2c:	e9 f7       	brne	.-6      	; 0xd28 <_ZN5Print5writeEPKc+0x8>
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	af 01       	movw	r20, r30
     d32:	46 1b       	sub	r20, r22
     d34:	57 0b       	sbc	r21, r23
     d36:	dc 01       	movw	r26, r24
     d38:	ed 91       	ld	r30, X+
     d3a:	fc 91       	ld	r31, X
     d3c:	02 80       	ldd	r0, Z+2	; 0x02
     d3e:	f3 81       	ldd	r31, Z+3	; 0x03
     d40:	e0 2d       	mov	r30, r0
     d42:	09 94       	ijmp
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	08 95       	ret

00000d4a <_ZN5Print5printEc>:
     d4a:	dc 01       	movw	r26, r24
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	01 90       	ld	r0, Z+
     d52:	f0 81       	ld	r31, Z
     d54:	e0 2d       	mov	r30, r0
     d56:	09 94       	ijmp

00000d58 <_ZN5Print11printNumberEmh>:
     d58:	8f 92       	push	r8
     d5a:	9f 92       	push	r9
     d5c:	af 92       	push	r10
     d5e:	bf 92       	push	r11
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	a1 97       	sbiw	r28, 0x21	; 33
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	7c 01       	movw	r14, r24
     d7e:	fa 01       	movw	r30, r20
     d80:	cb 01       	movw	r24, r22
     d82:	19 a2       	std	Y+33, r1	; 0x21
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <_ZN5Print11printNumberEmh+0x32>
     d88:	2a e0       	ldi	r18, 0x0A	; 10
     d8a:	8e 01       	movw	r16, r28
     d8c:	0f 5d       	subi	r16, 0xDF	; 223
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	82 2e       	mov	r8, r18
     d92:	91 2c       	mov	r9, r1
     d94:	a1 2c       	mov	r10, r1
     d96:	b1 2c       	mov	r11, r1
     d98:	bf 01       	movw	r22, r30
     d9a:	a5 01       	movw	r20, r10
     d9c:	94 01       	movw	r18, r8
     d9e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__udivmodsi4>
     da2:	f9 01       	movw	r30, r18
     da4:	ca 01       	movw	r24, r20
     da6:	01 50       	subi	r16, 0x01	; 1
     da8:	11 09       	sbc	r17, r1
     daa:	6a 30       	cpi	r22, 0x0A	; 10
     dac:	10 f4       	brcc	.+4      	; 0xdb2 <_ZN5Print11printNumberEmh+0x5a>
     dae:	60 5d       	subi	r22, 0xD0	; 208
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <_ZN5Print11printNumberEmh+0x5c>
     db2:	69 5c       	subi	r22, 0xC9	; 201
     db4:	d8 01       	movw	r26, r16
     db6:	6c 93       	st	X, r22
     db8:	23 2b       	or	r18, r19
     dba:	24 2b       	or	r18, r20
     dbc:	25 2b       	or	r18, r21
     dbe:	61 f7       	brne	.-40     	; 0xd98 <_ZN5Print11printNumberEmh+0x40>
     dc0:	b8 01       	movw	r22, r16
     dc2:	c7 01       	movw	r24, r14
     dc4:	0e 94 90 06 	call	0xd20	; 0xd20 <_ZN5Print5writeEPKc>
     dc8:	a1 96       	adiw	r28, 0x21	; 33
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	08 95       	ret

00000dea <_ZN5Print5printEmi>:
     dea:	21 15       	cp	r18, r1
     dec:	31 05       	cpc	r19, r1
     dee:	41 f4       	brne	.+16     	; 0xe00 <_ZN5Print5printEmi+0x16>
     df0:	dc 01       	movw	r26, r24
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	01 90       	ld	r0, Z+
     df8:	f0 81       	ld	r31, Z
     dfa:	e0 2d       	mov	r30, r0
     dfc:	64 2f       	mov	r22, r20
     dfe:	09 94       	ijmp
     e00:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <_ZN5Print11printNumberEmh>

00000e04 <_ZN5Print5printEji>:
     e04:	9a 01       	movw	r18, r20
     e06:	ab 01       	movw	r20, r22
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <_ZN5Print5printEmi>

00000e10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     e10:	7f 92       	push	r7
     e12:	8f 92       	push	r8
     e14:	9f 92       	push	r9
     e16:	af 92       	push	r10
     e18:	bf 92       	push	r11
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	8c 01       	movw	r16, r24
     e2c:	6a 01       	movw	r12, r20
     e2e:	7b 01       	movw	r14, r22
     e30:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     e32:	9a 01       	movw	r18, r20
     e34:	ab 01       	movw	r20, r22
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__unordsf2>
     e3e:	88 23       	and	r24, r24
     e40:	19 f0       	breq	.+6      	; 0xe48 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     e42:	6e e2       	ldi	r22, 0x2E	; 46
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	27 c0       	rjmp	.+78     	; 0xe96 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     e48:	46 01       	movw	r8, r12
     e4a:	57 01       	movw	r10, r14
     e4c:	e8 94       	clt
     e4e:	b7 f8       	bld	r11, 7
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	5f e7       	ldi	r21, 0x7F	; 127
     e58:	c5 01       	movw	r24, r10
     e5a:	b4 01       	movw	r22, r8
     e5c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__unordsf2>
     e60:	81 11       	cpse	r24, r1
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <_ZN5Print10printFloatEdh+0x6e>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f e7       	ldi	r20, 0x7F	; 127
     e6a:	5f e7       	ldi	r21, 0x7F	; 127
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
     e74:	18 16       	cp	r1, r24
     e76:	1c f4       	brge	.+6      	; 0xe7e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     e78:	62 e3       	ldi	r22, 0x32	; 50
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	5f e4       	ldi	r21, 0x4F	; 79
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__gesf2>
     e8e:	18 16       	cp	r1, r24
     e90:	94 f4       	brge	.+36     	; 0xeb6 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     e92:	66 e3       	ldi	r22, 0x36	; 54
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     eb2:	0c 94 90 06 	jmp	0xd20	; 0xd20 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	5f ec       	ldi	r21, 0xCF	; 207
     ebe:	c7 01       	movw	r24, r14
     ec0:	b6 01       	movw	r22, r12
     ec2:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
     ec6:	87 fd       	sbrc	r24, 7
     ec8:	e4 cf       	rjmp	.-56     	; 0xe92 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a9 01       	movw	r20, r18
     ed0:	c7 01       	movw	r24, r14
     ed2:	b6 01       	movw	r22, r12
     ed4:	0e 94 2e 03 	call	0x65c	; 0x65c <__cmpsf2>
     ed8:	87 ff       	sbrs	r24, 7
     eda:	0a c0       	rjmp	.+20     	; 0xef0 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     edc:	6d e2       	ldi	r22, 0x2D	; 45
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN5Print5printEc>
     ee4:	ec 01       	movw	r28, r24
     number = -number;
     ee6:	f7 fa       	bst	r15, 7
     ee8:	f0 94       	com	r15
     eea:	f7 f8       	bld	r15, 7
     eec:	f0 94       	com	r15
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     ef0:	c0 e0       	ldi	r28, 0x00	; 0
     ef2:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     ef4:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     efe:	7b 14       	cp	r7, r11
     f00:	41 f0       	breq	.+16     	; 0xf12 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     f0e:	b3 94       	inc	r11
     f10:	f6 cf       	rjmp	.-20     	; 0xefe <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     f12:	a7 01       	movw	r20, r14
     f14:	96 01       	movw	r18, r12
     f16:	0e 94 ef 0b 	call	0x17de	; 0x17de <__addsf3>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     f1e:	0e 94 33 03 	call	0x666	; 0x666 <__fixunssfsi>
     f22:	4b 01       	movw	r8, r22
     f24:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     f26:	2a e0       	ldi	r18, 0x0A	; 10
     f28:	ab 01       	movw	r20, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     f32:	c8 0f       	add	r28, r24
     f34:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     f36:	77 20       	and	r7, r7
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     f3a:	c5 01       	movw	r24, r10
     f3c:	b4 01       	movw	r22, r8
     f3e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__floatunsisf>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	c7 01       	movw	r24, r14
     f48:	b6 01       	movw	r22, r12
     f4a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     f4e:	6b 01       	movw	r12, r22
     f50:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     f52:	6e e2       	ldi	r22, 0x2E	; 46
     f54:	c8 01       	movw	r24, r16
     f56:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN5Print5printEc>
     f5a:	c8 0f       	add	r28, r24
     f5c:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e2       	ldi	r20, 0x20	; 32
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__mulsf3>
     f6e:	4b 01       	movw	r8, r22
     f70:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     f72:	0e 94 33 03 	call	0x666	; 0x666 <__fixunssfsi>
     f76:	6b 01       	movw	r12, r22
     f78:	7c 01       	movw	r14, r24
    n += print(toPrint);
     f7a:	4a e0       	ldi	r20, 0x0A	; 10
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	c8 01       	movw	r24, r16
     f80:	0e 94 02 07 	call	0xe04	; 0xe04 <_ZN5Print5printEji>
     f84:	c8 0f       	add	r28, r24
     f86:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     f88:	b6 01       	movw	r22, r12
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__floatunsisf>
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
     f96:	c5 01       	movw	r24, r10
     f98:	b4 01       	movw	r22, r8
     f9a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__subsf3>
     f9e:	6b 01       	movw	r12, r22
     fa0:	7c 01       	movw	r14, r24
     fa2:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     fa4:	71 10       	cpse	r7, r1
     fa6:	db cf       	rjmp	.-74     	; 0xf5e <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     fa8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	bf 90       	pop	r11
     fbc:	af 90       	pop	r10
     fbe:	9f 90       	pop	r9
     fc0:	8f 90       	pop	r8
     fc2:	7f 90       	pop	r7
     fc4:	08 95       	ret

00000fc6 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     fc6:	0c 94 08 07 	jmp	0xe10	; 0xe10 <_ZN5Print10printFloatEdh>

00000fca <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <timer0_millis>
     fe4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <timer0_millis+0x1>
     fe8:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <timer0_millis+0x2>
     fec:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <timer0_millis+0x3>
     ff0:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <timer0_fract>
     ff4:	23 e0       	ldi	r18, 0x03	; 3
     ff6:	23 0f       	add	r18, r19
     ff8:	2d 37       	cpi	r18, 0x7D	; 125
     ffa:	20 f4       	brcc	.+8      	; 0x1004 <__vector_16+0x3a>
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	a1 1d       	adc	r26, r1
    1000:	b1 1d       	adc	r27, r1
    1002:	05 c0       	rjmp	.+10     	; 0x100e <__vector_16+0x44>
    1004:	26 e8       	ldi	r18, 0x86	; 134
    1006:	23 0f       	add	r18, r19
    1008:	02 96       	adiw	r24, 0x02	; 2
    100a:	a1 1d       	adc	r26, r1
    100c:	b1 1d       	adc	r27, r1
    100e:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <timer0_fract>
    1012:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <timer0_millis>
    1016:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <timer0_millis+0x1>
    101a:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <timer0_millis+0x2>
    101e:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <timer0_millis+0x3>
    1022:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
    1026:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
    102a:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
    102e:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	a1 1d       	adc	r26, r1
    1036:	b1 1d       	adc	r27, r1
    1038:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <timer0_overflow_count>
    103c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <timer0_overflow_count+0x1>
    1040:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <timer0_overflow_count+0x2>
    1044:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <timer0_overflow_count+0x3>
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <micros>:
    105e:	3f b7       	in	r19, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <timer0_overflow_count>
    1066:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <timer0_overflow_count+0x1>
    106a:	a0 91 2d 02 	lds	r26, 0x022D	; 0x80022d <timer0_overflow_count+0x2>
    106e:	b0 91 2e 02 	lds	r27, 0x022E	; 0x80022e <timer0_overflow_count+0x3>
    1072:	26 b5       	in	r18, 0x26	; 38
    1074:	a8 9b       	sbis	0x15, 0	; 21
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <micros+0x24>
    1078:	2f 3f       	cpi	r18, 0xFF	; 255
    107a:	19 f0       	breq	.+6      	; 0x1082 <micros+0x24>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	a1 1d       	adc	r26, r1
    1080:	b1 1d       	adc	r27, r1
    1082:	3f bf       	out	0x3f, r19	; 63
    1084:	ba 2f       	mov	r27, r26
    1086:	a9 2f       	mov	r26, r25
    1088:	98 2f       	mov	r25, r24
    108a:	88 27       	eor	r24, r24
    108c:	82 0f       	add	r24, r18
    108e:	91 1d       	adc	r25, r1
    1090:	a1 1d       	adc	r26, r1
    1092:	b1 1d       	adc	r27, r1
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	42 e0       	ldi	r20, 0x02	; 2
    109a:	66 0f       	add	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	4a 95       	dec	r20
    10a4:	d1 f7       	brne	.-12     	; 0x109a <micros+0x3c>
    10a6:	08 95       	ret

000010a8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    10a8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    10aa:	84 b5       	in	r24, 0x24	; 36
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    10b0:	84 b5       	in	r24, 0x24	; 36
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    10b6:	85 b5       	in	r24, 0x25	; 37
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    10bc:	85 b5       	in	r24, 0x25	; 37
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    10c2:	ee e6       	ldi	r30, 0x6E	; 110
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	81 60       	ori	r24, 0x01	; 1
    10ca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    10cc:	e1 e8       	ldi	r30, 0x81	; 129
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    10d2:	80 81       	ld	r24, Z
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    10d8:	80 81       	ld	r24, Z
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10de:	e0 e8       	ldi	r30, 0x80	; 128
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	81 60       	ori	r24, 0x01	; 1
    10e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10e8:	e1 eb       	ldi	r30, 0xB1	; 177
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	84 60       	ori	r24, 0x04	; 4
    10f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10f2:	e0 eb       	ldi	r30, 0xB0	; 176
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	81 60       	ori	r24, 0x01	; 1
    10fa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10fc:	ea e7       	ldi	r30, 0x7A	; 122
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1106:	80 81       	ld	r24, Z
    1108:	82 60       	ori	r24, 0x02	; 2
    110a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    110c:	80 81       	ld	r24, Z
    110e:	81 60       	ori	r24, 0x01	; 1
    1110:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1118:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    111c:	08 95       	ret

0000111e <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    111e:	8e 30       	cpi	r24, 0x0E	; 14
    1120:	08 f0       	brcs	.+2      	; 0x1124 <analogRead+0x6>
    1122:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1124:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    1128:	90 e4       	ldi	r25, 0x40	; 64
    112a:	29 9f       	mul	r18, r25
    112c:	90 01       	movw	r18, r0
    112e:	11 24       	eor	r1, r1
    1130:	87 70       	andi	r24, 0x07	; 7
    1132:	82 2b       	or	r24, r18
    1134:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1138:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    113c:	80 64       	ori	r24, 0x40	; 64
    113e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1142:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1146:	86 fd       	sbrc	r24, 6
    1148:	fc cf       	rjmp	.-8      	; 0x1142 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    114a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    114e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1152:	90 e0       	ldi	r25, 0x00	; 0
}
    1154:	92 2b       	or	r25, r18
    1156:	08 95       	ret

00001158 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	81 f0       	breq	.+32     	; 0x117c <turnOffPWM+0x24>
    115c:	28 f4       	brcc	.+10     	; 0x1168 <turnOffPWM+0x10>
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	99 f0       	breq	.+38     	; 0x1188 <turnOffPWM+0x30>
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	a1 f0       	breq	.+40     	; 0x118e <turnOffPWM+0x36>
    1166:	08 95       	ret
    1168:	87 30       	cpi	r24, 0x07	; 7
    116a:	a9 f0       	breq	.+42     	; 0x1196 <turnOffPWM+0x3e>
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	b9 f0       	breq	.+46     	; 0x119e <turnOffPWM+0x46>
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	d1 f4       	brne	.+52     	; 0x11a8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1174:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1178:	8f 7d       	andi	r24, 0xDF	; 223
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    117c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1180:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1182:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1186:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1188:	84 b5       	in	r24, 0x24	; 36
    118a:	8f 77       	andi	r24, 0x7F	; 127
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    118e:	84 b5       	in	r24, 0x24	; 36
    1190:	8f 7d       	andi	r24, 0xDF	; 223
    1192:	84 bd       	out	0x24, r24	; 36
    1194:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1196:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    119a:	8f 77       	andi	r24, 0x7F	; 127
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    119e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11a2:	8f 7d       	andi	r24, 0xDF	; 223
    11a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    11a8:	08 95       	ret

000011aa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	e4 58       	subi	r30, 0x84	; 132
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    11b8:	fc 01       	movw	r30, r24
    11ba:	e0 57       	subi	r30, 0x70	; 112
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    11c0:	88 23       	and	r24, r24
    11c2:	61 f1       	breq	.+88     	; 0x121c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	fc 01       	movw	r30, r24
    11cc:	e8 54       	subi	r30, 0x48	; 72
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	c5 91       	lpm	r28, Z+
    11d2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    11d4:	fc 01       	movw	r30, r24
    11d6:	e2 55       	subi	r30, 0x52	; 82
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	a5 91       	lpm	r26, Z+
    11dc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    11de:	61 11       	cpse	r22, r1
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    11e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    11e4:	f8 94       	cli
		*reg &= ~bit;
    11e6:	88 81       	ld	r24, Y
    11e8:	20 95       	com	r18
    11ea:	82 23       	and	r24, r18
    11ec:	88 83       	st	Y, r24
		*out &= ~bit;
    11ee:	ec 91       	ld	r30, X
    11f0:	2e 23       	and	r18, r30
    11f2:	0b c0       	rjmp	.+22     	; 0x120a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    11f4:	62 30       	cpi	r22, 0x02	; 2
    11f6:	61 f4       	brne	.+24     	; 0x1210 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    11f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    11fa:	f8 94       	cli
		*reg &= ~bit;
    11fc:	88 81       	ld	r24, Y
    11fe:	32 2f       	mov	r19, r18
    1200:	30 95       	com	r19
    1202:	83 23       	and	r24, r19
    1204:	88 83       	st	Y, r24
		*out |= bit;
    1206:	ec 91       	ld	r30, X
    1208:	2e 2b       	or	r18, r30
    120a:	2c 93       	st	X, r18
		SREG = oldSREG;
    120c:	9f bf       	out	0x3f, r25	; 63
    120e:	06 c0       	rjmp	.+12     	; 0x121c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1210:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1212:	f8 94       	cli
		*reg |= bit;
    1214:	e8 81       	ld	r30, Y
    1216:	2e 2b       	or	r18, r30
    1218:	28 83       	st	Y, r18
		SREG = oldSREG;
    121a:	8f bf       	out	0x3f, r24	; 63
	}
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	f9 01       	movw	r30, r18
    122e:	e8 59       	subi	r30, 0x98	; 152
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1234:	f9 01       	movw	r30, r18
    1236:	e4 58       	subi	r30, 0x84	; 132
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    123c:	f9 01       	movw	r30, r18
    123e:	e0 57       	subi	r30, 0x70	; 112
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1244:	cc 23       	and	r28, r28
    1246:	c1 f0       	breq	.+48     	; 0x1278 <digitalWrite+0x56>
    1248:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    124a:	81 11       	cpse	r24, r1
    124c:	0e 94 ac 08 	call	0x1158	; 0x1158 <turnOffPWM>

	out = portOutputRegister(port);
    1250:	ec 2f       	mov	r30, r28
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e2 55       	subi	r30, 0x52	; 82
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	a5 91       	lpm	r26, Z+
    125e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1260:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1262:	f8 94       	cli

	if (val == LOW) {
    1264:	11 11       	cpse	r17, r1
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <digitalWrite+0x4e>
		*out &= ~bit;
    1268:	8c 91       	ld	r24, X
    126a:	d0 95       	com	r29
    126c:	d8 23       	and	r29, r24
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1270:	ec 91       	ld	r30, X
    1272:	de 2b       	or	r29, r30
    1274:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1276:	9f bf       	out	0x3f, r25	; 63
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1280:	4f 92       	push	r4
    1282:	5f 92       	push	r5
    1284:	6f 92       	push	r6
    1286:	7f 92       	push	r7
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	29 01       	movw	r4, r18
    12a2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	24 19       	sub	r18, r4
    12aa:	35 09       	sbc	r19, r5
    12ac:	46 09       	sbc	r20, r6
    12ae:	57 09       	sbc	r21, r7
    12b0:	89 89       	ldd	r24, Y+17	; 0x11
    12b2:	9a 89       	ldd	r25, Y+18	; 0x12
    12b4:	ab 89       	ldd	r26, Y+19	; 0x13
    12b6:	bc 89       	ldd	r27, Y+20	; 0x14
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	6a 19       	sub	r22, r10
    12be:	7b 09       	sbc	r23, r11
    12c0:	8c 09       	sbc	r24, r12
    12c2:	9d 09       	sbc	r25, r13
    12c4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__mulsi3>
    12c8:	a8 01       	movw	r20, r16
    12ca:	97 01       	movw	r18, r14
    12cc:	24 19       	sub	r18, r4
    12ce:	35 09       	sbc	r19, r5
    12d0:	46 09       	sbc	r20, r6
    12d2:	57 09       	sbc	r21, r7
    12d4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divmodsi4>
    12d8:	ca 01       	movw	r24, r20
    12da:	b9 01       	movw	r22, r18
    12dc:	6a 0d       	add	r22, r10
    12de:	7b 1d       	adc	r23, r11
    12e0:	8c 1d       	adc	r24, r12
    12e2:	9d 1d       	adc	r25, r13
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	bf 90       	pop	r11
    12f6:	af 90       	pop	r10
    12f8:	7f 90       	pop	r7
    12fa:	6f 90       	pop	r6
    12fc:	5f 90       	pop	r5
    12fe:	4f 90       	pop	r4
    1300:	08 95       	ret

00001302 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1302:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    1306:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    130a:	28 17       	cp	r18, r24
    130c:	39 07       	cpc	r19, r25
    130e:	b9 f4       	brne	.+46     	; 0x133e <_ZN14SoftwareSerial4readEv+0x3c>
    1310:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    1314:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1318:	98 17       	cp	r25, r24
    131a:	89 f0       	breq	.+34     	; 0x133e <_ZN14SoftwareSerial4readEv+0x3c>
    131c:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	ef 5c       	subi	r30, 0xCF	; 207
    1324:	fd 4f       	sbci	r31, 0xFD	; 253
    1326:	80 81       	ld	r24, Z
    1328:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	2f 5f       	subi	r18, 0xFF	; 255
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	2f 73       	andi	r18, 0x3F	; 63
    1334:	33 27       	eor	r19, r19
    1336:	20 93 2f 02 	sts	0x022F, r18	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	08 95       	ret
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	08 95       	ret

00001344 <_ZN14SoftwareSerial5writeEh>:
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	dc 01       	movw	r26, r24
    134c:	5c 96       	adiw	r26, 0x1c	; 28
    134e:	8d 91       	ld	r24, X+
    1350:	9c 91       	ld	r25, X
    1352:	5d 97       	sbiw	r26, 0x1d	; 29
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	39 f4       	brne	.+14     	; 0x1366 <_ZN14SoftwareSerial5writeEh+0x22>
    1358:	21 e0       	ldi	r18, 0x01	; 1
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	13 96       	adiw	r26, 0x03	; 3
    135e:	3c 93       	st	X, r19
    1360:	2e 93       	st	-X, r18
    1362:	12 97       	sbiw	r26, 0x02	; 2
    1364:	3b c0       	rjmp	.+118    	; 0x13dc <_ZN14SoftwareSerial5writeEh+0x98>
    1366:	51 96       	adiw	r26, 0x11	; 17
    1368:	ed 91       	ld	r30, X+
    136a:	fc 91       	ld	r31, X
    136c:	52 97       	sbiw	r26, 0x12	; 18
    136e:	50 96       	adiw	r26, 0x10	; 16
    1370:	2c 91       	ld	r18, X
    1372:	50 97       	sbiw	r26, 0x10	; 16
    1374:	32 2f       	mov	r19, r18
    1376:	30 95       	com	r19
    1378:	1f b7       	in	r17, 0x3f	; 63
    137a:	5e 96       	adiw	r26, 0x1e	; 30
    137c:	4c 91       	ld	r20, X
    137e:	5e 97       	sbiw	r26, 0x1e	; 30
    1380:	74 2f       	mov	r23, r20
    1382:	72 70       	andi	r23, 0x02	; 2
    1384:	41 fd       	sbrc	r20, 1
    1386:	60 95       	com	r22
    1388:	f8 94       	cli
    138a:	40 81       	ld	r20, Z
    138c:	77 23       	and	r23, r23
    138e:	11 f0       	breq	.+4      	; 0x1394 <_ZN14SoftwareSerial5writeEh+0x50>
    1390:	42 2b       	or	r20, r18
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <_ZN14SoftwareSerial5writeEh+0x52>
    1394:	43 23       	and	r20, r19
    1396:	40 83       	st	Z, r20
    1398:	ec 01       	movw	r28, r24
    139a:	21 97       	sbiw	r28, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <_ZN14SoftwareSerial5writeEh+0x56>
    139e:	48 e0       	ldi	r20, 0x08	; 8
    13a0:	50 81       	ld	r21, Z
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <_ZN14SoftwareSerial5writeEh+0x66>
    13a6:	52 2b       	or	r21, r18
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <_ZN14SoftwareSerial5writeEh+0x68>
    13aa:	53 23       	and	r21, r19
    13ac:	50 83       	st	Z, r21
    13ae:	ec 01       	movw	r28, r24
    13b0:	21 97       	sbiw	r28, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <_ZN14SoftwareSerial5writeEh+0x6c>
    13b4:	66 95       	lsr	r22
    13b6:	41 50       	subi	r20, 0x01	; 1
    13b8:	99 f7       	brne	.-26     	; 0x13a0 <_ZN14SoftwareSerial5writeEh+0x5c>
    13ba:	80 81       	ld	r24, Z
    13bc:	77 23       	and	r23, r23
    13be:	19 f0       	breq	.+6      	; 0x13c6 <_ZN14SoftwareSerial5writeEh+0x82>
    13c0:	83 23       	and	r24, r19
    13c2:	80 83       	st	Z, r24
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <_ZN14SoftwareSerial5writeEh+0x86>
    13c6:	28 2b       	or	r18, r24
    13c8:	20 83       	st	Z, r18
    13ca:	1f bf       	out	0x3f, r17	; 63
    13cc:	5c 96       	adiw	r26, 0x1c	; 28
    13ce:	8d 91       	ld	r24, X+
    13d0:	9c 91       	ld	r25, X
    13d2:	5d 97       	sbiw	r26, 0x1d	; 29
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <_ZN14SoftwareSerial5writeEh+0x90>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	08 95       	ret

000013e4 <_ZN14SoftwareSerial5flushEv>:
    13e4:	08 95       	ret

000013e6 <_ZN14SoftwareSerial4peekEv>:
    13e6:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    13ea:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	71 f4       	brne	.+28     	; 0x1410 <_ZN14SoftwareSerial4peekEv+0x2a>
    13f4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    13f8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    13fc:	98 17       	cp	r25, r24
    13fe:	41 f0       	breq	.+16     	; 0x1410 <_ZN14SoftwareSerial4peekEv+0x2a>
    1400:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ef 5c       	subi	r30, 0xCF	; 207
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	80 81       	ld	r24, Z
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	08 95       	ret
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	08 95       	ret

00001416 <_ZN14SoftwareSerial9availableEv>:
    1416:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    141a:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	71 f4       	brne	.+28     	; 0x1440 <_ZN14SoftwareSerial9availableEv+0x2a>
    1424:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1428:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	80 5c       	subi	r24, 0xC0	; 192
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	82 1b       	sub	r24, r18
    1434:	91 09       	sbc	r25, r1
    1436:	60 e4       	ldi	r22, 0x40	; 64
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divmodhi4>
    143e:	08 95       	ret
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	08 95       	ret

00001446 <_ZN14SoftwareSerial13stopListeningEv>:
    1446:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    144a:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    144e:	e8 17       	cp	r30, r24
    1450:	f9 07       	cpc	r31, r25
    1452:	69 f4       	brne	.+26     	; 0x146e <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1454:	a3 89       	ldd	r26, Z+19	; 0x13
    1456:	b4 89       	ldd	r27, Z+20	; 0x14
    1458:	9c 91       	ld	r25, X
    145a:	85 89       	ldd	r24, Z+21	; 0x15
    145c:	80 95       	com	r24
    145e:	89 23       	and	r24, r25
    1460:	8c 93       	st	X, r24
    1462:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    1466:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	08 95       	ret
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	08 95       	ret

00001472 <_ZN14SoftwareSerial6listenEv>:
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	ec 01       	movw	r28, r24
    1478:	8a 8d       	ldd	r24, Y+26	; 0x1a
    147a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    147c:	89 2b       	or	r24, r25
    147e:	f1 f0       	breq	.+60     	; 0x14bc <_ZN14SoftwareSerial6listenEv+0x4a>
    1480:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    1484:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    1488:	c8 17       	cp	r28, r24
    148a:	d9 07       	cpc	r29, r25
    148c:	b9 f0       	breq	.+46     	; 0x14bc <_ZN14SoftwareSerial6listenEv+0x4a>
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	11 f0       	breq	.+4      	; 0x1496 <_ZN14SoftwareSerial6listenEv+0x24>
    1492:	0e 94 23 0a 	call	0x1446	; 0x1446 <_ZN14SoftwareSerial13stopListeningEv>
    1496:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1498:	8e 7f       	andi	r24, 0xFE	; 254
    149a:	8e 8f       	std	Y+30, r24	; 0x1e
    149c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    14a0:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    14a4:	d0 93 72 02 	sts	0x0272, r29	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    14a8:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    14ac:	eb 89       	ldd	r30, Y+19	; 0x13
    14ae:	fc 89       	ldd	r31, Y+20	; 0x14
    14b0:	90 81       	ld	r25, Z
    14b2:	8d 89       	ldd	r24, Y+21	; 0x15
    14b4:	89 2b       	or	r24, r25
    14b6:	80 83       	st	Z, r24
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <_ZN14SoftwareSerial6listenEv+0x4c>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <__vector_3>:
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    14e6:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZN14SoftwareSerial13active_objectE>
    14ea:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <_ZN14SoftwareSerial13active_objectE+0x1>
    14ee:	30 97       	sbiw	r30, 0x00	; 0
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <__vector_3+0x30>
    14f2:	51 c0       	rjmp	.+162    	; 0x1596 <__vector_3+0xd2>
    14f4:	96 8d       	ldd	r25, Z+30	; 0x1e
    14f6:	a6 85       	ldd	r26, Z+14	; 0x0e
    14f8:	b7 85       	ldd	r27, Z+15	; 0x0f
    14fa:	85 85       	ldd	r24, Z+13	; 0x0d
    14fc:	91 ff       	sbrs	r25, 1
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <__vector_3+0x44>
    1500:	9c 91       	ld	r25, X
    1502:	89 23       	and	r24, r25
    1504:	29 f4       	brne	.+10     	; 0x1510 <__vector_3+0x4c>
    1506:	47 c0       	rjmp	.+142    	; 0x1596 <__vector_3+0xd2>
    1508:	9c 91       	ld	r25, X
    150a:	89 23       	and	r24, r25
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_3+0x4c>
    150e:	43 c0       	rjmp	.+134    	; 0x1596 <__vector_3+0xd2>
    1510:	a3 89       	ldd	r26, Z+19	; 0x13
    1512:	b4 89       	ldd	r27, Z+20	; 0x14
    1514:	9c 91       	ld	r25, X
    1516:	85 89       	ldd	r24, Z+21	; 0x15
    1518:	80 95       	com	r24
    151a:	89 23       	and	r24, r25
    151c:	8c 93       	st	X, r24
    151e:	86 89       	ldd	r24, Z+22	; 0x16
    1520:	97 89       	ldd	r25, Z+23	; 0x17
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <__vector_3+0x5e>
    1526:	60 8d       	ldd	r22, Z+24	; 0x18
    1528:	71 8d       	ldd	r23, Z+25	; 0x19
    152a:	a6 85       	ldd	r26, Z+14	; 0x0e
    152c:	b7 85       	ldd	r27, Z+15	; 0x0f
    152e:	55 85       	ldd	r21, Z+13	; 0x0d
    1530:	38 e0       	ldi	r19, 0x08	; 8
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	cb 01       	movw	r24, r22
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <__vector_3+0x72>
    153a:	82 2f       	mov	r24, r18
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	95 95       	asr	r25
    1540:	87 95       	ror	r24
    1542:	28 2f       	mov	r18, r24
    1544:	4c 91       	ld	r20, X
    1546:	45 23       	and	r20, r21
    1548:	09 f0       	breq	.+2      	; 0x154c <__vector_3+0x88>
    154a:	20 68       	ori	r18, 0x80	; 128
    154c:	31 50       	subi	r19, 0x01	; 1
    154e:	91 f7       	brne	.-28     	; 0x1534 <__vector_3+0x70>
    1550:	86 8d       	ldd	r24, Z+30	; 0x1e
    1552:	81 fd       	sbrc	r24, 1
    1554:	20 95       	com	r18
    1556:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	8f 73       	andi	r24, 0x3F	; 63
    1560:	99 27       	eor	r25, r25
    1562:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <_ZN14SoftwareSerial20_receive_buffer_headE>
    1566:	38 17       	cp	r19, r24
    1568:	49 f0       	breq	.+18     	; 0x157c <__vector_3+0xb8>
    156a:	a0 91 30 02 	lds	r26, 0x0230	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	af 5c       	subi	r26, 0xCF	; 207
    1572:	bd 4f       	sbci	r27, 0xFD	; 253
    1574:	2c 93       	st	X, r18
    1576:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <__vector_3+0xbe>
    157c:	86 8d       	ldd	r24, Z+30	; 0x1e
    157e:	81 60       	ori	r24, 0x01	; 1
    1580:	86 8f       	std	Z+30, r24	; 0x1e
    1582:	82 8d       	ldd	r24, Z+26	; 0x1a
    1584:	93 8d       	ldd	r25, Z+27	; 0x1b
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <__vector_3+0xc2>
    158a:	a3 89       	ldd	r26, Z+19	; 0x13
    158c:	b4 89       	ldd	r27, Z+20	; 0x14
    158e:	9c 91       	ld	r25, X
    1590:	85 89       	ldd	r24, Z+21	; 0x15
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24
    1596:	ff 91       	pop	r31
    1598:	ef 91       	pop	r30
    159a:	bf 91       	pop	r27
    159c:	af 91       	pop	r26
    159e:	9f 91       	pop	r25
    15a0:	8f 91       	pop	r24
    15a2:	7f 91       	pop	r23
    15a4:	6f 91       	pop	r22
    15a6:	5f 91       	pop	r21
    15a8:	4f 91       	pop	r20
    15aa:	3f 91       	pop	r19
    15ac:	2f 91       	pop	r18
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <_ZN14SoftwareSerialD1Ev>:
    15b8:	2e e3       	ldi	r18, 0x3E	; 62
    15ba:	31 e0       	ldi	r19, 0x01	; 1
    15bc:	fc 01       	movw	r30, r24
    15be:	31 83       	std	Z+1, r19	; 0x01
    15c0:	20 83       	st	Z, r18
    15c2:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_ZN14SoftwareSerial13stopListeningEv>

000015c6 <_ZN14SoftwareSerial5setTXEh>:
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ec 01       	movw	r28, r24
    15ce:	16 2f       	mov	r17, r22
    15d0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    15d2:	66 95       	lsr	r22
    15d4:	61 70       	andi	r22, 0x01	; 1
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	68 27       	eor	r22, r24
    15da:	81 2f       	mov	r24, r17
    15dc:	0e 94 11 09 	call	0x1222	; 0x1222 <digitalWrite>
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	81 2f       	mov	r24, r17
    15e4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pinMode>
    15e8:	81 2f       	mov	r24, r17
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 58       	subi	r30, 0x84	; 132
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	e4 91       	lpm	r30, Z
    15f4:	e8 8b       	std	Y+16, r30	; 0x10
    15f6:	fc 01       	movw	r30, r24
    15f8:	e0 57       	subi	r30, 0x70	; 112
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	e4 91       	lpm	r30, Z
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	e2 55       	subi	r30, 0x52	; 82
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	85 91       	lpm	r24, Z+
    160a:	94 91       	lpm	r25, Z
    160c:	9a 8b       	std	Y+18, r25	; 0x12
    160e:	89 8b       	std	Y+17, r24	; 0x11
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	08 95       	ret

00001618 <_ZN14SoftwareSerial5setRXEh>:
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	ec 01       	movw	r28, r24
    1620:	16 2f       	mov	r17, r22
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	81 2f       	mov	r24, r17
    1626:	0e 94 d5 08 	call	0x11aa	; 0x11aa <pinMode>
    162a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    162c:	81 fd       	sbrc	r24, 1
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <_ZN14SoftwareSerial5setRXEh+0x20>
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	81 2f       	mov	r24, r17
    1634:	0e 94 11 09 	call	0x1222	; 0x1222 <digitalWrite>
    1638:	1c 87       	std	Y+12, r17	; 0x0c
    163a:	81 2f       	mov	r24, r17
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	fc 01       	movw	r30, r24
    1640:	e4 58       	subi	r30, 0x84	; 132
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	e4 91       	lpm	r30, Z
    1646:	ed 87       	std	Y+13, r30	; 0x0d
    1648:	fc 01       	movw	r30, r24
    164a:	e0 57       	subi	r30, 0x70	; 112
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	e4 91       	lpm	r30, Z
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	ec 55       	subi	r30, 0x5C	; 92
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	85 91       	lpm	r24, Z+
    165c:	94 91       	lpm	r25, Z
    165e:	9f 87       	std	Y+15, r25	; 0x0f
    1660:	8e 87       	std	Y+14, r24	; 0x0e
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	08 95       	ret

0000166a <_ZN14SoftwareSerialC1Ehhb>:
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    1672:	16 2f       	mov	r17, r22
    1674:	1b 82       	std	Y+3, r1	; 0x03
    1676:	1a 82       	std	Y+2, r1	; 0x02
    1678:	88 ee       	ldi	r24, 0xE8	; 232
    167a:	93 e0       	ldi	r25, 0x03	; 3
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	8c 83       	std	Y+4, r24	; 0x04
    1682:	9d 83       	std	Y+5, r25	; 0x05
    1684:	ae 83       	std	Y+6, r26	; 0x06
    1686:	bf 83       	std	Y+7, r27	; 0x07
    1688:	8e e3       	ldi	r24, 0x3E	; 62
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	99 83       	std	Y+1, r25	; 0x01
    168e:	88 83       	st	Y, r24
    1690:	1f 8a       	std	Y+23, r1	; 0x17
    1692:	1e 8a       	std	Y+22, r1	; 0x16
    1694:	19 8e       	std	Y+25, r1	; 0x19
    1696:	18 8e       	std	Y+24, r1	; 0x18
    1698:	1b 8e       	std	Y+27, r1	; 0x1b
    169a:	1a 8e       	std	Y+26, r1	; 0x1a
    169c:	1d 8e       	std	Y+29, r1	; 0x1d
    169e:	1c 8e       	std	Y+28, r1	; 0x1c
    16a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a2:	8e 7f       	andi	r24, 0xFE	; 254
    16a4:	20 fb       	bst	r18, 0
    16a6:	81 f9       	bld	r24, 1
    16a8:	8e 8f       	std	Y+30, r24	; 0x1e
    16aa:	64 2f       	mov	r22, r20
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN14SoftwareSerial5setTXEh>
    16b2:	61 2f       	mov	r22, r17
    16b4:	ce 01       	movw	r24, r28
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <_ZN14SoftwareSerial5setRXEh>

000016c0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
    16c6:	9a 01       	movw	r18, r20
    16c8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    16ca:	1b 8e       	std	Y+27, r1	; 0x1b
    16cc:	1a 8e       	std	Y+26, r1	; 0x1a
    16ce:	19 8e       	std	Y+25, r1	; 0x19
    16d0:	18 8e       	std	Y+24, r1	; 0x18
    16d2:	1f 8a       	std	Y+23, r1	; 0x17
    16d4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	79 e0       	ldi	r23, 0x09	; 9
    16da:	8d e3       	ldi	r24, 0x3D	; 61
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__divmodsi4>
    16e2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    16e4:	24 30       	cpi	r18, 0x04	; 4
    16e6:	31 05       	cpc	r19, r1
    16e8:	18 f0       	brcs	.+6      	; 0x16f0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    16ea:	c9 01       	movw	r24, r18
    16ec:	03 97       	sbiw	r24, 0x03	; 3
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    16f4:	9d 8f       	std	Y+29, r25	; 0x1d
    16f6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    16f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    16fa:	66 31       	cpi	r22, 0x16	; 22
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <_ZN14SoftwareSerial5beginEl+0x40>
    16fe:	69 c0       	rjmp	.+210    	; 0x17d2 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1700:	c9 01       	movw	r24, r18
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1706:	84 31       	cpi	r24, 0x14	; 20
    1708:	91 05       	cpc	r25, r1
    170a:	10 f0       	brcs	.+4      	; 0x1710 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    170c:	43 97       	sbiw	r24, 0x13	; 19
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1714:	9f 8b       	std	Y+23, r25	; 0x17
    1716:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1718:	36 97       	sbiw	r30, 0x06	; 6
    171a:	18 f0       	brcs	.+6      	; 0x1722 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    171c:	c9 01       	movw	r24, r18
    171e:	05 97       	sbiw	r24, 0x05	; 5
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1726:	99 8f       	std	Y+25, r25	; 0x19
    1728:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    172a:	c9 01       	movw	r24, r18
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	28 0f       	add	r18, r24
    1732:	39 1f       	adc	r19, r25
    1734:	36 95       	lsr	r19
    1736:	27 95       	ror	r18
    1738:	36 95       	lsr	r19
    173a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    173c:	2d 30       	cpi	r18, 0x0D	; 13
    173e:	31 05       	cpc	r19, r1
    1740:	18 f0       	brcs	.+6      	; 0x1748 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    1742:	2c 50       	subi	r18, 0x0C	; 12
    1744:	31 09       	sbc	r19, r1
    1746:	02 c0       	rjmp	.+4      	; 0x174c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    174c:	3b 8f       	std	Y+27, r19	; 0x1b
    174e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1750:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1754:	68 30       	cpi	r22, 0x08	; 8
    1756:	50 f0       	brcs	.+20     	; 0x176c <_ZN14SoftwareSerial5beginEl+0xac>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	6e 30       	cpi	r22, 0x0E	; 14
    175c:	08 f4       	brcc	.+2      	; 0x1760 <_ZN14SoftwareSerial5beginEl+0xa0>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <_ZN14SoftwareSerial5beginEl+0xa6>
    1764:	88 0f       	add	r24, r24
    1766:	2a 95       	dec	r18
    1768:	ea f7       	brpl	.-6      	; 0x1764 <_ZN14SoftwareSerial5beginEl+0xa4>
    176a:	01 c0       	rjmp	.+2      	; 0x176e <_ZN14SoftwareSerial5beginEl+0xae>
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	89 2b       	or	r24, r25
    1770:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1774:	9c 85       	ldd	r25, Y+12	; 0x0c
    1776:	98 30       	cpi	r25, 0x08	; 8
    1778:	38 f0       	brcs	.+14     	; 0x1788 <_ZN14SoftwareSerial5beginEl+0xc8>
    177a:	9e 30       	cpi	r25, 0x0E	; 14
    177c:	40 f0       	brcs	.+16     	; 0x178e <_ZN14SoftwareSerial5beginEl+0xce>
    177e:	96 31       	cpi	r25, 0x16	; 22
    1780:	48 f0       	brcs	.+18     	; 0x1794 <_ZN14SoftwareSerial5beginEl+0xd4>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <_ZN14SoftwareSerial5beginEl+0xd8>
    1788:	2d e6       	ldi	r18, 0x6D	; 109
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <_ZN14SoftwareSerial5beginEl+0xd8>
    178e:	2b e6       	ldi	r18, 0x6B	; 107
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <_ZN14SoftwareSerial5beginEl+0xd8>
    1794:	2c e6       	ldi	r18, 0x6C	; 108
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3c 8b       	std	Y+20, r19	; 0x14
    179a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    179c:	98 30       	cpi	r25, 0x08	; 8
    179e:	30 f4       	brcc	.+12     	; 0x17ac <_ZN14SoftwareSerial5beginEl+0xec>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <_ZN14SoftwareSerial5beginEl+0xe6>
    17a4:	88 0f       	add	r24, r24
    17a6:	9a 95       	dec	r25
    17a8:	ea f7       	brpl	.-6      	; 0x17a4 <_ZN14SoftwareSerial5beginEl+0xe4>
    17aa:	0e c0       	rjmp	.+28     	; 0x17c8 <_ZN14SoftwareSerial5beginEl+0x108>
    17ac:	29 2f       	mov	r18, r25
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	9e 30       	cpi	r25, 0x0E	; 14
    17b2:	18 f4       	brcc	.+6      	; 0x17ba <_ZN14SoftwareSerial5beginEl+0xfa>
    17b4:	28 50       	subi	r18, 0x08	; 8
    17b6:	31 09       	sbc	r19, r1
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <_ZN14SoftwareSerial5beginEl+0xfe>
    17ba:	2e 50       	subi	r18, 0x0E	; 14
    17bc:	31 09       	sbc	r19, r1
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <_ZN14SoftwareSerial5beginEl+0x104>
    17c2:	88 0f       	add	r24, r24
    17c4:	2a 95       	dec	r18
    17c6:	ea f7       	brpl	.-6      	; 0x17c2 <_ZN14SoftwareSerial5beginEl+0x102>
    17c8:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    17ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    17d2:	ce 01       	movw	r24, r28
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    17d8:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <_ZN14SoftwareSerial6listenEv>

000017dc <__subsf3>:
    17dc:	50 58       	subi	r21, 0x80	; 128

000017de <__addsf3>:
    17de:	bb 27       	eor	r27, r27
    17e0:	aa 27       	eor	r26, r26
    17e2:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3x>
    17e6:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
    17ea:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
    17ee:	38 f0       	brcs	.+14     	; 0x17fe <__addsf3+0x20>
    17f0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
    17f4:	20 f0       	brcs	.+8      	; 0x17fe <__addsf3+0x20>
    17f6:	39 f4       	brne	.+14     	; 0x1806 <__addsf3+0x28>
    17f8:	9f 3f       	cpi	r25, 0xFF	; 255
    17fa:	19 f4       	brne	.+6      	; 0x1802 <__addsf3+0x24>
    17fc:	26 f4       	brtc	.+8      	; 0x1806 <__addsf3+0x28>
    17fe:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_nan>
    1802:	0e f4       	brtc	.+2      	; 0x1806 <__addsf3+0x28>
    1804:	e0 95       	com	r30
    1806:	e7 fb       	bst	r30, 7
    1808:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_inf>

0000180c <__addsf3x>:
    180c:	e9 2f       	mov	r30, r25
    180e:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
    1812:	58 f3       	brcs	.-42     	; 0x17ea <__addsf3+0xc>
    1814:	ba 17       	cp	r27, r26
    1816:	62 07       	cpc	r22, r18
    1818:	73 07       	cpc	r23, r19
    181a:	84 07       	cpc	r24, r20
    181c:	95 07       	cpc	r25, r21
    181e:	20 f0       	brcs	.+8      	; 0x1828 <__addsf3x+0x1c>
    1820:	79 f4       	brne	.+30     	; 0x1840 <__addsf3x+0x34>
    1822:	a6 f5       	brtc	.+104    	; 0x188c <__addsf3x+0x80>
    1824:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
    1828:	0e f4       	brtc	.+2      	; 0x182c <__addsf3x+0x20>
    182a:	e0 95       	com	r30
    182c:	0b 2e       	mov	r0, r27
    182e:	ba 2f       	mov	r27, r26
    1830:	a0 2d       	mov	r26, r0
    1832:	0b 01       	movw	r0, r22
    1834:	b9 01       	movw	r22, r18
    1836:	90 01       	movw	r18, r0
    1838:	0c 01       	movw	r0, r24
    183a:	ca 01       	movw	r24, r20
    183c:	a0 01       	movw	r20, r0
    183e:	11 24       	eor	r1, r1
    1840:	ff 27       	eor	r31, r31
    1842:	59 1b       	sub	r21, r25
    1844:	99 f0       	breq	.+38     	; 0x186c <__addsf3x+0x60>
    1846:	59 3f       	cpi	r21, 0xF9	; 249
    1848:	50 f4       	brcc	.+20     	; 0x185e <__addsf3x+0x52>
    184a:	50 3e       	cpi	r21, 0xE0	; 224
    184c:	68 f1       	brcs	.+90     	; 0x18a8 <__addsf3x+0x9c>
    184e:	1a 16       	cp	r1, r26
    1850:	f0 40       	sbci	r31, 0x00	; 0
    1852:	a2 2f       	mov	r26, r18
    1854:	23 2f       	mov	r18, r19
    1856:	34 2f       	mov	r19, r20
    1858:	44 27       	eor	r20, r20
    185a:	58 5f       	subi	r21, 0xF8	; 248
    185c:	f3 cf       	rjmp	.-26     	; 0x1844 <__addsf3x+0x38>
    185e:	46 95       	lsr	r20
    1860:	37 95       	ror	r19
    1862:	27 95       	ror	r18
    1864:	a7 95       	ror	r26
    1866:	f0 40       	sbci	r31, 0x00	; 0
    1868:	53 95       	inc	r21
    186a:	c9 f7       	brne	.-14     	; 0x185e <__addsf3x+0x52>
    186c:	7e f4       	brtc	.+30     	; 0x188c <__addsf3x+0x80>
    186e:	1f 16       	cp	r1, r31
    1870:	ba 0b       	sbc	r27, r26
    1872:	62 0b       	sbc	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	84 0b       	sbc	r24, r20
    1878:	ba f0       	brmi	.+46     	; 0x18a8 <__addsf3x+0x9c>
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	a1 f0       	breq	.+40     	; 0x18a6 <__addsf3x+0x9a>
    187e:	ff 0f       	add	r31, r31
    1880:	bb 1f       	adc	r27, r27
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	c2 f7       	brpl	.-16     	; 0x187a <__addsf3x+0x6e>
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <__addsf3x+0x9c>
    188c:	ba 0f       	add	r27, r26
    188e:	62 1f       	adc	r22, r18
    1890:	73 1f       	adc	r23, r19
    1892:	84 1f       	adc	r24, r20
    1894:	48 f4       	brcc	.+18     	; 0x18a8 <__addsf3x+0x9c>
    1896:	87 95       	ror	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	b7 95       	ror	r27
    189e:	f7 95       	ror	r31
    18a0:	9e 3f       	cpi	r25, 0xFE	; 254
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <__addsf3x+0x9a>
    18a4:	b0 cf       	rjmp	.-160    	; 0x1806 <__addsf3+0x28>
    18a6:	93 95       	inc	r25
    18a8:	88 0f       	add	r24, r24
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <__addsf3x+0xa2>
    18ac:	99 27       	eor	r25, r25
    18ae:	ee 0f       	add	r30, r30
    18b0:	97 95       	ror	r25
    18b2:	87 95       	ror	r24
    18b4:	08 95       	ret

000018b6 <__divsf3>:
    18b6:	0e 94 6f 0c 	call	0x18de	; 0x18de <__divsf3x>
    18ba:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_round>
    18be:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__fp_pscB>
    18c2:	58 f0       	brcs	.+22     	; 0x18da <__divsf3+0x24>
    18c4:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_pscA>
    18c8:	40 f0       	brcs	.+16     	; 0x18da <__divsf3+0x24>
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <__divsf3+0x20>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	29 f0       	breq	.+10     	; 0x18da <__divsf3+0x24>
    18d0:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_inf>
    18d4:	51 11       	cpse	r21, r1
    18d6:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
    18da:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_nan>

000018de <__divsf3x>:
    18de:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
    18e2:	68 f3       	brcs	.-38     	; 0x18be <__divsf3+0x8>

000018e4 <__divsf3_pse>:
    18e4:	99 23       	and	r25, r25
    18e6:	b1 f3       	breq	.-20     	; 0x18d4 <__divsf3+0x1e>
    18e8:	55 23       	and	r21, r21
    18ea:	91 f3       	breq	.-28     	; 0x18d0 <__divsf3+0x1a>
    18ec:	95 1b       	sub	r25, r21
    18ee:	55 0b       	sbc	r21, r21
    18f0:	bb 27       	eor	r27, r27
    18f2:	aa 27       	eor	r26, r26
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	38 f0       	brcs	.+14     	; 0x190a <__divsf3_pse+0x26>
    18fc:	9f 5f       	subi	r25, 0xFF	; 255
    18fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	aa 1f       	adc	r26, r26
    1908:	a9 f3       	breq	.-22     	; 0x18f4 <__divsf3_pse+0x10>
    190a:	35 d0       	rcall	.+106    	; 0x1976 <__divsf3_pse+0x92>
    190c:	0e 2e       	mov	r0, r30
    190e:	3a f0       	brmi	.+14     	; 0x191e <__divsf3_pse+0x3a>
    1910:	e0 e8       	ldi	r30, 0x80	; 128
    1912:	32 d0       	rcall	.+100    	; 0x1978 <__divsf3_pse+0x94>
    1914:	91 50       	subi	r25, 0x01	; 1
    1916:	50 40       	sbci	r21, 0x00	; 0
    1918:	e6 95       	lsr	r30
    191a:	00 1c       	adc	r0, r0
    191c:	ca f7       	brpl	.-14     	; 0x1910 <__divsf3_pse+0x2c>
    191e:	2b d0       	rcall	.+86     	; 0x1976 <__divsf3_pse+0x92>
    1920:	fe 2f       	mov	r31, r30
    1922:	29 d0       	rcall	.+82     	; 0x1976 <__divsf3_pse+0x92>
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	bb 1f       	adc	r27, r27
    192c:	26 17       	cp	r18, r22
    192e:	37 07       	cpc	r19, r23
    1930:	48 07       	cpc	r20, r24
    1932:	ab 07       	cpc	r26, r27
    1934:	b0 e8       	ldi	r27, 0x80	; 128
    1936:	09 f0       	breq	.+2      	; 0x193a <__divsf3_pse+0x56>
    1938:	bb 0b       	sbc	r27, r27
    193a:	80 2d       	mov	r24, r0
    193c:	bf 01       	movw	r22, r30
    193e:	ff 27       	eor	r31, r31
    1940:	93 58       	subi	r25, 0x83	; 131
    1942:	5f 4f       	sbci	r21, 0xFF	; 255
    1944:	3a f0       	brmi	.+14     	; 0x1954 <__divsf3_pse+0x70>
    1946:	9e 3f       	cpi	r25, 0xFE	; 254
    1948:	51 05       	cpc	r21, r1
    194a:	78 f0       	brcs	.+30     	; 0x196a <__divsf3_pse+0x86>
    194c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_inf>
    1950:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
    1954:	5f 3f       	cpi	r21, 0xFF	; 255
    1956:	e4 f3       	brlt	.-8      	; 0x1950 <__divsf3_pse+0x6c>
    1958:	98 3e       	cpi	r25, 0xE8	; 232
    195a:	d4 f3       	brlt	.-12     	; 0x1950 <__divsf3_pse+0x6c>
    195c:	86 95       	lsr	r24
    195e:	77 95       	ror	r23
    1960:	67 95       	ror	r22
    1962:	b7 95       	ror	r27
    1964:	f7 95       	ror	r31
    1966:	9f 5f       	subi	r25, 0xFF	; 255
    1968:	c9 f7       	brne	.-14     	; 0x195c <__divsf3_pse+0x78>
    196a:	88 0f       	add	r24, r24
    196c:	91 1d       	adc	r25, r1
    196e:	96 95       	lsr	r25
    1970:	87 95       	ror	r24
    1972:	97 f9       	bld	r25, 7
    1974:	08 95       	ret
    1976:	e1 e0       	ldi	r30, 0x01	; 1
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	bb 1f       	adc	r27, r27
    1980:	62 17       	cp	r22, r18
    1982:	73 07       	cpc	r23, r19
    1984:	84 07       	cpc	r24, r20
    1986:	ba 07       	cpc	r27, r26
    1988:	20 f0       	brcs	.+8      	; 0x1992 <__divsf3_pse+0xae>
    198a:	62 1b       	sub	r22, r18
    198c:	73 0b       	sbc	r23, r19
    198e:	84 0b       	sbc	r24, r20
    1990:	ba 0b       	sbc	r27, r26
    1992:	ee 1f       	adc	r30, r30
    1994:	88 f7       	brcc	.-30     	; 0x1978 <__divsf3_pse+0x94>
    1996:	e0 95       	com	r30
    1998:	08 95       	ret

0000199a <__unordsf2>:
    199a:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_cmp>
    199e:	88 0b       	sbc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	08 95       	ret

000019a4 <__mulsi3>:
    19a4:	db 01       	movw	r26, r22
    19a6:	8f 93       	push	r24
    19a8:	9f 93       	push	r25
    19aa:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__muluhisi3>
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	a2 9f       	mul	r26, r18
    19b4:	80 0d       	add	r24, r0
    19b6:	91 1d       	adc	r25, r1
    19b8:	a3 9f       	mul	r26, r19
    19ba:	90 0d       	add	r25, r0
    19bc:	b2 9f       	mul	r27, r18
    19be:	90 0d       	add	r25, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	08 95       	ret

000019c4 <__divmodhi4>:
    19c4:	97 fb       	bst	r25, 7
    19c6:	07 2e       	mov	r0, r23
    19c8:	16 f4       	brtc	.+4      	; 0x19ce <__divmodhi4+0xa>
    19ca:	00 94       	com	r0
    19cc:	07 d0       	rcall	.+14     	; 0x19dc <__divmodhi4_neg1>
    19ce:	77 fd       	sbrc	r23, 7
    19d0:	09 d0       	rcall	.+18     	; 0x19e4 <__divmodhi4_neg2>
    19d2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    19d6:	07 fc       	sbrc	r0, 7
    19d8:	05 d0       	rcall	.+10     	; 0x19e4 <__divmodhi4_neg2>
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__divmodhi4_exit>

000019dc <__divmodhi4_neg1>:
    19dc:	90 95       	com	r25
    19de:	81 95       	neg	r24
    19e0:	9f 4f       	sbci	r25, 0xFF	; 255
    19e2:	08 95       	ret

000019e4 <__divmodhi4_neg2>:
    19e4:	70 95       	com	r23
    19e6:	61 95       	neg	r22
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255

000019ea <__divmodhi4_exit>:
    19ea:	08 95       	ret

000019ec <__udivmodsi4>:
    19ec:	a1 e2       	ldi	r26, 0x21	; 33
    19ee:	1a 2e       	mov	r1, r26
    19f0:	aa 1b       	sub	r26, r26
    19f2:	bb 1b       	sub	r27, r27
    19f4:	fd 01       	movw	r30, r26
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <__udivmodsi4_ep>

000019f8 <__udivmodsi4_loop>:
    19f8:	aa 1f       	adc	r26, r26
    19fa:	bb 1f       	adc	r27, r27
    19fc:	ee 1f       	adc	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	a2 17       	cp	r26, r18
    1a02:	b3 07       	cpc	r27, r19
    1a04:	e4 07       	cpc	r30, r20
    1a06:	f5 07       	cpc	r31, r21
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <__udivmodsi4_ep>
    1a0a:	a2 1b       	sub	r26, r18
    1a0c:	b3 0b       	sbc	r27, r19
    1a0e:	e4 0b       	sbc	r30, r20
    1a10:	f5 0b       	sbc	r31, r21

00001a12 <__udivmodsi4_ep>:
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	1a 94       	dec	r1
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <__udivmodsi4_loop>
    1a1e:	60 95       	com	r22
    1a20:	70 95       	com	r23
    1a22:	80 95       	com	r24
    1a24:	90 95       	com	r25
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	bd 01       	movw	r22, r26
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	08 95       	ret

00001a30 <__divmodsi4>:
    1a30:	05 2e       	mov	r0, r21
    1a32:	97 fb       	bst	r25, 7
    1a34:	1e f4       	brtc	.+6      	; 0x1a3c <__divmodsi4+0xc>
    1a36:	00 94       	com	r0
    1a38:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__negsi2>
    1a3c:	57 fd       	sbrc	r21, 7
    1a3e:	07 d0       	rcall	.+14     	; 0x1a4e <__divmodsi4_neg2>
    1a40:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__udivmodsi4>
    1a44:	07 fc       	sbrc	r0, 7
    1a46:	03 d0       	rcall	.+6      	; 0x1a4e <__divmodsi4_neg2>
    1a48:	4e f4       	brtc	.+18     	; 0x1a5c <__divmodsi4_exit>
    1a4a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__negsi2>

00001a4e <__divmodsi4_neg2>:
    1a4e:	50 95       	com	r21
    1a50:	40 95       	com	r20
    1a52:	30 95       	com	r19
    1a54:	21 95       	neg	r18
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	4f 4f       	sbci	r20, 0xFF	; 255
    1a5a:	5f 4f       	sbci	r21, 0xFF	; 255

00001a5c <__divmodsi4_exit>:
    1a5c:	08 95       	ret

00001a5e <__negsi2>:
    1a5e:	90 95       	com	r25
    1a60:	80 95       	com	r24
    1a62:	70 95       	com	r23
    1a64:	61 95       	neg	r22
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	08 95       	ret

00001a6e <__muluhisi3>:
    1a6e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__umulhisi3>
    1a72:	a5 9f       	mul	r26, r21
    1a74:	90 0d       	add	r25, r0
    1a76:	b4 9f       	mul	r27, r20
    1a78:	90 0d       	add	r25, r0
    1a7a:	a4 9f       	mul	r26, r20
    1a7c:	80 0d       	add	r24, r0
    1a7e:	91 1d       	adc	r25, r1
    1a80:	11 24       	eor	r1, r1
    1a82:	08 95       	ret

00001a84 <__udivmodhi4>:
    1a84:	aa 1b       	sub	r26, r26
    1a86:	bb 1b       	sub	r27, r27
    1a88:	51 e1       	ldi	r21, 0x11	; 17
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <__udivmodhi4_ep>

00001a8c <__udivmodhi4_loop>:
    1a8c:	aa 1f       	adc	r26, r26
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	a6 17       	cp	r26, r22
    1a92:	b7 07       	cpc	r27, r23
    1a94:	10 f0       	brcs	.+4      	; 0x1a9a <__udivmodhi4_ep>
    1a96:	a6 1b       	sub	r26, r22
    1a98:	b7 0b       	sbc	r27, r23

00001a9a <__udivmodhi4_ep>:
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	5a 95       	dec	r21
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <__udivmodhi4_loop>
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	08 95       	ret

00001aac <__tablejump2__>:
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	05 90       	lpm	r0, Z+
    1ab2:	f4 91       	lpm	r31, Z
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	09 94       	ijmp

00001ab8 <__umulhisi3>:
    1ab8:	a2 9f       	mul	r26, r18
    1aba:	b0 01       	movw	r22, r0
    1abc:	b3 9f       	mul	r27, r19
    1abe:	c0 01       	movw	r24, r0
    1ac0:	a3 9f       	mul	r26, r19
    1ac2:	70 0d       	add	r23, r0
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	91 1d       	adc	r25, r1
    1aca:	b2 9f       	mul	r27, r18
    1acc:	70 0d       	add	r23, r0
    1ace:	81 1d       	adc	r24, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	08 95       	ret

00001ad6 <__do_global_dtors>:
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	c3 e6       	ldi	r28, 0x63	; 99
    1ada:	d0 e0       	ldi	r29, 0x00	; 0
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <__do_global_dtors+0x10>
    1ade:	fe 01       	movw	r30, r28
    1ae0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__tablejump2__>
    1ae4:	21 96       	adiw	r28, 0x01	; 1
    1ae6:	c4 36       	cpi	r28, 0x64	; 100
    1ae8:	d1 07       	cpc	r29, r17
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__do_global_dtors+0x8>
    1aec:	f8 94       	cli

00001aee <__stop_program>:
    1aee:	ff cf       	rjmp	.-2      	; 0x1aee <__stop_program>
