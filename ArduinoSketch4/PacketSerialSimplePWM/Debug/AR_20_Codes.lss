
AR_20_Codes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000286  00800100  000024c0  00002554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800386  00800386  000027da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001643e  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003056  00000000  00000000  00019652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005240  00000000  00000000  0001c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002fd4  00000000  00000000  000218e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005219  00000000  00000000  000248bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001165c  00000000  00000000  00029ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  0003b131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__dtors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_3>
      10:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_3>
      14:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_3>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_16>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__vector_18>
      4c:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_19>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	86 02       	muls	r24, r22
      6a:	1f 02       	muls	r17, r31
      6c:	8a 02       	muls	r24, r26
      6e:	22 02       	muls	r18, r18
      70:	25 02       	muls	r18, r21
      72:	28 02       	muls	r18, r24
      74:	2c 02       	muls	r18, r28
      76:	2f 02       	muls	r18, r31
      78:	32 02       	muls	r19, r18
      7a:	35 02       	muls	r19, r21
      7c:	38 02       	muls	r19, r24
      7e:	3b 02       	muls	r19, r27
      80:	3e 02       	muls	r19, r30
      82:	41 02       	muls	r20, r17
      84:	44 02       	muls	r20, r20
      86:	48 02       	muls	r20, r24
      88:	4b 02       	muls	r20, r27
      8a:	4e 02       	muls	r20, r30
      8c:	8e 02       	muls	r24, r30
      8e:	5c 02       	muls	r21, r28
      90:	5f 02       	muls	r21, r31
      92:	84 02       	muls	r24, r20
      94:	62 02       	muls	r22, r18
      96:	84 02       	muls	r24, r20
      98:	66 02       	muls	r22, r22
      9a:	69 02       	muls	r22, r25
      9c:	6d 02       	muls	r22, r29
      9e:	84 02       	muls	r24, r20
      a0:	84 02       	muls	r24, r20
      a2:	70 02       	muls	r23, r16
      a4:	74 02       	muls	r23, r20
      a6:	77 02       	muls	r23, r23
      a8:	7b 02       	muls	r23, r27
      aa:	7e 02       	muls	r23, r30
      ac:	84 02       	muls	r24, r20
      ae:	81 02       	muls	r24, r17

000000b0 <__trampolines_end>:
      b0:	00 00       	nop
      b2:	00 08       	sbc	r0, r0
      b4:	00 02       	muls	r16, r16
      b6:	01 00       	.word	0x0001	; ????
      b8:	00 03       	mulsu	r16, r16
      ba:	04 07       	cpc	r16, r20
	...

000000c4 <digital_pin_to_bit_mask_PGM>:
      c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d4:	04 08 10 20                                         ... 

000000d8 <digital_pin_to_port_PGM>:
      d8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e8:	03 03 03 03                                         ....

000000ec <port_to_input_PGM>:
      ec:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f6 <port_to_output_PGM>:
      f6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000100 <port_to_mode_PGM>:
     100:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010a <__ctors_start>:
     10a:	eb 05       	cpc	r30, r11
     10c:	ab 0a       	sbc	r10, r27

0000010e <__ctors_end>:
     10e:	02 06       	cpc	r0, r18

00000110 <__dtors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d8 e0       	ldi	r29, 0x08	; 8
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	13 e0       	ldi	r17, 0x03	; 3
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e0 ec       	ldi	r30, 0xC0	; 192
     124:	f4 e2       	ldi	r31, 0x24	; 36
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a6 38       	cpi	r26, 0x86	; 134
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	24 e0       	ldi	r18, 0x04	; 4
     134:	a6 e8       	ldi	r26, 0x86	; 134
     136:	b3 e0       	ldi	r27, 0x03	; 3
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	ac 3b       	cpi	r26, 0xBC	; 188
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>

00000142 <__do_global_ctors>:
     142:	10 e0       	ldi	r17, 0x00	; 0
     144:	c7 e8       	ldi	r28, 0x87	; 135
     146:	d0 e0       	ldi	r29, 0x00	; 0
     148:	04 c0       	rjmp	.+8      	; 0x152 <__do_global_ctors+0x10>
     14a:	21 97       	sbiw	r28, 0x01	; 1
     14c:	fe 01       	movw	r30, r28
     14e:	0e 94 1f 12 	call	0x243e	; 0x243e <__tablejump2__>
     152:	c5 38       	cpi	r28, 0x85	; 133
     154:	d1 07       	cpc	r29, r17
     156:	c9 f7       	brne	.-14     	; 0x14a <__do_global_ctors+0x8>
     158:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <main>
     15c:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__do_global_dtors>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <_ZN8SPIClass16beginTransactionE11SPISettings>:
*********************************************************************************************************/
byte MCP_CAN::checkError(void)
{
    byte eflg = mcp2515_readRegister(MCP_EFLG);
    return ((eflg & MCP_EFLG_ERRORMASK) ? CAN_CTRLERROR : CAN_OK);
}
     164:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <_ZN8SPIClass13interruptModeE>
     168:	22 23       	and	r18, r18
     16a:	81 f0       	breq	.+32     	; 0x18c <_ZN8SPIClass16beginTransactionE11SPISettings+0x28>
     16c:	21 30       	cpi	r18, 0x01	; 1
     16e:	51 f4       	brne	.+20     	; 0x184 <_ZN8SPIClass16beginTransactionE11SPISettings+0x20>
     170:	2d b3       	in	r18, 0x1d	; 29
     172:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <__data_end>
     176:	3d b3       	in	r19, 0x1d	; 29
     178:	20 91 87 03 	lds	r18, 0x0387	; 0x800387 <_ZN8SPIClass13interruptMaskE>
     17c:	20 95       	com	r18
     17e:	23 23       	and	r18, r19
     180:	2d bb       	out	0x1d, r18	; 29
     182:	04 c0       	rjmp	.+8      	; 0x18c <_ZN8SPIClass16beginTransactionE11SPISettings+0x28>
     184:	2f b7       	in	r18, 0x3f	; 63
     186:	f8 94       	cli
     188:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <__data_end>
     18c:	8c bd       	out	0x2c, r24	; 44
     18e:	9d bd       	out	0x2d, r25	; 45
     190:	08 95       	ret

00000192 <_ZN8SPIClass8transferEh>:
     192:	8e bd       	out	0x2e, r24	; 46
     194:	00 00       	nop
     196:	0d b4       	in	r0, 0x2d	; 45
     198:	07 fe       	sbrs	r0, 7
     19a:	fd cf       	rjmp	.-6      	; 0x196 <_ZN8SPIClass8transferEh+0x4>
     19c:	8e b5       	in	r24, 0x2e	; 46
     19e:	08 95       	ret

000001a0 <_ZN8SPIClass14endTransactionEv>:
     1a0:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <_ZN8SPIClass13interruptModeE>
     1a4:	99 23       	and	r25, r25
     1a6:	39 f0       	breq	.+14     	; 0x1b6 <_ZN8SPIClass14endTransactionEv+0x16>
     1a8:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <__data_end>
     1ac:	91 30       	cpi	r25, 0x01	; 1
     1ae:	11 f4       	brne	.+4      	; 0x1b4 <_ZN8SPIClass14endTransactionEv+0x14>
     1b0:	8d bb       	out	0x1d, r24	; 29
     1b2:	08 95       	ret
     1b4:	8f bf       	out	0x3f, r24	; 63
     1b6:	08 95       	ret

000001b8 <_ZN7MCP_CAN13mcp2515_resetEv>:
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	ec 01       	movw	r28, r24
     1be:	80 e5       	ldi	r24, 0x50	; 80
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8SPIClass16beginTransactionE11SPISettings>
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	8e 81       	ldd	r24, Y+6	; 0x06
     1ca:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     1ce:	80 ec       	ldi	r24, 0xC0	; 192
     1d0:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	8e 81       	ldd	r24, Y+6	; 0x06
     1d8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     1dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8SPIClass14endTransactionEv>
     1e0:	6a e0       	ldi	r22, 0x0A	; 10
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <delay>

000001f0 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
     1f8:	16 2f       	mov	r17, r22
     1fa:	80 e5       	ldi	r24, 0x50	; 80
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8SPIClass16beginTransactionE11SPISettings>
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     210:	81 2f       	mov	r24, r17
     212:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     21c:	18 2f       	mov	r17, r24
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	8e 81       	ldd	r24, Y+6	; 0x06
     222:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     226:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8SPIClass14endTransactionEv>
     22a:	81 2f       	mov	r24, r17
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	08 95       	ret

00000234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	06 2f       	mov	r16, r22
     240:	14 2f       	mov	r17, r20
     242:	80 e5       	ldi	r24, 0x50	; 80
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8SPIClass16beginTransactionE11SPISettings>
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	8e 81       	ldd	r24, Y+6	; 0x06
     24e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     258:	80 2f       	mov	r24, r16
     25a:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     25e:	81 2f       	mov	r24, r17
     260:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     264:	61 e0       	ldi	r22, 0x01	; 1
     266:	8e 81       	ldd	r24, Y+6	; 0x06
     268:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_ZN8SPIClass14endTransactionEv>

00000278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
     284:	f6 2e       	mov	r15, r22
     286:	04 2f       	mov	r16, r20
     288:	12 2f       	mov	r17, r18
     28a:	80 e5       	ldi	r24, 0x50	; 80
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8SPIClass16beginTransactionE11SPISettings>
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	8e 81       	ldd	r24, Y+6	; 0x06
     296:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2a0:	8f 2d       	mov	r24, r15
     2a2:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2a6:	80 2f       	mov	r24, r16
     2a8:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2ac:	81 2f       	mov	r24, r17
     2ae:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	8e 81       	ldd	r24, Y+6	; 0x06
     2b6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_ZN8SPIClass14endTransactionEv>

000002c8 <_ZN7MCP_CAN18mcp2515_readStatusEv>:
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
     2d0:	80 e5       	ldi	r24, 0x50	; 80
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8SPIClass16beginTransactionE11SPISettings>
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	8e 81       	ldd	r24, Y+6	; 0x06
     2dc:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     2e0:	80 ea       	ldi	r24, 0xA0	; 160
     2e2:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     2ec:	18 2f       	mov	r17, r24
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	8e 81       	ldd	r24, Y+6	; 0x06
     2f2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     2f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8SPIClass14endTransactionEv>
     2fa:	81 2f       	mov	r24, r17
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	08 95       	ret

00000304 <_ZN7MCP_CAN7getModeEv>:
     304:	6e e0       	ldi	r22, 0x0E	; 14
     306:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     30a:	80 7e       	andi	r24, 0xE0	; 224
     30c:	08 95       	ret

0000030e <_ZN7MCP_CAN22mcp2515_requestNewModeEh>:
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ec 01       	movw	r28, r24
     322:	b6 2e       	mov	r11, r22
     324:	0e 94 c9 0c 	call	0x1992	; 0x1992 <millis>
     328:	6b 01       	movw	r12, r22
     32a:	7c 01       	movw	r14, r24
     32c:	0b 2d       	mov	r16, r11
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	2b 2d       	mov	r18, r11
     332:	40 ee       	ldi	r20, 0xE0	; 224
     334:	6f e0       	ldi	r22, 0x0F	; 15
     336:	ce 01       	movw	r24, r28
     338:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     33c:	6e e0       	ldi	r22, 0x0E	; 14
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     344:	80 7e       	andi	r24, 0xE0	; 224
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 17       	cp	r24, r16
     34a:	91 07       	cpc	r25, r17
     34c:	79 f0       	breq	.+30     	; 0x36c <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x5e>
     34e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <millis>
     352:	dc 01       	movw	r26, r24
     354:	cb 01       	movw	r24, r22
     356:	8c 19       	sub	r24, r12
     358:	9d 09       	sbc	r25, r13
     35a:	ae 09       	sbc	r26, r14
     35c:	bf 09       	sbc	r27, r15
     35e:	89 3c       	cpi	r24, 0xC9	; 201
     360:	91 05       	cpc	r25, r1
     362:	a1 05       	cpc	r26, r1
     364:	b1 05       	cpc	r27, r1
     366:	20 f3       	brcs	.-56     	; 0x330 <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x22>
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	01 c0       	rjmp	.+2      	; 0x36e <_ZN7MCP_CAN22mcp2515_requestNewModeEh+0x60>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	bf 90       	pop	r11
     380:	08 95       	ret

00000382 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>:
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	ec 01       	movw	r28, r24
     38c:	16 2f       	mov	r17, r22
     38e:	0e 94 82 01 	call	0x304	; 0x304 <_ZN7MCP_CAN7getModeEv>
     392:	80 32       	cpi	r24, 0x20	; 32
     394:	21 f5       	brne	.+72     	; 0x3de <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     396:	10 32       	cpi	r17, 0x20	; 32
     398:	11 f1       	breq	.+68     	; 0x3de <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     39a:	6b e2       	ldi	r22, 0x2B	; 43
     39c:	ce 01       	movw	r24, r28
     39e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
     3a2:	08 2f       	mov	r16, r24
     3a4:	00 74       	andi	r16, 0x40	; 64
     3a6:	86 fd       	sbrc	r24, 6
     3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x34>
     3aa:	20 e4       	ldi	r18, 0x40	; 64
     3ac:	40 e4       	ldi	r20, 0x40	; 64
     3ae:	6b e2       	ldi	r22, 0x2B	; 43
     3b0:	ce 01       	movw	r24, r28
     3b2:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     3b6:	20 e4       	ldi	r18, 0x40	; 64
     3b8:	40 e4       	ldi	r20, 0x40	; 64
     3ba:	6c e2       	ldi	r22, 0x2C	; 44
     3bc:	ce 01       	movw	r24, r28
     3be:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     3c2:	60 e6       	ldi	r22, 0x60	; 96
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 87 01 	call	0x30e	; 0x30e <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     3ca:	81 11       	cpse	r24, r1
     3cc:	16 c0       	rjmp	.+44     	; 0x3fa <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x78>
     3ce:	01 11       	cpse	r16, r1
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh+0x5c>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	40 e4       	ldi	r20, 0x40	; 64
     3d6:	6b e2       	ldi	r22, 0x2B	; 43
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	40 e4       	ldi	r20, 0x40	; 64
     3e2:	6c e2       	ldi	r22, 0x2C	; 44
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     3ea:	61 2f       	mov	r22, r17
     3ec:	ce 01       	movw	r24, r28
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	0c 94 87 01 	jmp	0x30e	; 0x30e <_ZN7MCP_CAN22mcp2515_requestNewModeEh>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <_ZN7MCP_CAN7setModeEh>:
     406:	60 32       	cpi	r22, 0x20	; 32
     408:	11 f0       	breq	.+4      	; 0x40e <_ZN7MCP_CAN7setModeEh+0x8>
     40a:	fc 01       	movw	r30, r24
     40c:	62 87       	std	Z+10, r22	; 0x0a
     40e:	0c 94 c1 01 	jmp	0x382	; 0x382 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>

00000412 <_ZN7MCP_CAN18mcp2515_configRateEhh>:
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	41 30       	cpi	r20, 0x01	; 1
     41c:	21 f0       	breq	.+8      	; 0x426 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x14>
     41e:	42 30       	cpi	r20, 0x02	; 2
     420:	09 f4       	brne	.+2      	; 0x424 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12>
     422:	3f c0       	rjmp	.+126    	; 0x4a2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x90>
     424:	71 c0       	rjmp	.+226    	; 0x508 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     426:	46 2f       	mov	r20, r22
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	fa 01       	movw	r30, r20
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	e2 31       	cpi	r30, 0x12	; 18
     430:	f1 05       	cpc	r31, r1
     432:	08 f0       	brcs	.+2      	; 0x436 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x24>
     434:	69 c0       	rjmp	.+210    	; 0x508 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     436:	ec 5c       	subi	r30, 0xCC	; 204
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__tablejump2__>
     43e:	c7 e8       	ldi	r28, 0x87	; 135
     440:	df ef       	ldi	r29, 0xFF	; 255
     442:	6e c0       	rjmp	.+220    	; 0x520 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x10e>
     444:	c7 e0       	ldi	r28, 0x07	; 7
     446:	da eb       	ldi	r29, 0xBA	; 186
     448:	67 c0       	rjmp	.+206    	; 0x518 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     44a:	c5 e8       	ldi	r28, 0x85	; 133
     44c:	d1 ef       	ldi	r29, 0xF1	; 241
     44e:	64 c0       	rjmp	.+200    	; 0x518 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     450:	c7 e0       	ldi	r28, 0x07	; 7
     452:	de eb       	ldi	r29, 0xBE	; 190
     454:	49 e0       	ldi	r20, 0x09	; 9
     456:	65 c0       	rjmp	.+202    	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     458:	c7 e8       	ldi	r28, 0x87	; 135
     45a:	df ef       	ldi	r29, 0xFF	; 255
     45c:	35 c0       	rjmp	.+106    	; 0x4c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     45e:	c7 e8       	ldi	r28, 0x87	; 135
     460:	da ef       	ldi	r29, 0xFA	; 250
     462:	32 c0       	rjmp	.+100    	; 0x4c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     464:	c7 e8       	ldi	r28, 0x87	; 135
     466:	df ef       	ldi	r29, 0xFF	; 255
     468:	36 c0       	rjmp	.+108    	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     46a:	c7 e0       	ldi	r28, 0x07	; 7
     46c:	de eb       	ldi	r29, 0xBE	; 190
     46e:	33 c0       	rjmp	.+102    	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     470:	c7 e0       	ldi	r28, 0x07	; 7
     472:	dd ea       	ldi	r29, 0xAD	; 173
     474:	30 c0       	rjmp	.+96     	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     476:	c7 e8       	ldi	r28, 0x87	; 135
     478:	da ef       	ldi	r29, 0xFA	; 250
     47a:	2d c0       	rjmp	.+90     	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     47c:	c6 e8       	ldi	r28, 0x86	; 134
     47e:	d0 ef       	ldi	r29, 0xF0	; 240
     480:	2a c0       	rjmp	.+84     	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     482:	c7 e8       	ldi	r28, 0x87	; 135
     484:	da ef       	ldi	r29, 0xFA	; 250
     486:	2e c0       	rjmp	.+92     	; 0x4e4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     488:	c5 e8       	ldi	r28, 0x85	; 133
     48a:	d1 ef       	ldi	r29, 0xF1	; 241
     48c:	41 e4       	ldi	r20, 0x41	; 65
     48e:	49 c0       	rjmp	.+146    	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     490:	c6 e8       	ldi	r28, 0x86	; 134
     492:	d0 ef       	ldi	r29, 0xF0	; 240
     494:	2e c0       	rjmp	.+92     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     496:	c4 e0       	ldi	r28, 0x04	; 4
     498:	d0 ea       	ldi	r29, 0xA0	; 160
     49a:	2b c0       	rjmp	.+86     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     49c:	c2 e8       	ldi	r28, 0x82	; 130
     49e:	d0 ed       	ldi	r29, 0xD0	; 208
     4a0:	28 c0       	rjmp	.+80     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     4a2:	46 2f       	mov	r20, r22
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	fa 01       	movw	r30, r20
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	e2 31       	cpi	r30, 0x12	; 18
     4ac:	f1 05       	cpc	r31, r1
     4ae:	60 f5       	brcc	.+88     	; 0x508 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xf6>
     4b0:	ea 5b       	subi	r30, 0xBA	; 186
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__tablejump2__>
     4b8:	c7 e0       	ldi	r28, 0x07	; 7
     4ba:	df eb       	ldi	r29, 0xBF	; 191
     4bc:	2d c0       	rjmp	.+90     	; 0x518 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x106>
     4be:	c7 e0       	ldi	r28, 0x07	; 7
     4c0:	df eb       	ldi	r29, 0xBF	; 191
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xb6>
     4c4:	c4 e0       	ldi	r28, 0x04	; 4
     4c6:	d4 ea       	ldi	r29, 0xA4	; 164
     4c8:	47 e0       	ldi	r20, 0x07	; 7
     4ca:	2b c0       	rjmp	.+86     	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     4cc:	c7 e0       	ldi	r28, 0x07	; 7
     4ce:	df eb       	ldi	r29, 0xBF	; 191
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xc4>
     4d2:	c6 e0       	ldi	r28, 0x06	; 6
     4d4:	d4 eb       	ldi	r29, 0xB4	; 180
     4d6:	43 e0       	ldi	r20, 0x03	; 3
     4d8:	24 c0       	rjmp	.+72     	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     4da:	c7 e0       	ldi	r28, 0x07	; 7
     4dc:	df eb       	ldi	r29, 0xBF	; 191
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     4e0:	c6 e0       	ldi	r28, 0x06	; 6
     4e2:	d4 eb       	ldi	r29, 0xB4	; 180
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	1d c0       	rjmp	.+58     	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     4e8:	c5 e0       	ldi	r28, 0x05	; 5
     4ea:	d1 eb       	ldi	r29, 0xB1	; 177
     4ec:	fb cf       	rjmp	.-10     	; 0x4e4 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xd2>
     4ee:	c6 e0       	ldi	r28, 0x06	; 6
     4f0:	d4 eb       	ldi	r29, 0xB4	; 180
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	16 c0       	rjmp	.+44     	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     4f6:	c5 e0       	ldi	r28, 0x05	; 5
     4f8:	d1 eb       	ldi	r29, 0xB1	; 177
     4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     4fc:	c2 e0       	ldi	r28, 0x02	; 2
     4fe:	d0 e9       	ldi	r29, 0x90	; 144
     500:	f8 cf       	rjmp	.-16     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	d0 e8       	ldi	r29, 0x80	; 128
     506:	f5 cf       	rjmp	.-22     	; 0x4f2 <_ZN7MCP_CAN18mcp2515_configRateEhh+0xe0>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	1a c0       	rjmp	.+52     	; 0x540 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x12e>
     50c:	c7 e8       	ldi	r28, 0x87	; 135
     50e:	df ef       	ldi	r29, 0xFF	; 255
     510:	4f e3       	ldi	r20, 0x3F	; 63
     512:	07 c0       	rjmp	.+14     	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     514:	c7 e8       	ldi	r28, 0x87	; 135
     516:	df ef       	ldi	r29, 0xFF	; 255
     518:	4f e0       	ldi	r20, 0x0F	; 15
     51a:	03 c0       	rjmp	.+6      	; 0x522 <_ZN7MCP_CAN18mcp2515_configRateEhh+0x110>
     51c:	c7 e0       	ldi	r28, 0x07	; 7
     51e:	df eb       	ldi	r29, 0xBF	; 191
     520:	4f e1       	ldi	r20, 0x1F	; 31
     522:	8c 01       	movw	r16, r24
     524:	6a e2       	ldi	r22, 0x2A	; 42
     526:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     52a:	4d 2f       	mov	r20, r29
     52c:	69 e2       	ldi	r22, 0x29	; 41
     52e:	c8 01       	movw	r24, r16
     530:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     534:	4c 2f       	mov	r20, r28
     536:	68 e2       	ldi	r22, 0x28	; 40
     538:	c8 01       	movw	r24, r16
     53a:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>:
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	8c 01       	movw	r16, r24
     552:	c0 e3       	ldi	r28, 0x30	; 48
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	6c 2f       	mov	r22, r28
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     55e:	60 e1       	ldi	r22, 0x10	; 16
     560:	6c 0f       	add	r22, r28
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	c8 01       	movw	r24, r16
     566:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     56a:	60 e2       	ldi	r22, 0x20	; 32
     56c:	6c 0f       	add	r22, r28
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	c8 01       	movw	r24, r16
     572:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     576:	cf 5f       	subi	r28, 0xFF	; 255
     578:	ce 33       	cpi	r28, 0x3E	; 62
     57a:	61 f7       	brne	.-40     	; 0x554 <_ZN7MCP_CAN22mcp2515_initCANBuffersEv+0xa>
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 e6       	ldi	r22, 0x60	; 96
     580:	c8 01       	movw	r24, r16
     582:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	60 e7       	ldi	r22, 0x70	; 112
     58a:	c8 01       	movw	r24, r16
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	0c 94 1a 01 	jmp	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>

00000596 <_ZN7MCP_CAN12mcp2515_initEhh>:
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
     5a2:	06 2f       	mov	r16, r22
     5a4:	f4 2e       	mov	r15, r20
     5a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN7MCP_CAN13mcp2515_resetEv>
     5aa:	60 e8       	ldi	r22, 0x80	; 128
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN7MCP_CAN23mcp2515_setCANCTRL_ModeEh>
     5b2:	18 2f       	mov	r17, r24
     5b4:	88 23       	and	r24, r24
     5b6:	19 f0       	breq	.+6      	; 0x5be <_ZN7MCP_CAN12mcp2515_initEhh+0x28>
     5b8:	69 e0       	ldi	r22, 0x09	; 9
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	36 c0       	rjmp	.+108    	; 0x62a <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     5be:	63 e2       	ldi	r22, 0x23	; 35
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	82 ed       	ldi	r24, 0xD2	; 210
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN5Print5printEPKc>
     5ca:	4f 2d       	mov	r20, r15
     5cc:	60 2f       	mov	r22, r16
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 09 02 	call	0x412	; 0x412 <_ZN7MCP_CAN18mcp2515_configRateEhh>
     5d4:	88 23       	and	r24, r24
     5d6:	19 f0       	breq	.+6      	; 0x5de <_ZN7MCP_CAN12mcp2515_initEhh+0x48>
     5d8:	61 e4       	ldi	r22, 0x41	; 65
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	26 c0       	rjmp	.+76     	; 0x62a <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     5de:	63 e5       	ldi	r22, 0x53	; 83
     5e0:	71 e0       	ldi	r23, 0x01	; 1
     5e2:	82 ed       	ldi	r24, 0xD2	; 210
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN5Print5printEPKc>
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN7MCP_CAN22mcp2515_initCANBuffersEv>
     5f0:	43 e0       	ldi	r20, 0x03	; 3
     5f2:	6b e2       	ldi	r22, 0x2B	; 43
     5f4:	ce 01       	movw	r24, r28
     5f6:	0e 94 1a 01 	call	0x234	; 0x234 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
     5fa:	24 e0       	ldi	r18, 0x04	; 4
     5fc:	44 e6       	ldi	r20, 0x64	; 100
     5fe:	60 e6       	ldi	r22, 0x60	; 96
     600:	ce 01       	movw	r24, r28
     602:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	40 e6       	ldi	r20, 0x60	; 96
     60a:	60 e7       	ldi	r22, 0x70	; 112
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	ce 01       	movw	r24, r28
     616:	0e 94 03 02 	call	0x406	; 0x406 <_ZN7MCP_CAN7setModeEh>
     61a:	18 2f       	mov	r17, r24
     61c:	88 23       	and	r24, r24
     61e:	19 f0       	breq	.+6      	; 0x626 <_ZN7MCP_CAN12mcp2515_initEhh+0x90>
     620:	68 e6       	ldi	r22, 0x68	; 104
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	02 c0       	rjmp	.+4      	; 0x62a <_ZN7MCP_CAN12mcp2515_initEhh+0x94>
     626:	63 e8       	ldi	r22, 0x83	; 131
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	82 ed       	ldi	r24, 0xD2	; 210
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN5Print5printEPKc>
     632:	81 2f       	mov	r24, r17
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	08 95       	ret

00000640 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>:
     640:	2f 92       	push	r2
     642:	3f 92       	push	r3
     644:	4f 92       	push	r4
     646:	5f 92       	push	r5
     648:	6f 92       	push	r6
     64a:	7f 92       	push	r7
     64c:	8f 92       	push	r8
     64e:	9f 92       	push	r9
     650:	af 92       	push	r10
     652:	bf 92       	push	r11
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x26>
     666:	00 d0       	rcall	.+0      	; 0x668 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x28>
     668:	1f 92       	push	r1
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	4c 01       	movw	r8, r24
     670:	56 2e       	mov	r5, r22
     672:	5a 01       	movw	r10, r20
     674:	19 01       	movw	r2, r18
     676:	38 01       	movw	r6, r16
     678:	4c 2c       	mov	r4, r12
     67a:	dd 82       	std	Y+5, r13	; 0x05
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	86 81       	ldd	r24, Z+6	; 0x06
     682:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
     686:	85 2d       	mov	r24, r5
     688:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     68c:	8e 01       	movw	r16, r28
     68e:	0f 5f       	subi	r16, 0xFF	; 255
     690:	1f 4f       	sbci	r17, 0xFF	; 255
     692:	6e 01       	movw	r12, r28
     694:	f5 e0       	ldi	r31, 0x05	; 5
     696:	cf 0e       	add	r12, r31
     698:	d1 1c       	adc	r13, r1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     6a0:	f8 01       	movw	r30, r16
     6a2:	81 93       	st	Z+, r24
     6a4:	8f 01       	movw	r16, r30
     6a6:	ec 15       	cp	r30, r12
     6a8:	fd 05       	cpc	r31, r13
     6aa:	b9 f7       	brne	.-18     	; 0x69a <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x5a>
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	39 81       	ldd	r19, Y+1	; 0x01
     6b0:	82 2f       	mov	r24, r18
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	95 95       	asr	r25
     6b8:	87 95       	ror	r24
     6ba:	6a 95       	dec	r22
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x76>
     6be:	f8 e0       	ldi	r31, 0x08	; 8
     6c0:	3f 9f       	mul	r19, r31
     6c2:	80 0d       	add	r24, r0
     6c4:	91 1d       	adc	r25, r1
     6c6:	11 24       	eor	r1, r1
     6c8:	09 2e       	mov	r0, r25
     6ca:	00 0c       	add	r0, r0
     6cc:	aa 0b       	sbc	r26, r26
     6ce:	bb 0b       	sbc	r27, r27
     6d0:	f5 01       	movw	r30, r10
     6d2:	80 83       	st	Z, r24
     6d4:	91 83       	std	Z+1, r25	; 0x01
     6d6:	a2 83       	std	Z+2, r26	; 0x02
     6d8:	b3 83       	std	Z+3, r27	; 0x03
     6da:	f1 01       	movw	r30, r2
     6dc:	10 82       	st	Z, r1
     6de:	23 ff       	sbrs	r18, 3
     6e0:	3a c0       	rjmp	.+116    	; 0x756 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x116>
     6e2:	f5 01       	movw	r30, r10
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	a2 81       	ldd	r26, Z+2	; 0x02
     6ea:	b3 81       	ldd	r27, Z+3	; 0x03
     6ec:	32 e0       	ldi	r19, 0x02	; 2
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	aa 1f       	adc	r26, r26
     6f4:	bb 1f       	adc	r27, r27
     6f6:	3a 95       	dec	r19
     6f8:	d1 f7       	brne	.-12     	; 0x6ee <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0xae>
     6fa:	23 70       	andi	r18, 0x03	; 3
     6fc:	82 0f       	add	r24, r18
     6fe:	91 1d       	adc	r25, r1
     700:	a1 1d       	adc	r26, r1
     702:	b1 1d       	adc	r27, r1
     704:	80 83       	st	Z, r24
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	a2 83       	std	Z+2, r26	; 0x02
     70a:	b3 83       	std	Z+3, r27	; 0x03
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	a2 81       	ldd	r26, Z+2	; 0x02
     712:	b3 81       	ldd	r27, Z+3	; 0x03
     714:	ba 2f       	mov	r27, r26
     716:	a9 2f       	mov	r26, r25
     718:	98 2f       	mov	r25, r24
     71a:	88 27       	eor	r24, r24
     71c:	2b 81       	ldd	r18, Y+3	; 0x03
     71e:	82 0f       	add	r24, r18
     720:	91 1d       	adc	r25, r1
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
     726:	80 83       	st	Z, r24
     728:	91 83       	std	Z+1, r25	; 0x01
     72a:	a2 83       	std	Z+2, r26	; 0x02
     72c:	b3 83       	std	Z+3, r27	; 0x03
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	a2 81       	ldd	r26, Z+2	; 0x02
     734:	b3 81       	ldd	r27, Z+3	; 0x03
     736:	ba 2f       	mov	r27, r26
     738:	a9 2f       	mov	r26, r25
     73a:	98 2f       	mov	r25, r24
     73c:	88 27       	eor	r24, r24
     73e:	2c 81       	ldd	r18, Y+4	; 0x04
     740:	82 0f       	add	r24, r18
     742:	91 1d       	adc	r25, r1
     744:	a1 1d       	adc	r26, r1
     746:	b1 1d       	adc	r27, r1
     748:	80 83       	st	Z, r24
     74a:	91 83       	std	Z+1, r25	; 0x01
     74c:	a2 83       	std	Z+2, r26	; 0x02
     74e:	b3 83       	std	Z+3, r27	; 0x03
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	f1 01       	movw	r30, r2
     754:	80 83       	st	Z, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     75c:	98 2f       	mov	r25, r24
     75e:	9f 70       	andi	r25, 0x0F	; 15
     760:	f7 01       	movw	r30, r14
     762:	90 83       	st	Z, r25
     764:	86 fb       	bst	r24, 6
     766:	88 27       	eor	r24, r24
     768:	80 f9       	bld	r24, 0
     76a:	f3 01       	movw	r30, r6
     76c:	80 83       	st	Z, r24
     76e:	c4 2c       	mov	r12, r4
     770:	dd 80       	ldd	r13, Y+5	; 0x05
     772:	10 e0       	ldi	r17, 0x00	; 0
     774:	f7 01       	movw	r30, r14
     776:	80 81       	ld	r24, Z
     778:	18 17       	cp	r17, r24
     77a:	50 f4       	brcc	.+20     	; 0x790 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     77c:	18 30       	cpi	r17, 0x08	; 8
     77e:	41 f0       	breq	.+16     	; 0x790 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x150>
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN8SPIClass8transferEh>
     786:	f6 01       	movw	r30, r12
     788:	81 93       	st	Z+, r24
     78a:	6f 01       	movw	r12, r30
     78c:	1f 5f       	subi	r17, 0xFF	; 255
     78e:	f2 cf       	rjmp	.-28     	; 0x774 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_+0x134>
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	f4 01       	movw	r30, r8
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	3f 90       	pop	r3
     7c2:	2f 90       	pop	r2
     7c4:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <digitalWrite>

000007c8 <_ZN7MCP_CAN7init_CSEh>:
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
     7ce:	66 23       	and	r22, r22
     7d0:	59 f0       	breq	.+22     	; 0x7e8 <_ZN7MCP_CAN7init_CSEh+0x20>
     7d2:	86 2f       	mov	r24, r22
     7d4:	6e 83       	std	Y+6, r22	; 0x06
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8e 81       	ldd	r24, Y+6	; 0x06
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <digitalWrite>
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <_ZN7MCP_CANC1Eh>:
     7ee:	fc 01       	movw	r30, r24
     7f0:	11 86       	std	Z+9, r1	; 0x09
     7f2:	29 e8       	ldi	r18, 0x89	; 137
     7f4:	33 e0       	ldi	r19, 0x03	; 3
     7f6:	30 87       	std	Z+8, r19	; 0x08
     7f8:	27 83       	std	Z+7, r18	; 0x07
     7fa:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_ZN7MCP_CAN7init_CSEh>

000007fe <_ZN7MCP_CAN5beginEhh>:
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	16 2f       	mov	r17, r22
     80a:	04 2f       	mov	r16, r20
     80c:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN8SPIClass5beginEv>
     810:	40 2f       	mov	r20, r16
     812:	61 2f       	mov	r22, r17
     814:	ce 01       	movw	r24, r28
     816:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN7MCP_CAN12mcp2515_initEhh>
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	81 11       	cpse	r24, r1
     81e:	01 c0       	rjmp	.+2      	; 0x822 <_ZN7MCP_CAN5beginEhh+0x24>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 2f       	mov	r24, r25
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>:
     82e:	6f 92       	push	r6
     830:	7f 92       	push	r7
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
     84c:	5a 01       	movw	r10, r20
     84e:	49 01       	movw	r8, r18
     850:	38 01       	movw	r6, r16
     852:	60 ff       	sbrs	r22, 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x2c>
     856:	60 e9       	ldi	r22, 0x90	; 144
     858:	03 c0       	rjmp	.+6      	; 0x860 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x32>
     85a:	61 ff       	sbrs	r22, 1
     85c:	15 c0       	rjmp	.+42     	; 0x888 <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x5a>
     85e:	64 e9       	ldi	r22, 0x94	; 148
     860:	ce 01       	movw	r24, r28
     862:	0e 94 20 03 	call	0x640	; 0x640 <_ZN7MCP_CAN19mcp2515_read_canMsgEhPVmPVhS3_S3_S3_>
     866:	f3 01       	movw	r30, r6
     868:	80 81       	ld	r24, Z
     86a:	8d 83       	std	Y+5, r24	; 0x05
     86c:	f4 01       	movw	r30, r8
     86e:	80 81       	ld	r24, Z
     870:	88 83       	st	Y, r24
     872:	f5 01       	movw	r30, r10
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	a2 81       	ldd	r26, Z+2	; 0x02
     87a:	b3 81       	ldd	r27, Z+3	; 0x03
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	9a 83       	std	Y+2, r25	; 0x02
     880:	ab 83       	std	Y+3, r26	; 0x03
     882:	bc 83       	std	Y+4, r27	; 0x04
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	03 c0       	rjmp	.+6      	; 0x88e <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_+0x60>
     888:	f7 01       	movw	r30, r14
     88a:	10 82       	st	Z, r1
     88c:	84 e0       	ldi	r24, 0x04	; 4
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	08 95       	ret

000008ac <_ZN7MCP_CAN14readRxTxStatusEv>:
     8ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN7MCP_CAN18mcp2515_readStatusEv>
     8b0:	38 2f       	mov	r19, r24
     8b2:	3b 7a       	andi	r19, 0xAB	; 171
     8b4:	83 fd       	sbrc	r24, 3
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <_ZN7MCP_CAN14readRxTxStatusEv+0x10>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <_ZN7MCP_CAN14readRxTxStatusEv+0x12>
     8bc:	24 e0       	ldi	r18, 0x04	; 4
     8be:	85 fd       	sbrc	r24, 5
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <_ZN7MCP_CAN14readRxTxStatusEv+0x1a>
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <_ZN7MCP_CAN14readRxTxStatusEv+0x1c>
     8c6:	98 e0       	ldi	r25, 0x08	; 8
     8c8:	83 2f       	mov	r24, r19
     8ca:	88 1f       	adc	r24, r24
     8cc:	88 27       	eor	r24, r24
     8ce:	88 1f       	adc	r24, r24
     8d0:	82 95       	swap	r24
     8d2:	80 7f       	andi	r24, 0xF0	; 240
     8d4:	33 70       	andi	r19, 0x03	; 3
     8d6:	23 2b       	or	r18, r19
     8d8:	92 2b       	or	r25, r18
     8da:	89 2b       	or	r24, r25
     8dc:	08 95       	ret

000008de <_ZN7MCP_CAN10readMsgBufEPhS0_>:
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
     8f0:	7b 01       	movw	r14, r22
     8f2:	6a 01       	movw	r12, r20
     8f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN7MCP_CAN14readRxTxStatusEv>
     8f8:	8e 01       	movw	r16, r28
     8fa:	0b 5f       	subi	r16, 0xFB	; 251
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	ae 01       	movw	r20, r28
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	5f 4f       	sbci	r21, 0xFF	; 255
     904:	9e 01       	movw	r18, r28
     906:	68 2f       	mov	r22, r24
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN7MCP_CAN12readMsgBufIDEhPVmPVhS3_S3_S3_>
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	08 95       	ret

00000920 <_ZN7MCP_CAN12checkReceiveEv>:
     920:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN7MCP_CAN18mcp2515_readStatusEv>
     924:	83 70       	andi	r24, 0x03	; 3
     926:	11 f4       	brne	.+4      	; 0x92c <_ZN7MCP_CAN12checkReceiveEv+0xc>
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	08 95       	ret
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	08 95       	ret

00000930 <_ZN7MCP_CAN8getCanIdEv>:
** Function name:           getCanId
** Descriptions:            when receive something, you can get the can id!!
*********************************************************************************************************/
unsigned long MCP_CAN::getCanId(void)
{
    return can_id;
     930:	fc 01       	movw	r30, r24
     932:	61 81       	ldd	r22, Z+1	; 0x01
     934:	72 81       	ldd	r23, Z+2	; 0x02
     936:	83 81       	ldd	r24, Z+3	; 0x03
     938:	94 81       	ldd	r25, Z+4	; 0x04
}
     93a:	08 95       	ret

0000093c <_ZN8SPIClass5beginEv>:


void SPIClass::begin()
{
	// Set SS to high so a connected chip will be "deselected" by default
	digitalWrite(SS, HIGH);
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>

	// When the SS pin is set as OUTPUT, it can be used as
	// a general purpose output port (it doesn't influence
	// SPI operations).
	pinMode(SS, OUTPUT);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	8a e0       	ldi	r24, 0x0A	; 10
     948:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>

	// Warning: if the SS pin ever becomes a LOW INPUT then SPI
	// automatically switches to Slave, so the data direction of
	// the SS pin MUST be kept as OUTPUT.
	SPCR |= _BV(MSTR);
     94c:	8c b5       	in	r24, 0x2c	; 44
     94e:	80 61       	ori	r24, 0x10	; 16
     950:	8c bd       	out	0x2c, r24	; 44
	SPCR |= _BV(SPE);
     952:	8c b5       	in	r24, 0x2c	; 44
     954:	80 64       	ori	r24, 0x40	; 64
     956:	8c bd       	out	0x2c, r24	; 44
	// MISO pin automatically overrides to INPUT.
	// By doing this AFTER enabling SPI, we avoid accidentally
	// clocking in a single bit since the lines go directly
	// from "input" to SPI control.
	// http://code.google.com/p/arduino/issues/detail?id=888
	pinMode(SCK, OUTPUT);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	8d e0       	ldi	r24, 0x0D	; 13
     95c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
	pinMode(MOSI, OUTPUT);
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	8b e0       	ldi	r24, 0x0B	; 11
     964:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <pinMode>

00000968 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     968:	26 e0       	ldi	r18, 0x06	; 6
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	52 ec       	ldi	r21, 0xC2	; 194
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	82 ed       	ldi	r24, 0xD2	; 210
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_ZN14HardwareSerial5beginEmh>
MCP_CAN CAN(spiCSPin);

void setup() {
  //Open roboclaw serial ports
  Serial.begin(115200);
  roboclaw.begin(38400);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	56 e9       	ldi	r21, 0x96	; 150
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	8d e9       	ldi	r24, 0x9D	; 157
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN8RoboClaw5beginEl>
  pinMode(ledPin, OUTPUT);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPin>
     990:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
  pinMode(potPin, INPUT);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <potPin>
     99a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
  setPoint = 4;
     99e:	84 e0       	ldi	r24, 0x04	; 4
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <setPoint+0x1>
     9a6:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <setPoint>
  threshold = 0.1;
     9aa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <threshold+0x1>
     9ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <threshold>
  while (CAN_OK != CAN.begin(CAN_500KBPS))
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	60 e1       	ldi	r22, 0x10	; 16
     9b6:	8a e8       	ldi	r24, 0x8A	; 138
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_ZN7MCP_CAN5beginEhh>
     9be:	88 23       	and	r24, r24
     9c0:	69 f0       	breq	.+26     	; 0x9dc <setup+0x74>
  {
	  Serial.println("CAN BUS Init Failed");
     9c2:	6e e1       	ldi	r22, 0x1E	; 30
     9c4:	73 e0       	ldi	r23, 0x03	; 3
     9c6:	82 ed       	ldi	r24, 0xD2	; 210
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN5Print7printlnEPKc>
	  delay(100);
     9ce:	64 e6       	ldi	r22, 0x64	; 100
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <delay>
  roboclaw.begin(38400);
  pinMode(ledPin, OUTPUT);
  pinMode(potPin, INPUT);
  setPoint = 4;
  threshold = 0.1;
  while (CAN_OK != CAN.begin(CAN_500KBPS))
     9da:	eb cf       	rjmp	.-42     	; 0x9b2 <setup+0x4a>
  {
	  Serial.println("CAN BUS Init Failed");
	  delay(100);
  }
  Serial.println("CAN BUS  Init OK!");
     9dc:	62 e3       	ldi	r22, 0x32	; 50
     9de:	73 e0       	ldi	r23, 0x03	; 3
     9e0:	82 ed       	ldi	r24, 0xD2	; 210
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <_ZN5Print7printlnEPKc>

000009e8 <loop>:
  //setPoint = 0;
}
 
void loop() {
     9e8:	4f 92       	push	r4
     9ea:	5f 92       	push	r5
     9ec:	6f 92       	push	r6
     9ee:	7f 92       	push	r7
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	29 97       	sbiw	r28, 0x09	; 9
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
  digitalWrite(ledPin, LOW);
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPin>
     a1a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
  unsigned char len = 0;
     a1e:	19 86       	std	Y+9, r1	; 0x09
  unsigned char buf[8];
	
  if(CAN_MSGAVAIL == CAN.checkReceive())
     a20:	8a e8       	ldi	r24, 0x8A	; 138
     a22:	93 e0       	ldi	r25, 0x03	; 3
     a24:	0e 94 90 04 	call	0x920	; 0x920 <_ZN7MCP_CAN12checkReceiveEv>
     a28:	83 30       	cpi	r24, 0x03	; 3
     a2a:	09 f0       	breq	.+2      	; 0xa2e <loop+0x46>
     a2c:	bf c0       	rjmp	.+382    	; 0xbac <loop+0x1c4>
  {
	  CAN.readMsgBuf(&len, buf);
     a2e:	ae 01       	movw	r20, r28
     a30:	4f 5f       	subi	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	be 01       	movw	r22, r28
     a36:	67 5f       	subi	r22, 0xF7	; 247
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	8a e8       	ldi	r24, 0x8A	; 138
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN7MCP_CAN10readMsgBufEPhS0_>
	  unsigned long canId = CAN.getCanId();
     a42:	8a e8       	ldi	r24, 0x8A	; 138
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 98 04 	call	0x930	; 0x930 <_ZN7MCP_CAN8getCanIdEv>
	 
	 val = analogRead(potPin);
     a4a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <potPin>
     a4e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <analogRead>
     a52:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <val+0x1>
     a56:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <val>
	 pos = map(val, 0, 1023, 0, 5);
     a5a:	bc 01       	movw	r22, r24
     a5c:	99 0f       	add	r25, r25
     a5e:	88 0b       	sbc	r24, r24
     a60:	99 0b       	sbc	r25, r25
     a62:	1f 92       	push	r1
     a64:	1f 92       	push	r1
     a66:	1f 92       	push	r1
     a68:	25 e0       	ldi	r18, 0x05	; 5
     a6a:	72 2e       	mov	r7, r18
     a6c:	7f 92       	push	r7
     a6e:	a1 2c       	mov	r10, r1
     a70:	b1 2c       	mov	r11, r1
     a72:	65 01       	movw	r12, r10
     a74:	ee 24       	eor	r14, r14
     a76:	ea 94       	dec	r14
     a78:	13 e0       	ldi	r17, 0x03	; 3
     a7a:	f1 2e       	mov	r15, r17
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	a9 01       	movw	r20, r18
     a86:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_Z3maplllll>
     a8a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     a8e:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <pos>
     a92:	70 93 98 03 	sts	0x0398, r23	; 0x800398 <pos+0x1>
     a96:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <pos+0x2>
     a9a:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <pos+0x3>
	 setPoint = map(buf[0], 0, 65536, 0, 5);
     a9e:	69 81       	ldd	r22, Y+1	; 0x01
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	1f 92       	push	r1
     aa8:	1f 92       	push	r1
     aaa:	1f 92       	push	r1
     aac:	7f 92       	push	r7
     aae:	e1 2c       	mov	r14, r1
     ab0:	f1 2c       	mov	r15, r1
     ab2:	01 e0       	ldi	r16, 0x01	; 1
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	a9 01       	movw	r20, r18
     abc:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_Z3maplllll>
     ac0:	70 93 96 03 	sts	0x0396, r23	; 0x800396 <setPoint+0x1>
     ac4:	60 93 95 03 	sts	0x0395, r22	; 0x800395 <setPoint>
	 digitalWrite(ledPin, HIGH);
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ledPin>
     ace:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
	 if (pos >= (setPoint - threshold) && pos <= (setPoint + threshold)) {
     ad2:	a0 90 95 03 	lds	r10, 0x0395	; 0x800395 <setPoint>
     ad6:	b0 90 96 03 	lds	r11, 0x0396	; 0x800396 <setPoint+0x1>
     ada:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <threshold>
     ade:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <threshold+0x1>
     ae2:	b5 01       	movw	r22, r10
     ae4:	60 1b       	sub	r22, r16
     ae6:	71 0b       	sbc	r23, r17
     ae8:	07 2e       	mov	r0, r23
     aea:	00 0c       	add	r0, r0
     aec:	88 0b       	sbc	r24, r24
     aee:	99 0b       	sbc	r25, r25
     af0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     af4:	2b 01       	movw	r4, r22
     af6:	3c 01       	movw	r6, r24
     af8:	c0 90 97 03 	lds	r12, 0x0397	; 0x800397 <pos>
     afc:	d0 90 98 03 	lds	r13, 0x0398	; 0x800398 <pos+0x1>
     b00:	e0 90 99 03 	lds	r14, 0x0399	; 0x800399 <pos+0x2>
     b04:	f0 90 9a 03 	lds	r15, 0x039A	; 0x80039a <pos+0x3>
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	a7 01       	movw	r20, r14
     b14:	96 01       	movw	r18, r12
     b16:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
     b1a:	18 16       	cp	r1, r24
     b1c:	9c f0       	brlt	.+38     	; 0xb44 <loop+0x15c>
     b1e:	b5 01       	movw	r22, r10
     b20:	60 0f       	add	r22, r16
     b22:	71 1f       	adc	r23, r17
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     b30:	9b 01       	movw	r18, r22
     b32:	ac 01       	movw	r20, r24
     b34:	c7 01       	movw	r24, r14
     b36:	b6 01       	movw	r22, r12
     b38:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
     b3c:	18 16       	cp	r1, r24
     b3e:	14 f0       	brlt	.+4      	; 0xb44 <loop+0x15c>
		 roboclaw.ForwardM1(address,0);
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	09 c0       	rjmp	.+18     	; 0xb56 <loop+0x16e>
		 Serial.print(pos);
	 }
	 else if (pos > (setPoint - threshold)){
     b44:	a7 01       	movw	r20, r14
     b46:	96 01       	movw	r18, r12
     b48:	c3 01       	movw	r24, r6
     b4a:	b2 01       	movw	r22, r4
     b4c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
     b50:	87 ff       	sbrs	r24, 7
     b52:	07 c0       	rjmp	.+14     	; 0xb62 <loop+0x17a>
		 roboclaw.ForwardM1(address, 70);
     b54:	46 e4       	ldi	r20, 0x46	; 70
     b56:	60 e8       	ldi	r22, 0x80	; 128
     b58:	8d e9       	ldi	r24, 0x9D	; 157
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 88 07 	call	0xf10	; 0xf10 <_ZN8RoboClaw9ForwardM1Ehh>
     b60:	17 c0       	rjmp	.+46     	; 0xb90 <loop+0x1a8>
		 Serial.print(pos);
	 }
	 else if (pos < (setPoint + threshold)){
     b62:	b5 01       	movw	r22, r10
     b64:	60 0f       	add	r22, r16
     b66:	71 1f       	adc	r23, r17
     b68:	07 2e       	mov	r0, r23
     b6a:	00 0c       	add	r0, r0
     b6c:	88 0b       	sbc	r24, r24
     b6e:	99 0b       	sbc	r25, r25
     b70:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__floatsisf>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
     b80:	87 ff       	sbrs	r24, 7
     b82:	14 c0       	rjmp	.+40     	; 0xbac <loop+0x1c4>
		 roboclaw.BackwardM1(address, 50);
     b84:	42 e3       	ldi	r20, 0x32	; 50
     b86:	60 e8       	ldi	r22, 0x80	; 128
     b88:	8d e9       	ldi	r24, 0x9D	; 157
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN8RoboClaw10BackwardM1Ehh>
		 Serial.print(pos);
     b90:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <pos>
     b94:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <pos+0x1>
     b98:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <pos+0x2>
     b9c:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <pos+0x3>
     ba0:	22 e0       	ldi	r18, 0x02	; 2
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	82 ed       	ldi	r24, 0xD2	; 210
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN5Print5printEdi>
	 }
  }
}
     bac:	29 96       	adiw	r28, 0x09	; 9
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	bf 90       	pop	r11
     bca:	af 90       	pop	r10
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	5f 90       	pop	r5
     bd2:	4f 90       	pop	r4
     bd4:	08 95       	ret

00000bd6 <_GLOBAL__sub_I_serial>:
#include "RoboClaw.h"
#include "SPI.h"
#include "mcp_can.h"

//See limitations of Arduino SoftwareSerial
SoftwareSerial serial(0,1);	
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	83 eb       	ldi	r24, 0xB3	; 179
     bde:	93 e0       	ldi	r25, 0x03	; 3
     be0:	0e 94 17 10 	call	0x202e	; 0x202e <_ZN14SoftwareSerialC1Ehhb>
RoboClaw roboclaw = RoboClaw(&serial,10000);
     be4:	20 e1       	ldi	r18, 0x10	; 16
     be6:	37 e2       	ldi	r19, 0x27	; 39
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	63 eb       	ldi	r22, 0xB3	; 179
     bee:	73 e0       	ldi	r23, 0x03	; 3
     bf0:	8d e9       	ldi	r24, 0x9D	; 157
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN8RoboClawC1EP14SoftwareSerialm>
float pos = 0;
int threshold = 1;
int setPoint = 0;
int spiCSPin = 10;

MCP_CAN CAN(spiCSPin);
     bf8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     bfc:	8a e8       	ldi	r24, 0x8A	; 138
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_ZN7MCP_CANC1Eh>

00000c04 <_GLOBAL__sub_D_serial>:
#include "SPI.h"
#include "mcp_can.h"

//See limitations of Arduino SoftwareSerial
SoftwareSerial serial(0,1);	
RoboClaw roboclaw = RoboClaw(&serial,10000);
     c04:	8d e9       	ldi	r24, 0x9D	; 157
     c06:	93 e0       	ldi	r25, 0x03	; 3
     c08:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN8RoboClawD1Ev>
#include "RoboClaw.h"
#include "SPI.h"
#include "mcp_can.h"

//See limitations of Arduino SoftwareSerial
SoftwareSerial serial(0,1);	
     c0c:	83 eb       	ldi	r24, 0xB3	; 179
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <_ZN14SoftwareSerialD1Ev>

00000c14 <_ZN5Print17availableForWriteEv>:
			}
		}
	}while(trys--);

	return false;
}
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	08 95       	ret

00000c1a <_ZN8RoboClaw5flushEv>:
     c1a:	dc 01       	movw	r26, r24
     c1c:	52 96       	adiw	r26, 0x12	; 18
     c1e:	8d 91       	ld	r24, X+
     c20:	9c 91       	ld	r25, X
     c22:	53 97       	sbiw	r26, 0x13	; 19
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	39 f0       	breq	.+14     	; 0xc36 <_ZN8RoboClaw5flushEv+0x1c>
     c28:	dc 01       	movw	r26, r24
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	06 80       	ldd	r0, Z+6	; 0x06
     c30:	f7 81       	ldd	r31, Z+7	; 0x07
     c32:	e0 2d       	mov	r30, r0
     c34:	09 94       	ijmp
     c36:	08 95       	ret

00000c38 <_ZN8RoboClaw9availableEv>:
     c38:	fc 01       	movw	r30, r24
     c3a:	a2 89       	ldd	r26, Z+18	; 0x12
     c3c:	b3 89       	ldd	r27, Z+19	; 0x13
     c3e:	10 97       	sbiw	r26, 0x00	; 0
     c40:	41 f0       	breq	.+16     	; 0xc52 <_ZN8RoboClaw9availableEv+0x1a>
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	00 84       	ldd	r0, Z+8	; 0x08
     c4a:	f1 85       	ldd	r31, Z+9	; 0x09
     c4c:	e0 2d       	mov	r30, r0
     c4e:	cd 01       	movw	r24, r26
     c50:	08 c0       	rjmp	.+16     	; 0xc62 <_ZN8RoboClaw9availableEv+0x2a>
     c52:	84 89       	ldd	r24, Z+20	; 0x14
     c54:	95 89       	ldd	r25, Z+21	; 0x15
     c56:	dc 01       	movw	r26, r24
     c58:	ed 91       	ld	r30, X+
     c5a:	fc 91       	ld	r31, X
     c5c:	00 84       	ldd	r0, Z+8	; 0x08
     c5e:	f1 85       	ldd	r31, Z+9	; 0x09
     c60:	e0 2d       	mov	r30, r0
     c62:	09 94       	ijmp

00000c64 <_ZN8RoboClaw4readEv>:
     c64:	fc 01       	movw	r30, r24
     c66:	a2 89       	ldd	r26, Z+18	; 0x12
     c68:	b3 89       	ldd	r27, Z+19	; 0x13
     c6a:	10 97       	sbiw	r26, 0x00	; 0
     c6c:	41 f0       	breq	.+16     	; 0xc7e <_ZN8RoboClaw4readEv+0x1a>
     c6e:	ed 91       	ld	r30, X+
     c70:	fc 91       	ld	r31, X
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	02 84       	ldd	r0, Z+10	; 0x0a
     c76:	f3 85       	ldd	r31, Z+11	; 0x0b
     c78:	e0 2d       	mov	r30, r0
     c7a:	cd 01       	movw	r24, r26
     c7c:	08 c0       	rjmp	.+16     	; 0xc8e <_ZN8RoboClaw4readEv+0x2a>
     c7e:	84 89       	ldd	r24, Z+20	; 0x14
     c80:	95 89       	ldd	r25, Z+21	; 0x15
     c82:	dc 01       	movw	r26, r24
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	02 84       	ldd	r0, Z+10	; 0x0a
     c8a:	f3 85       	ldd	r31, Z+11	; 0x0b
     c8c:	e0 2d       	mov	r30, r0
     c8e:	09 94       	ijmp

00000c90 <_ZN8RoboClaw5writeEh>:
     c90:	fc 01       	movw	r30, r24
     c92:	a2 89       	ldd	r26, Z+18	; 0x12
     c94:	b3 89       	ldd	r27, Z+19	; 0x13
     c96:	10 97       	sbiw	r26, 0x00	; 0
     c98:	41 f0       	breq	.+16     	; 0xcaa <_ZN8RoboClaw5writeEh+0x1a>
     c9a:	ed 91       	ld	r30, X+
     c9c:	fc 91       	ld	r31, X
     c9e:	11 97       	sbiw	r26, 0x01	; 1
     ca0:	01 90       	ld	r0, Z+
     ca2:	f0 81       	ld	r31, Z
     ca4:	e0 2d       	mov	r30, r0
     ca6:	cd 01       	movw	r24, r26
     ca8:	08 c0       	rjmp	.+16     	; 0xcba <_ZN8RoboClaw5writeEh+0x2a>
     caa:	84 89       	ldd	r24, Z+20	; 0x14
     cac:	95 89       	ldd	r25, Z+21	; 0x15
     cae:	dc 01       	movw	r26, r24
     cb0:	ed 91       	ld	r30, X+
     cb2:	fc 91       	ld	r31, X
     cb4:	01 90       	ld	r0, Z+
     cb6:	f0 81       	ld	r31, Z
     cb8:	e0 2d       	mov	r30, r0
     cba:	09 94       	ijmp

00000cbc <_ZN8RoboClaw4peekEv>:
     cbc:	fc 01       	movw	r30, r24
     cbe:	a2 89       	ldd	r26, Z+18	; 0x12
     cc0:	b3 89       	ldd	r27, Z+19	; 0x13
     cc2:	10 97       	sbiw	r26, 0x00	; 0
     cc4:	41 f0       	breq	.+16     	; 0xcd6 <_ZN8RoboClaw4peekEv+0x1a>
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	04 84       	ldd	r0, Z+12	; 0x0c
     cce:	f5 85       	ldd	r31, Z+13	; 0x0d
     cd0:	e0 2d       	mov	r30, r0
     cd2:	cd 01       	movw	r24, r26
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <_ZN8RoboClaw4peekEv+0x2a>
     cd6:	84 89       	ldd	r24, Z+20	; 0x14
     cd8:	95 89       	ldd	r25, Z+21	; 0x15
     cda:	dc 01       	movw	r26, r24
     cdc:	ed 91       	ld	r30, X+
     cde:	fc 91       	ld	r31, X
     ce0:	04 84       	ldd	r0, Z+12	; 0x0c
     ce2:	f5 85       	ldd	r31, Z+13	; 0x0d
     ce4:	e0 2d       	mov	r30, r0
     ce6:	09 94       	ijmp

00000ce8 <_ZN8RoboClawC1EP14SoftwareSerialm>:
     ce8:	fc 01       	movw	r30, r24
     cea:	13 82       	std	Z+3, r1	; 0x03
     cec:	12 82       	std	Z+2, r1	; 0x02
     cee:	88 ee       	ldi	r24, 0xE8	; 232
     cf0:	93 e0       	ldi	r25, 0x03	; 3
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	84 83       	std	Z+4, r24	; 0x04
     cf8:	95 83       	std	Z+5, r25	; 0x05
     cfa:	a6 83       	std	Z+6, r26	; 0x06
     cfc:	b7 83       	std	Z+7, r27	; 0x07
     cfe:	88 e4       	ldi	r24, 0x48	; 72
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	26 87       	std	Z+14, r18	; 0x0e
     d08:	37 87       	std	Z+15, r19	; 0x0f
     d0a:	40 8b       	std	Z+16, r20	; 0x10
     d0c:	51 8b       	std	Z+17, r21	; 0x11
     d0e:	75 8b       	std	Z+21, r23	; 0x15
     d10:	64 8b       	std	Z+20, r22	; 0x14
     d12:	13 8a       	std	Z+19, r1	; 0x13
     d14:	12 8a       	std	Z+18, r1	; 0x12
     d16:	08 95       	ret

00000d18 <_ZN8RoboClawD1Ev>:
     d18:	08 95       	ret

00000d1a <_ZN8RoboClaw5beginEl>:
     d1a:	fc 01       	movw	r30, r24
     d1c:	82 89       	ldd	r24, Z+18	; 0x12
     d1e:	93 89       	ldd	r25, Z+19	; 0x13
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	19 f0       	breq	.+6      	; 0xd2a <_ZN8RoboClaw5beginEl+0x10>
     d24:	26 e0       	ldi	r18, 0x06	; 6
     d26:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <_ZN14HardwareSerial5beginEmh>
     d2a:	84 89       	ldd	r24, Z+20	; 0x14
     d2c:	95 89       	ldd	r25, Z+21	; 0x15
     d2e:	0c 94 42 10 	jmp	0x2084	; 0x2084 <_ZN14SoftwareSerial5beginEl>

00000d32 <_ZN8RoboClaw4readEm>:
     d32:	8f 92       	push	r8
     d34:	9f 92       	push	r9
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
     d48:	6a 01       	movw	r12, r20
     d4a:	7b 01       	movw	r14, r22
     d4c:	8a 89       	ldd	r24, Y+18	; 0x12
     d4e:	9b 89       	ldd	r25, Y+19	; 0x13
     d50:	89 2b       	or	r24, r25
     d52:	01 f1       	breq	.+64     	; 0xd94 <_ZN8RoboClaw4readEm+0x62>
     d54:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
     d58:	4b 01       	movw	r8, r22
     d5a:	5c 01       	movw	r10, r24
     d5c:	8a 89       	ldd	r24, Y+18	; 0x12
     d5e:	9b 89       	ldd	r25, Y+19	; 0x13
     d60:	dc 01       	movw	r26, r24
     d62:	ed 91       	ld	r30, X+
     d64:	fc 91       	ld	r31, X
     d66:	00 84       	ldd	r0, Z+8	; 0x08
     d68:	f1 85       	ldd	r31, Z+9	; 0x09
     d6a:	e0 2d       	mov	r30, r0
     d6c:	09 95       	icall
     d6e:	89 2b       	or	r24, r25
     d70:	71 f4       	brne	.+28     	; 0xd8e <_ZN8RoboClaw4readEm+0x5c>
     d72:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	88 19       	sub	r24, r8
     d7c:	99 09       	sbc	r25, r9
     d7e:	aa 09       	sbc	r26, r10
     d80:	bb 09       	sbc	r27, r11
     d82:	8c 15       	cp	r24, r12
     d84:	9d 05       	cpc	r25, r13
     d86:	ae 05       	cpc	r26, r14
     d88:	bf 05       	cpc	r27, r15
     d8a:	40 f3       	brcs	.-48     	; 0xd5c <_ZN8RoboClaw4readEm+0x2a>
     d8c:	3d c0       	rjmp	.+122    	; 0xe08 <_ZN8RoboClaw4readEm+0xd6>
     d8e:	8a 89       	ldd	r24, Y+18	; 0x12
     d90:	9b 89       	ldd	r25, Y+19	; 0x13
     d92:	28 c0       	rjmp	.+80     	; 0xde4 <_ZN8RoboClaw4readEm+0xb2>
     d94:	2c 89       	ldd	r18, Y+20	; 0x14
     d96:	3d 89       	ldd	r19, Y+21	; 0x15
     d98:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
     d9c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
     da0:	28 17       	cp	r18, r24
     da2:	39 07       	cpc	r19, r25
     da4:	81 f5       	brne	.+96     	; 0xe06 <_ZN8RoboClaw4readEm+0xd4>
     da6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
     daa:	4b 01       	movw	r8, r22
     dac:	5c 01       	movw	r10, r24
     dae:	8c 89       	ldd	r24, Y+20	; 0x14
     db0:	9d 89       	ldd	r25, Y+21	; 0x15
     db2:	dc 01       	movw	r26, r24
     db4:	ed 91       	ld	r30, X+
     db6:	fc 91       	ld	r31, X
     db8:	00 84       	ldd	r0, Z+8	; 0x08
     dba:	f1 85       	ldd	r31, Z+9	; 0x09
     dbc:	e0 2d       	mov	r30, r0
     dbe:	09 95       	icall
     dc0:	89 2b       	or	r24, r25
     dc2:	71 f4       	brne	.+28     	; 0xde0 <_ZN8RoboClaw4readEm+0xae>
     dc4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	88 19       	sub	r24, r8
     dce:	99 09       	sbc	r25, r9
     dd0:	aa 09       	sbc	r26, r10
     dd2:	bb 09       	sbc	r27, r11
     dd4:	8c 15       	cp	r24, r12
     dd6:	9d 05       	cpc	r25, r13
     dd8:	ae 05       	cpc	r26, r14
     dda:	bf 05       	cpc	r27, r15
     ddc:	40 f3       	brcs	.-48     	; 0xdae <_ZN8RoboClaw4readEm+0x7c>
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <_ZN8RoboClaw4readEm+0xd6>
     de0:	8c 89       	ldd	r24, Y+20	; 0x14
     de2:	9d 89       	ldd	r25, Y+21	; 0x15
     de4:	dc 01       	movw	r26, r24
     de6:	ed 91       	ld	r30, X+
     de8:	fc 91       	ld	r31, X
     dea:	02 84       	ldd	r0, Z+10	; 0x0a
     dec:	f3 85       	ldd	r31, Z+11	; 0x0b
     dee:	e0 2d       	mov	r30, r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	9f 90       	pop	r9
     e02:	8f 90       	pop	r8
     e04:	09 94       	ijmp
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <_ZN8RoboClaw4readEm+0xda>
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	9f ef       	ldi	r25, 0xFF	; 255
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	08 95       	ret

00000e22 <_ZN8RoboClaw10crc_updateEh>:
     e22:	fc 01       	movw	r30, r24
     e24:	84 85       	ldd	r24, Z+12	; 0x0c
     e26:	95 85       	ldd	r25, Z+13	; 0x0d
     e28:	96 27       	eor	r25, r22
     e2a:	95 87       	std	Z+13, r25	; 0x0d
     e2c:	84 87       	std	Z+12, r24	; 0x0c
     e2e:	28 e0       	ldi	r18, 0x08	; 8
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	44 85       	ldd	r20, Z+12	; 0x0c
     e34:	55 85       	ldd	r21, Z+13	; 0x0d
     e36:	ca 01       	movw	r24, r20
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	57 ff       	sbrs	r21, 7
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <_ZN8RoboClaw10crc_updateEh+0x26>
     e40:	41 e2       	ldi	r20, 0x21	; 33
     e42:	84 27       	eor	r24, r20
     e44:	40 e1       	ldi	r20, 0x10	; 16
     e46:	94 27       	eor	r25, r20
     e48:	95 87       	std	Z+13, r25	; 0x0d
     e4a:	84 87       	std	Z+12, r24	; 0x0c
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	81 f7       	brne	.-32     	; 0xe32 <_ZN8RoboClaw10crc_updateEh+0x10>
     e52:	08 95       	ret

00000e54 <_ZN8RoboClaw7write_nEhz>:
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	0c 85       	ldd	r16, Y+12	; 0x0c
     e6c:	1d 85       	ldd	r17, Y+13	; 0x0d
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	f8 2e       	mov	r15, r24
     e72:	d8 01       	movw	r26, r16
     e74:	1d 96       	adiw	r26, 0x0d	; 13
     e76:	1c 92       	st	X, r1
     e78:	1e 92       	st	-X, r1
     e7a:	1c 97       	sbiw	r26, 0x0c	; 12
     e7c:	fe 01       	movw	r30, r28
     e7e:	3f 96       	adiw	r30, 0x0f	; 15
     e80:	e1 2c       	mov	r14, r1
     e82:	be 85       	ldd	r27, Y+14	; 0x0e
     e84:	eb 16       	cp	r14, r27
     e86:	a9 f0       	breq	.+42     	; 0xeb2 <_ZN8RoboClaw7write_nEhz+0x5e>
     e88:	5f 01       	movw	r10, r30
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	a8 0e       	add	r10, r24
     e8e:	b1 1c       	adc	r11, r1
     e90:	d0 80       	ld	r13, Z
     e92:	6d 2d       	mov	r22, r13
     e94:	c8 01       	movw	r24, r16
     e96:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN8RoboClaw10crc_updateEh>
     e9a:	d8 01       	movw	r26, r16
     e9c:	ed 91       	ld	r30, X+
     e9e:	fc 91       	ld	r31, X
     ea0:	01 90       	ld	r0, Z+
     ea2:	f0 81       	ld	r31, Z
     ea4:	e0 2d       	mov	r30, r0
     ea6:	6d 2d       	mov	r22, r13
     ea8:	c8 01       	movw	r24, r16
     eaa:	09 95       	icall
     eac:	e3 94       	inc	r14
     eae:	f5 01       	movw	r30, r10
     eb0:	e8 cf       	rjmp	.-48     	; 0xe82 <_ZN8RoboClaw7write_nEhz+0x2e>
     eb2:	f8 01       	movw	r30, r16
     eb4:	e4 84       	ldd	r14, Z+12	; 0x0c
     eb6:	65 85       	ldd	r22, Z+13	; 0x0d
     eb8:	01 90       	ld	r0, Z+
     eba:	f0 81       	ld	r31, Z
     ebc:	e0 2d       	mov	r30, r0
     ebe:	01 90       	ld	r0, Z+
     ec0:	f0 81       	ld	r31, Z
     ec2:	e0 2d       	mov	r30, r0
     ec4:	c8 01       	movw	r24, r16
     ec6:	09 95       	icall
     ec8:	d8 01       	movw	r26, r16
     eca:	ed 91       	ld	r30, X+
     ecc:	fc 91       	ld	r31, X
     ece:	01 90       	ld	r0, Z+
     ed0:	f0 81       	ld	r31, Z
     ed2:	e0 2d       	mov	r30, r0
     ed4:	6e 2d       	mov	r22, r14
     ed6:	c8 01       	movw	r24, r16
     ed8:	09 95       	icall
     eda:	f8 01       	movw	r30, r16
     edc:	46 85       	ldd	r20, Z+14	; 0x0e
     ede:	57 85       	ldd	r21, Z+15	; 0x0f
     ee0:	60 89       	ldd	r22, Z+16	; 0x10
     ee2:	71 89       	ldd	r23, Z+17	; 0x11
     ee4:	c8 01       	movw	r24, r16
     ee6:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN8RoboClaw4readEm>
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	91 05       	cpc	r25, r1
     eee:	29 f0       	breq	.+10     	; 0xefa <_ZN8RoboClaw7write_nEhz+0xa6>
     ef0:	fa 94       	dec	r15
     ef2:	f1 10       	cpse	r15, r1
     ef4:	be cf       	rjmp	.-132    	; 0xe72 <_ZN8RoboClaw7write_nEhz+0x1e>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <_ZN8RoboClaw7write_nEhz+0xa8>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	df 90       	pop	r13
     f0a:	bf 90       	pop	r11
     f0c:	af 90       	pop	r10
     f0e:	08 95       	ret

00000f10 <_ZN8RoboClaw9ForwardM1Ehh>:

bool RoboClaw::ForwardM1(uint8_t address, uint8_t speed){
	return write_n(3,address,M1FORWARD,speed);
     f10:	1f 92       	push	r1
     f12:	4f 93       	push	r20
     f14:	1f 92       	push	r1
     f16:	1f 92       	push	r1
     f18:	1f 92       	push	r1
     f1a:	6f 93       	push	r22
     f1c:	23 e0       	ldi	r18, 0x03	; 3
     f1e:	2f 93       	push	r18
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN8RoboClaw7write_nEhz>
     f28:	2d b7       	in	r18, 0x3d	; 61
     f2a:	3e b7       	in	r19, 0x3e	; 62
     f2c:	27 5f       	subi	r18, 0xF7	; 247
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	3e bf       	out	0x3e, r19	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	2d bf       	out	0x3d, r18	; 61
}
     f3a:	08 95       	ret

00000f3c <_ZN8RoboClaw10BackwardM1Ehh>:

bool RoboClaw::BackwardM1(uint8_t address, uint8_t speed){
	return write_n(3,address,M1BACKWARD,speed);
     f3c:	1f 92       	push	r1
     f3e:	4f 93       	push	r20
     f40:	1f 92       	push	r1
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	2f 93       	push	r18
     f46:	1f 92       	push	r1
     f48:	6f 93       	push	r22
     f4a:	23 e0       	ldi	r18, 0x03	; 3
     f4c:	2f 93       	push	r18
     f4e:	9f 93       	push	r25
     f50:	8f 93       	push	r24
     f52:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN8RoboClaw7write_nEhz>
     f56:	2d b7       	in	r18, 0x3d	; 61
     f58:	3e b7       	in	r19, 0x3e	; 62
     f5a:	27 5f       	subi	r18, 0xF7	; 247
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	3e bf       	out	0x3e, r19	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	2d bf       	out	0x3d, r18	; 61
}
     f68:	08 95       	ret

00000f6a <__cmpsf2>:
     f6a:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_cmp>
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <__cmpsf2+0x8>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	08 95       	ret

00000f74 <__fixunssfsi>:
     f74:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_splitA>
     f78:	88 f0       	brcs	.+34     	; 0xf9c <__fixunssfsi+0x28>
     f7a:	9f 57       	subi	r25, 0x7F	; 127
     f7c:	98 f0       	brcs	.+38     	; 0xfa4 <__fixunssfsi+0x30>
     f7e:	b9 2f       	mov	r27, r25
     f80:	99 27       	eor	r25, r25
     f82:	b7 51       	subi	r27, 0x17	; 23
     f84:	b0 f0       	brcs	.+44     	; 0xfb2 <__fixunssfsi+0x3e>
     f86:	e1 f0       	breq	.+56     	; 0xfc0 <__fixunssfsi+0x4c>
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	1a f0       	brmi	.+6      	; 0xf98 <__fixunssfsi+0x24>
     f92:	ba 95       	dec	r27
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__fixunssfsi+0x14>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <__fixunssfsi+0x4c>
     f98:	b1 30       	cpi	r27, 0x01	; 1
     f9a:	91 f0       	breq	.+36     	; 0xfc0 <__fixunssfsi+0x4c>
     f9c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_zero>
     fa0:	b1 e0       	ldi	r27, 0x01	; 1
     fa2:	08 95       	ret
     fa4:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_zero>
     fa8:	67 2f       	mov	r22, r23
     faa:	78 2f       	mov	r23, r24
     fac:	88 27       	eor	r24, r24
     fae:	b8 5f       	subi	r27, 0xF8	; 248
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <__fixunssfsi+0x4c>
     fb2:	b9 3f       	cpi	r27, 0xF9	; 249
     fb4:	cc f3       	brlt	.-14     	; 0xfa8 <__fixunssfsi+0x34>
     fb6:	86 95       	lsr	r24
     fb8:	77 95       	ror	r23
     fba:	67 95       	ror	r22
     fbc:	b3 95       	inc	r27
     fbe:	d9 f7       	brne	.-10     	; 0xfb6 <__fixunssfsi+0x42>
     fc0:	3e f4       	brtc	.+14     	; 0xfd0 <__fixunssfsi+0x5c>
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	08 95       	ret

00000fd2 <__floatunsisf>:
     fd2:	e8 94       	clt
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <__floatsisf+0x12>

00000fd6 <__floatsisf>:
     fd6:	97 fb       	bst	r25, 7
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__floatsisf+0x12>
     fda:	90 95       	com	r25
     fdc:	80 95       	com	r24
     fde:	70 95       	com	r23
     fe0:	61 95       	neg	r22
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	99 23       	and	r25, r25
     fea:	a9 f0       	breq	.+42     	; 0x1016 <__floatsisf+0x40>
     fec:	f9 2f       	mov	r31, r25
     fee:	96 e9       	ldi	r25, 0x96	; 150
     ff0:	bb 27       	eor	r27, r27
     ff2:	93 95       	inc	r25
     ff4:	f6 95       	lsr	r31
     ff6:	87 95       	ror	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f1 11       	cpse	r31, r1
    1000:	f8 cf       	rjmp	.-16     	; 0xff2 <__floatsisf+0x1c>
    1002:	fa f4       	brpl	.+62     	; 0x1042 <__floatsisf+0x6c>
    1004:	bb 0f       	add	r27, r27
    1006:	11 f4       	brne	.+4      	; 0x100c <__floatsisf+0x36>
    1008:	60 ff       	sbrs	r22, 0
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <__floatsisf+0x6c>
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	16 c0       	rjmp	.+44     	; 0x1042 <__floatsisf+0x6c>
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <__floatsisf+0x48>
    101a:	96 e9       	ldi	r25, 0x96	; 150
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <__floatsisf+0x6a>
    101e:	77 23       	and	r23, r23
    1020:	21 f0       	breq	.+8      	; 0x102a <__floatsisf+0x54>
    1022:	9e e8       	ldi	r25, 0x8E	; 142
    1024:	87 2f       	mov	r24, r23
    1026:	76 2f       	mov	r23, r22
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <__floatsisf+0x5e>
    102a:	66 23       	and	r22, r22
    102c:	71 f0       	breq	.+28     	; 0x104a <__floatsisf+0x74>
    102e:	96 e8       	ldi	r25, 0x86	; 134
    1030:	86 2f       	mov	r24, r22
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	2a f0       	brmi	.+10     	; 0x1042 <__floatsisf+0x6c>
    1038:	9a 95       	dec	r25
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	da f7       	brpl	.-10     	; 0x1038 <__floatsisf+0x62>
    1042:	88 0f       	add	r24, r24
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__fp_cmp>:
    104c:	99 0f       	add	r25, r25
    104e:	00 08       	sbc	r0, r0
    1050:	55 0f       	add	r21, r21
    1052:	aa 0b       	sbc	r26, r26
    1054:	e0 e8       	ldi	r30, 0x80	; 128
    1056:	fe ef       	ldi	r31, 0xFE	; 254
    1058:	16 16       	cp	r1, r22
    105a:	17 06       	cpc	r1, r23
    105c:	e8 07       	cpc	r30, r24
    105e:	f9 07       	cpc	r31, r25
    1060:	c0 f0       	brcs	.+48     	; 0x1092 <__fp_cmp+0x46>
    1062:	12 16       	cp	r1, r18
    1064:	13 06       	cpc	r1, r19
    1066:	e4 07       	cpc	r30, r20
    1068:	f5 07       	cpc	r31, r21
    106a:	98 f0       	brcs	.+38     	; 0x1092 <__fp_cmp+0x46>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	95 0b       	sbc	r25, r21
    1074:	39 f4       	brne	.+14     	; 0x1084 <__fp_cmp+0x38>
    1076:	0a 26       	eor	r0, r26
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_cmp+0x46>
    107a:	23 2b       	or	r18, r19
    107c:	24 2b       	or	r18, r20
    107e:	25 2b       	or	r18, r21
    1080:	21 f4       	brne	.+8      	; 0x108a <__fp_cmp+0x3e>
    1082:	08 95       	ret
    1084:	0a 26       	eor	r0, r26
    1086:	09 f4       	brne	.+2      	; 0x108a <__fp_cmp+0x3e>
    1088:	a1 40       	sbci	r26, 0x01	; 1
    108a:	a6 95       	lsr	r26
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	81 1d       	adc	r24, r1
    1090:	81 1d       	adc	r24, r1
    1092:	08 95       	ret

00001094 <__fp_split3>:
    1094:	57 fd       	sbrc	r21, 7
    1096:	90 58       	subi	r25, 0x80	; 128
    1098:	44 0f       	add	r20, r20
    109a:	55 1f       	adc	r21, r21
    109c:	59 f0       	breq	.+22     	; 0x10b4 <__fp_splitA+0x10>
    109e:	5f 3f       	cpi	r21, 0xFF	; 255
    10a0:	71 f0       	breq	.+28     	; 0x10be <__fp_splitA+0x1a>
    10a2:	47 95       	ror	r20

000010a4 <__fp_splitA>:
    10a4:	88 0f       	add	r24, r24
    10a6:	97 fb       	bst	r25, 7
    10a8:	99 1f       	adc	r25, r25
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <__fp_splitA+0x20>
    10ac:	9f 3f       	cpi	r25, 0xFF	; 255
    10ae:	79 f0       	breq	.+30     	; 0x10ce <__fp_splitA+0x2a>
    10b0:	87 95       	ror	r24
    10b2:	08 95       	ret
    10b4:	12 16       	cp	r1, r18
    10b6:	13 06       	cpc	r1, r19
    10b8:	14 06       	cpc	r1, r20
    10ba:	55 1f       	adc	r21, r21
    10bc:	f2 cf       	rjmp	.-28     	; 0x10a2 <__fp_split3+0xe>
    10be:	46 95       	lsr	r20
    10c0:	f1 df       	rcall	.-30     	; 0x10a4 <__fp_splitA>
    10c2:	08 c0       	rjmp	.+16     	; 0x10d4 <__fp_splitA+0x30>
    10c4:	16 16       	cp	r1, r22
    10c6:	17 06       	cpc	r1, r23
    10c8:	18 06       	cpc	r1, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	f1 cf       	rjmp	.-30     	; 0x10b0 <__fp_splitA+0xc>
    10ce:	86 95       	lsr	r24
    10d0:	71 05       	cpc	r23, r1
    10d2:	61 05       	cpc	r22, r1
    10d4:	08 94       	sec
    10d6:	08 95       	ret

000010d8 <__fp_zero>:
    10d8:	e8 94       	clt

000010da <__fp_szero>:
    10da:	bb 27       	eor	r27, r27
    10dc:	66 27       	eor	r22, r22
    10de:	77 27       	eor	r23, r23
    10e0:	cb 01       	movw	r24, r22
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret

000010e6 <__mulsf3>:
    10e6:	0e 94 86 08 	call	0x110c	; 0x110c <__mulsf3x>
    10ea:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_round>
    10ee:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscA>
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <__mulsf3+0x1c>
    10f4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fp_pscB>
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__mulsf3+0x1c>
    10fa:	95 23       	and	r25, r21
    10fc:	11 f0       	breq	.+4      	; 0x1102 <__mulsf3+0x1c>
    10fe:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_inf>
    1102:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_nan>
    1106:	11 24       	eor	r1, r1
    1108:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>

0000110c <__mulsf3x>:
    110c:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
    1110:	70 f3       	brcs	.-36     	; 0x10ee <__mulsf3+0x8>

00001112 <__mulsf3_pse>:
    1112:	95 9f       	mul	r25, r21
    1114:	c1 f3       	breq	.-16     	; 0x1106 <__mulsf3+0x20>
    1116:	95 0f       	add	r25, r21
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	55 1f       	adc	r21, r21
    111c:	62 9f       	mul	r22, r18
    111e:	f0 01       	movw	r30, r0
    1120:	72 9f       	mul	r23, r18
    1122:	bb 27       	eor	r27, r27
    1124:	f0 0d       	add	r31, r0
    1126:	b1 1d       	adc	r27, r1
    1128:	63 9f       	mul	r22, r19
    112a:	aa 27       	eor	r26, r26
    112c:	f0 0d       	add	r31, r0
    112e:	b1 1d       	adc	r27, r1
    1130:	aa 1f       	adc	r26, r26
    1132:	64 9f       	mul	r22, r20
    1134:	66 27       	eor	r22, r22
    1136:	b0 0d       	add	r27, r0
    1138:	a1 1d       	adc	r26, r1
    113a:	66 1f       	adc	r22, r22
    113c:	82 9f       	mul	r24, r18
    113e:	22 27       	eor	r18, r18
    1140:	b0 0d       	add	r27, r0
    1142:	a1 1d       	adc	r26, r1
    1144:	62 1f       	adc	r22, r18
    1146:	73 9f       	mul	r23, r19
    1148:	b0 0d       	add	r27, r0
    114a:	a1 1d       	adc	r26, r1
    114c:	62 1f       	adc	r22, r18
    114e:	83 9f       	mul	r24, r19
    1150:	a0 0d       	add	r26, r0
    1152:	61 1d       	adc	r22, r1
    1154:	22 1f       	adc	r18, r18
    1156:	74 9f       	mul	r23, r20
    1158:	33 27       	eor	r19, r19
    115a:	a0 0d       	add	r26, r0
    115c:	61 1d       	adc	r22, r1
    115e:	23 1f       	adc	r18, r19
    1160:	84 9f       	mul	r24, r20
    1162:	60 0d       	add	r22, r0
    1164:	21 1d       	adc	r18, r1
    1166:	82 2f       	mov	r24, r18
    1168:	76 2f       	mov	r23, r22
    116a:	6a 2f       	mov	r22, r26
    116c:	11 24       	eor	r1, r1
    116e:	9f 57       	subi	r25, 0x7F	; 127
    1170:	50 40       	sbci	r21, 0x00	; 0
    1172:	9a f0       	brmi	.+38     	; 0x119a <__mulsf3_pse+0x88>
    1174:	f1 f0       	breq	.+60     	; 0x11b2 <__mulsf3_pse+0xa0>
    1176:	88 23       	and	r24, r24
    1178:	4a f0       	brmi	.+18     	; 0x118c <__mulsf3_pse+0x7a>
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	bb 1f       	adc	r27, r27
    1180:	66 1f       	adc	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	50 40       	sbci	r21, 0x00	; 0
    118a:	a9 f7       	brne	.-22     	; 0x1176 <__mulsf3_pse+0x64>
    118c:	9e 3f       	cpi	r25, 0xFE	; 254
    118e:	51 05       	cpc	r21, r1
    1190:	80 f0       	brcs	.+32     	; 0x11b2 <__mulsf3_pse+0xa0>
    1192:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_inf>
    1196:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
    119a:	5f 3f       	cpi	r21, 0xFF	; 255
    119c:	e4 f3       	brlt	.-8      	; 0x1196 <__mulsf3_pse+0x84>
    119e:	98 3e       	cpi	r25, 0xE8	; 232
    11a0:	d4 f3       	brlt	.-12     	; 0x1196 <__mulsf3_pse+0x84>
    11a2:	86 95       	lsr	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f7 95       	ror	r31
    11ac:	e7 95       	ror	r30
    11ae:	9f 5f       	subi	r25, 0xFF	; 255
    11b0:	c1 f7       	brne	.-16     	; 0x11a2 <__mulsf3_pse+0x90>
    11b2:	fe 2b       	or	r31, r30
    11b4:	88 0f       	add	r24, r24
    11b6:	91 1d       	adc	r25, r1
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	97 f9       	bld	r25, 7
    11be:	08 95       	ret

000011c0 <__fp_inf>:
    11c0:	97 f9       	bld	r25, 7
    11c2:	9f 67       	ori	r25, 0x7F	; 127
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	08 95       	ret

000011cc <__fp_nan>:
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	80 ec       	ldi	r24, 0xC0	; 192
    11d0:	08 95       	ret

000011d2 <__fp_pscA>:
    11d2:	00 24       	eor	r0, r0
    11d4:	0a 94       	dec	r0
    11d6:	16 16       	cp	r1, r22
    11d8:	17 06       	cpc	r1, r23
    11da:	18 06       	cpc	r1, r24
    11dc:	09 06       	cpc	r0, r25
    11de:	08 95       	ret

000011e0 <__fp_pscB>:
    11e0:	00 24       	eor	r0, r0
    11e2:	0a 94       	dec	r0
    11e4:	12 16       	cp	r1, r18
    11e6:	13 06       	cpc	r1, r19
    11e8:	14 06       	cpc	r1, r20
    11ea:	05 06       	cpc	r0, r21
    11ec:	08 95       	ret

000011ee <__fp_round>:
    11ee:	09 2e       	mov	r0, r25
    11f0:	03 94       	inc	r0
    11f2:	00 0c       	add	r0, r0
    11f4:	11 f4       	brne	.+4      	; 0x11fa <__fp_round+0xc>
    11f6:	88 23       	and	r24, r24
    11f8:	52 f0       	brmi	.+20     	; 0x120e <__fp_round+0x20>
    11fa:	bb 0f       	add	r27, r27
    11fc:	40 f4       	brcc	.+16     	; 0x120e <__fp_round+0x20>
    11fe:	bf 2b       	or	r27, r31
    1200:	11 f4       	brne	.+4      	; 0x1206 <__fp_round+0x18>
    1202:	60 ff       	sbrs	r22, 0
    1204:	04 c0       	rjmp	.+8      	; 0x120e <__fp_round+0x20>
    1206:	6f 5f       	subi	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	8f 4f       	sbci	r24, 0xFF	; 255
    120c:	9f 4f       	sbci	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1210:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1212:	91 8d       	ldd	r25, Z+25	; 0x19
    1214:	22 8d       	ldd	r18, Z+26	; 0x1a
    1216:	89 2f       	mov	r24, r25
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	80 5c       	subi	r24, 0xC0	; 192
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	82 1b       	sub	r24, r18
    1220:	91 09       	sbc	r25, r1
}
    1222:	8f 73       	andi	r24, 0x3F	; 63
    1224:	99 27       	eor	r25, r25
    1226:	08 95       	ret

00001228 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1228:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    122a:	91 8d       	ldd	r25, Z+25	; 0x19
    122c:	82 8d       	ldd	r24, Z+26	; 0x1a
    122e:	98 17       	cp	r25, r24
    1230:	31 f0       	breq	.+12     	; 0x123e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1232:	82 8d       	ldd	r24, Z+26	; 0x1a
    1234:	e8 0f       	add	r30, r24
    1236:	f1 1d       	adc	r31, r1
    1238:	85 8d       	ldd	r24, Z+29	; 0x1d
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1242:	08 95       	ret

00001244 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1244:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1246:	91 8d       	ldd	r25, Z+25	; 0x19
    1248:	82 8d       	ldd	r24, Z+26	; 0x1a
    124a:	98 17       	cp	r25, r24
    124c:	61 f0       	breq	.+24     	; 0x1266 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    124e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1250:	df 01       	movw	r26, r30
    1252:	a8 0f       	add	r26, r24
    1254:	b1 1d       	adc	r27, r1
    1256:	5d 96       	adiw	r26, 0x1d	; 29
    1258:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    125a:	92 8d       	ldd	r25, Z+26	; 0x1a
    125c:	9f 5f       	subi	r25, 0xFF	; 255
    125e:	9f 73       	andi	r25, 0x3F	; 63
    1260:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    126a:	08 95       	ret

0000126c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    126c:	fc 01       	movw	r30, r24
    126e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1270:	44 8d       	ldd	r20, Z+28	; 0x1c
    1272:	25 2f       	mov	r18, r21
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	84 2f       	mov	r24, r20
    1278:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    127a:	82 1b       	sub	r24, r18
    127c:	93 0b       	sbc	r25, r19
    127e:	54 17       	cp	r21, r20
    1280:	10 f0       	brcs	.+4      	; 0x1286 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1282:	cf 96       	adiw	r24, 0x3f	; 63
    1284:	08 95       	ret
  return tail - head - 1;
    1286:	01 97       	sbiw	r24, 0x01	; 1
}
    1288:	08 95       	ret

0000128a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    128a:	81 ea       	ldi	r24, 0xA1	; 161
    128c:	9a e0       	ldi	r25, 0x0A	; 10
    128e:	89 2b       	or	r24, r25
    1290:	49 f0       	breq	.+18     	; 0x12a4 <_Z14serialEventRunv+0x1a>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	89 2b       	or	r24, r25
    1298:	29 f0       	breq	.+10     	; 0x12a4 <_Z14serialEventRunv+0x1a>
    129a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z17Serial0_availablev>
    129e:	81 11       	cpse	r24, r1
    12a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    12a4:	08 95       	ret

000012a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    12a6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    12a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    12aa:	df 01       	movw	r26, r30
    12ac:	a8 0f       	add	r26, r24
    12ae:	b1 1d       	adc	r27, r1
    12b0:	a3 5a       	subi	r26, 0xA3	; 163
    12b2:	bf 4f       	sbci	r27, 0xFF	; 255
    12b4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    12b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	8f 73       	andi	r24, 0x3F	; 63
    12be:	99 27       	eor	r25, r25
    12c0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    12c2:	a6 89       	ldd	r26, Z+22	; 0x16
    12c4:	b7 89       	ldd	r27, Z+23	; 0x17
    12c6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12c8:	a0 89       	ldd	r26, Z+16	; 0x10
    12ca:	b1 89       	ldd	r27, Z+17	; 0x11
    12cc:	8c 91       	ld	r24, X
    12ce:	83 70       	andi	r24, 0x03	; 3
    12d0:	80 64       	ori	r24, 0x40	; 64
    12d2:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    12d4:	93 8d       	ldd	r25, Z+27	; 0x1b
    12d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    12d8:	98 13       	cpse	r25, r24
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    12dc:	02 88       	ldd	r0, Z+18	; 0x12
    12de:	f3 89       	ldd	r31, Z+19	; 0x13
    12e0:	e0 2d       	mov	r30, r0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7d       	andi	r24, 0xDF	; 223
    12e6:	80 83       	st	Z, r24
    12e8:	08 95       	ret

000012ea <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
  _written = true;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    12fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1300:	98 13       	cpse	r25, r24
    1302:	05 c0       	rjmp	.+10     	; 0x130e <_ZN14HardwareSerial5writeEh+0x24>
    1304:	e8 89       	ldd	r30, Y+16	; 0x10
    1306:	f9 89       	ldd	r31, Y+17	; 0x11
    1308:	80 81       	ld	r24, Z
    130a:	85 fd       	sbrc	r24, 5
    130c:	26 c0       	rjmp	.+76     	; 0x135a <_ZN14HardwareSerial5writeEh+0x70>
    130e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1310:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	0f 5f       	subi	r16, 0xFF	; 255
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	0f 73       	andi	r16, 0x3F	; 63
    131a:	11 27       	eor	r17, r17
    131c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    131e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1320:	e8 12       	cpse	r14, r24
    1322:	0c c0       	rjmp	.+24     	; 0x133c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	07 fc       	sbrc	r0, 7
    1328:	fa cf       	rjmp	.-12     	; 0x131e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    132a:	e8 89       	ldd	r30, Y+16	; 0x10
    132c:	f9 89       	ldd	r31, Y+17	; 0x11
    132e:	80 81       	ld	r24, Z
    1330:	85 ff       	sbrs	r24, 5
    1332:	f5 cf       	rjmp	.-22     	; 0x131e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    133a:	f1 cf       	rjmp	.-30     	; 0x131e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    133c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133e:	fe 01       	movw	r30, r28
    1340:	e8 0f       	add	r30, r24
    1342:	f1 1d       	adc	r31, r1
    1344:	e3 5a       	subi	r30, 0xA3	; 163
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    134a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    134c:	f8 94       	cli
    _tx_buffer_head = i;
    134e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1350:	ea 89       	ldd	r30, Y+18	; 0x12
    1352:	fb 89       	ldd	r31, Y+19	; 0x13
    1354:	80 81       	ld	r24, Z
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	0a c0       	rjmp	.+20     	; 0x136e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    135a:	9f b7       	in	r25, 0x3f	; 63
    135c:	f8 94       	cli
      *_udr = c;
    135e:	ee 89       	ldd	r30, Y+22	; 0x16
    1360:	ff 89       	ldd	r31, Y+23	; 0x17
    1362:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1364:	e8 89       	ldd	r30, Y+16	; 0x10
    1366:	f9 89       	ldd	r31, Y+17	; 0x11
    1368:	80 81       	ld	r24, Z
    136a:	83 70       	andi	r24, 0x03	; 3
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1370:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	08 95       	ret

00001384 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    138a:	88 8d       	ldd	r24, Y+24	; 0x18
    138c:	88 23       	and	r24, r24
    138e:	c9 f0       	breq	.+50     	; 0x13c2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1390:	ea 89       	ldd	r30, Y+18	; 0x12
    1392:	fb 89       	ldd	r31, Y+19	; 0x13
    1394:	80 81       	ld	r24, Z
    1396:	85 fd       	sbrc	r24, 5
    1398:	05 c0       	rjmp	.+10     	; 0x13a4 <_ZN14HardwareSerial5flushEv+0x20>
    139a:	a8 89       	ldd	r26, Y+16	; 0x10
    139c:	b9 89       	ldd	r27, Y+17	; 0x11
    139e:	8c 91       	ld	r24, X
    13a0:	86 fd       	sbrc	r24, 6
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	07 fc       	sbrc	r0, 7
    13a8:	f5 cf       	rjmp	.-22     	; 0x1394 <_ZN14HardwareSerial5flushEv+0x10>
    13aa:	80 81       	ld	r24, Z
    13ac:	85 ff       	sbrs	r24, 5
    13ae:	f2 cf       	rjmp	.-28     	; 0x1394 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    13b0:	a8 89       	ldd	r26, Y+16	; 0x10
    13b2:	b9 89       	ldd	r27, Y+17	; 0x11
    13b4:	8c 91       	ld	r24, X
    13b6:	85 ff       	sbrs	r24, 5
    13b8:	ed cf       	rjmp	.-38     	; 0x1394 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13c0:	e7 cf       	rjmp	.-50     	; 0x1390 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
    13d8:	6a 01       	movw	r12, r20
    13da:	7b 01       	movw	r14, r22
    13dc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    13de:	e8 89       	ldd	r30, Y+16	; 0x10
    13e0:	f9 89       	ldd	r31, Y+17	; 0x11
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13e6:	41 15       	cp	r20, r1
    13e8:	51 4e       	sbci	r21, 0xE1	; 225
    13ea:	61 05       	cpc	r22, r1
    13ec:	71 05       	cpc	r23, r1
    13ee:	b1 f0       	breq	.+44     	; 0x141c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	79 e0       	ldi	r23, 0x09	; 9
    13f4:	8d e3       	ldi	r24, 0x3D	; 61
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a7 01       	movw	r20, r14
    13fa:	96 01       	movw	r18, r12
    13fc:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodsi4>
    1400:	da 01       	movw	r26, r20
    1402:	c9 01       	movw	r24, r18
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	a1 09       	sbc	r26, r1
    1408:	b1 09       	sbc	r27, r1
    140a:	b6 95       	lsr	r27
    140c:	a7 95       	ror	r26
    140e:	97 95       	ror	r25
    1410:	87 95       	ror	r24
    1412:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1414:	21 15       	cp	r18, r1
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	38 07       	cpc	r19, r24
    141a:	a8 f0       	brcs	.+42     	; 0x1446 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    141c:	e8 89       	ldd	r30, Y+16	; 0x10
    141e:	f9 89       	ldd	r31, Y+17	; 0x11
    1420:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1422:	60 e8       	ldi	r22, 0x80	; 128
    1424:	74 e8       	ldi	r23, 0x84	; 132
    1426:	8e e1       	ldi	r24, 0x1E	; 30
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a7 01       	movw	r20, r14
    142c:	96 01       	movw	r18, r12
    142e:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodsi4>
    1432:	da 01       	movw	r26, r20
    1434:	c9 01       	movw	r24, r18
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	a1 09       	sbc	r26, r1
    143a:	b1 09       	sbc	r27, r1
    143c:	b6 95       	lsr	r27
    143e:	a7 95       	ror	r26
    1440:	97 95       	ror	r25
    1442:	87 95       	ror	r24
    1444:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1446:	ec 85       	ldd	r30, Y+12	; 0x0c
    1448:	fd 85       	ldd	r31, Y+13	; 0x0d
    144a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    144c:	ee 85       	ldd	r30, Y+14	; 0x0e
    144e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1450:	20 83       	st	Z, r18

  _written = false;
    1452:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1454:	ec 89       	ldd	r30, Y+20	; 0x14
    1456:	fd 89       	ldd	r31, Y+21	; 0x15
    1458:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    145a:	ea 89       	ldd	r30, Y+18	; 0x12
    145c:	fb 89       	ldd	r31, Y+19	; 0x13
    145e:	80 81       	ld	r24, Z
    1460:	80 61       	ori	r24, 0x10	; 16
    1462:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1464:	ea 89       	ldd	r30, Y+18	; 0x12
    1466:	fb 89       	ldd	r31, Y+19	; 0x13
    1468:	80 81       	ld	r24, Z
    146a:	88 60       	ori	r24, 0x08	; 8
    146c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    146e:	ea 89       	ldd	r30, Y+18	; 0x12
    1470:	fb 89       	ldd	r31, Y+19	; 0x13
    1472:	80 81       	ld	r24, Z
    1474:	80 68       	ori	r24, 0x80	; 128
    1476:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1478:	ea 89       	ldd	r30, Y+18	; 0x12
    147a:	fb 89       	ldd	r31, Y+19	; 0x13
    147c:	80 81       	ld	r24, Z
    147e:	8f 7d       	andi	r24, 0xDF	; 223
    1480:	80 83       	st	Z, r24
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	df 90       	pop	r13
    148e:	cf 90       	pop	r12
    1490:	08 95       	ret

00001492 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1492:	1f 92       	push	r1
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	0f 92       	push	r0
    149a:	11 24       	eor	r1, r1
    149c:	2f 93       	push	r18
    149e:	8f 93       	push	r24
    14a0:	9f 93       	push	r25
    14a2:	ef 93       	push	r30
    14a4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    14a6:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <Serial+0x10>
    14aa:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <Serial+0x11>
    14ae:	80 81       	ld	r24, Z
    14b0:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <Serial+0x16>
    14b4:	f0 91 e9 03 	lds	r31, 0x03E9	; 0x8003e9 <Serial+0x17>
    14b8:	82 fd       	sbrc	r24, 2
    14ba:	12 c0       	rjmp	.+36     	; 0x14e0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    14bc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14be:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <Serial+0x19>
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14c6:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <Serial+0x1a>
    14ca:	82 17       	cp	r24, r18
    14cc:	51 f0       	breq	.+20     	; 0x14e2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    14ce:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <Serial+0x19>
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	ee 52       	subi	r30, 0x2E	; 46
    14d6:	fc 4f       	sbci	r31, 0xFC	; 252
    14d8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14da:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <Serial+0x19>
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14e0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    14e2:	ff 91       	pop	r31
    14e4:	ef 91       	pop	r30
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	2f 91       	pop	r18
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	3f 93       	push	r19
    1504:	4f 93       	push	r20
    1506:	5f 93       	push	r21
    1508:	6f 93       	push	r22
    150a:	7f 93       	push	r23
    150c:	8f 93       	push	r24
    150e:	9f 93       	push	r25
    1510:	af 93       	push	r26
    1512:	bf 93       	push	r27
    1514:	ef 93       	push	r30
    1516:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1518:	82 ed       	ldi	r24, 0xD2	; 210
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1542:	82 ed       	ldi	r24, 0xD2	; 210
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 08 09 	call	0x1210	; 0x1210 <_ZN14HardwareSerial9availableEv>
    154a:	21 e0       	ldi	r18, 0x01	; 1
    154c:	89 2b       	or	r24, r25
    154e:	09 f4       	brne	.+2      	; 0x1552 <_Z17Serial0_availablev+0x10>
    1550:	20 e0       	ldi	r18, 0x00	; 0
}
    1552:	82 2f       	mov	r24, r18
    1554:	08 95       	ret

00001556 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1556:	e2 ed       	ldi	r30, 0xD2	; 210
    1558:	f3 e0       	ldi	r31, 0x03	; 3
    155a:	13 82       	std	Z+3, r1	; 0x03
    155c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    155e:	88 ee       	ldi	r24, 0xE8	; 232
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	a0 e0       	ldi	r26, 0x00	; 0
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	84 83       	std	Z+4, r24	; 0x04
    1568:	95 83       	std	Z+5, r25	; 0x05
    156a:	a6 83       	std	Z+6, r26	; 0x06
    156c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    156e:	8a e5       	ldi	r24, 0x5A	; 90
    1570:	93 e0       	ldi	r25, 0x03	; 3
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	85 ec       	ldi	r24, 0xC5	; 197
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	95 87       	std	Z+13, r25	; 0x0d
    157c:	84 87       	std	Z+12, r24	; 0x0c
    157e:	84 ec       	ldi	r24, 0xC4	; 196
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	97 87       	std	Z+15, r25	; 0x0f
    1584:	86 87       	std	Z+14, r24	; 0x0e
    1586:	80 ec       	ldi	r24, 0xC0	; 192
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	91 8b       	std	Z+17, r25	; 0x11
    158c:	80 8b       	std	Z+16, r24	; 0x10
    158e:	81 ec       	ldi	r24, 0xC1	; 193
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	93 8b       	std	Z+19, r25	; 0x13
    1594:	82 8b       	std	Z+18, r24	; 0x12
    1596:	82 ec       	ldi	r24, 0xC2	; 194
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	95 8b       	std	Z+21, r25	; 0x15
    159c:	84 8b       	std	Z+20, r24	; 0x14
    159e:	86 ec       	ldi	r24, 0xC6	; 198
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	97 8b       	std	Z+23, r25	; 0x17
    15a4:	86 8b       	std	Z+22, r24	; 0x16
    15a6:	11 8e       	std	Z+25, r1	; 0x19
    15a8:	12 8e       	std	Z+26, r1	; 0x1a
    15aa:	13 8e       	std	Z+27, r1	; 0x1b
    15ac:	14 8e       	std	Z+28, r1	; 0x1c
    15ae:	08 95       	ret

000015b0 <initVariant>:
    15b0:	08 95       	ret

000015b2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    15b2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <init>

	initVariant();
    15b6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    15ba:	0e 94 b4 04 	call	0x968	; 0x968 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    15be:	c5 e4       	ldi	r28, 0x45	; 69
    15c0:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    15c2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <loop>
		if (serialEventRun) serialEventRun();
    15c6:	20 97       	sbiw	r28, 0x00	; 0
    15c8:	e1 f3       	breq	.-8      	; 0x15c2 <main+0x10>
    15ca:	0e 94 45 09 	call	0x128a	; 0x128a <_Z14serialEventRunv>
    15ce:	f9 cf       	rjmp	.-14     	; 0x15c2 <main+0x10>

000015d0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	6c 01       	movw	r12, r24
    15e2:	7a 01       	movw	r14, r20
    15e4:	8b 01       	movw	r16, r22
    15e6:	c0 e0       	ldi	r28, 0x00	; 0
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    15ea:	ce 15       	cp	r28, r14
    15ec:	df 05       	cpc	r29, r15
    15ee:	81 f0       	breq	.+32     	; 0x1610 <_ZN5Print5writeEPKhj+0x40>
    15f0:	d8 01       	movw	r26, r16
    15f2:	6d 91       	ld	r22, X+
    15f4:	8d 01       	movw	r16, r26
    15f6:	d6 01       	movw	r26, r12
    15f8:	ed 91       	ld	r30, X+
    15fa:	fc 91       	ld	r31, X
    15fc:	01 90       	ld	r0, Z+
    15fe:	f0 81       	ld	r31, Z
    1600:	e0 2d       	mov	r30, r0
    1602:	c6 01       	movw	r24, r12
    1604:	09 95       	icall
    1606:	89 2b       	or	r24, r25
    1608:	11 f0       	breq	.+4      	; 0x160e <_ZN5Print5writeEPKhj+0x3e>
    160a:	21 96       	adiw	r28, 0x01	; 1
    160c:	ee cf       	rjmp	.-36     	; 0x15ea <_ZN5Print5writeEPKhj+0x1a>
    160e:	7e 01       	movw	r14, r28
    1610:	c7 01       	movw	r24, r14
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	08 95       	ret

00001624 <_ZN5Print5writeEPKc>:
    1624:	61 15       	cp	r22, r1
    1626:	71 05       	cpc	r23, r1
    1628:	79 f0       	breq	.+30     	; 0x1648 <_ZN5Print5writeEPKc+0x24>
    162a:	fb 01       	movw	r30, r22
    162c:	01 90       	ld	r0, Z+
    162e:	00 20       	and	r0, r0
    1630:	e9 f7       	brne	.-6      	; 0x162c <_ZN5Print5writeEPKc+0x8>
    1632:	31 97       	sbiw	r30, 0x01	; 1
    1634:	af 01       	movw	r20, r30
    1636:	46 1b       	sub	r20, r22
    1638:	57 0b       	sbc	r21, r23
    163a:	dc 01       	movw	r26, r24
    163c:	ed 91       	ld	r30, X+
    163e:	fc 91       	ld	r31, X
    1640:	02 80       	ldd	r0, Z+2	; 0x02
    1642:	f3 81       	ldd	r31, Z+3	; 0x03
    1644:	e0 2d       	mov	r30, r0
    1646:	09 94       	ijmp
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	08 95       	ret

0000164e <_ZN5Print5printEPKc>:
    164e:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_ZN5Print5writeEPKc>

00001652 <_ZN5Print5printEc>:
    1652:	dc 01       	movw	r26, r24
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	01 90       	ld	r0, Z+
    165a:	f0 81       	ld	r31, Z
    165c:	e0 2d       	mov	r30, r0
    165e:	09 94       	ijmp

00001660 <_ZN5Print7printlnEv>:
    1660:	6e e3       	ldi	r22, 0x3E	; 62
    1662:	71 e0       	ldi	r23, 0x01	; 1
    1664:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_ZN5Print5writeEPKc>

00001668 <_ZN5Print7printlnEPKc>:
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    1672:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN5Print5writeEPKc>
    1676:	8c 01       	movw	r16, r24
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN5Print7printlnEv>
    167e:	80 0f       	add	r24, r16
    1680:	91 1f       	adc	r25, r17
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <_ZN5Print11printNumberEmh>:
    168c:	8f 92       	push	r8
    168e:	9f 92       	push	r9
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	a1 97       	sbiw	r28, 0x21	; 33
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	7c 01       	movw	r14, r24
    16b2:	fa 01       	movw	r30, r20
    16b4:	cb 01       	movw	r24, r22
    16b6:	19 a2       	std	Y+33, r1	; 0x21
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	08 f4       	brcc	.+2      	; 0x16be <_ZN5Print11printNumberEmh+0x32>
    16bc:	2a e0       	ldi	r18, 0x0A	; 10
    16be:	8e 01       	movw	r16, r28
    16c0:	0f 5d       	subi	r16, 0xDF	; 223
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	82 2e       	mov	r8, r18
    16c6:	91 2c       	mov	r9, r1
    16c8:	a1 2c       	mov	r10, r1
    16ca:	b1 2c       	mov	r11, r1
    16cc:	bf 01       	movw	r22, r30
    16ce:	a5 01       	movw	r20, r10
    16d0:	94 01       	movw	r18, r8
    16d2:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodsi4>
    16d6:	f9 01       	movw	r30, r18
    16d8:	ca 01       	movw	r24, r20
    16da:	01 50       	subi	r16, 0x01	; 1
    16dc:	11 09       	sbc	r17, r1
    16de:	6a 30       	cpi	r22, 0x0A	; 10
    16e0:	10 f4       	brcc	.+4      	; 0x16e6 <_ZN5Print11printNumberEmh+0x5a>
    16e2:	60 5d       	subi	r22, 0xD0	; 208
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <_ZN5Print11printNumberEmh+0x5c>
    16e6:	69 5c       	subi	r22, 0xC9	; 201
    16e8:	d8 01       	movw	r26, r16
    16ea:	6c 93       	st	X, r22
    16ec:	23 2b       	or	r18, r19
    16ee:	24 2b       	or	r18, r20
    16f0:	25 2b       	or	r18, r21
    16f2:	61 f7       	brne	.-40     	; 0x16cc <_ZN5Print11printNumberEmh+0x40>
    16f4:	b8 01       	movw	r22, r16
    16f6:	c7 01       	movw	r24, r14
    16f8:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN5Print5writeEPKc>
    16fc:	a1 96       	adiw	r28, 0x21	; 33
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	9f 90       	pop	r9
    171a:	8f 90       	pop	r8
    171c:	08 95       	ret

0000171e <_ZN5Print5printEmi>:
    171e:	21 15       	cp	r18, r1
    1720:	31 05       	cpc	r19, r1
    1722:	41 f4       	brne	.+16     	; 0x1734 <_ZN5Print5printEmi+0x16>
    1724:	dc 01       	movw	r26, r24
    1726:	ed 91       	ld	r30, X+
    1728:	fc 91       	ld	r31, X
    172a:	01 90       	ld	r0, Z+
    172c:	f0 81       	ld	r31, Z
    172e:	e0 2d       	mov	r30, r0
    1730:	64 2f       	mov	r22, r20
    1732:	09 94       	ijmp
    1734:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print11printNumberEmh>

00001738 <_ZN5Print5printEji>:
    1738:	9a 01       	movw	r18, r20
    173a:	ab 01       	movw	r20, r22
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <_ZN5Print5printEmi>

00001744 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1744:	7f 92       	push	r7
    1746:	8f 92       	push	r8
    1748:	9f 92       	push	r9
    174a:	af 92       	push	r10
    174c:	bf 92       	push	r11
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	8c 01       	movw	r16, r24
    1760:	6a 01       	movw	r12, r20
    1762:	7b 01       	movw	r14, r22
    1764:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1766:	9a 01       	movw	r18, r20
    1768:	ab 01       	movw	r20, r22
    176a:	c7 01       	movw	r24, r14
    176c:	b6 01       	movw	r22, r12
    176e:	0e 94 b5 11 	call	0x236a	; 0x236a <__unordsf2>
    1772:	88 23       	and	r24, r24
    1774:	19 f0       	breq	.+6      	; 0x177c <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1776:	68 e6       	ldi	r22, 0x68	; 104
    1778:	73 e0       	ldi	r23, 0x03	; 3
    177a:	27 c0       	rjmp	.+78     	; 0x17ca <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    177c:	46 01       	movw	r8, r12
    177e:	57 01       	movw	r10, r14
    1780:	e8 94       	clt
    1782:	b7 f8       	bld	r11, 7
    1784:	2f ef       	ldi	r18, 0xFF	; 255
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	5f e7       	ldi	r21, 0x7F	; 127
    178c:	c5 01       	movw	r24, r10
    178e:	b4 01       	movw	r22, r8
    1790:	0e 94 b5 11 	call	0x236a	; 0x236a <__unordsf2>
    1794:	81 11       	cpse	r24, r1
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <_ZN5Print10printFloatEdh+0x6e>
    1798:	2f ef       	ldi	r18, 0xFF	; 255
    179a:	3f ef       	ldi	r19, 0xFF	; 255
    179c:	4f e7       	ldi	r20, 0x7F	; 127
    179e:	5f e7       	ldi	r21, 0x7F	; 127
    17a0:	c5 01       	movw	r24, r10
    17a2:	b4 01       	movw	r22, r8
    17a4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	1c f4       	brge	.+6      	; 0x17b2 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17ac:	6c e6       	ldi	r22, 0x6C	; 108
    17ae:	73 e0       	ldi	r23, 0x03	; 3
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    17b2:	2f ef       	ldi	r18, 0xFF	; 255
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	5f e4       	ldi	r21, 0x4F	; 79
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	0e 94 b0 11 	call	0x2360	; 0x2360 <__gesf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	94 f4       	brge	.+36     	; 0x17ea <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17c6:	60 e7       	ldi	r22, 0x70	; 112
    17c8:	73 e0       	ldi	r23, 0x03	; 3
    17ca:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	9f 90       	pop	r9
    17e2:	8f 90       	pop	r8
    17e4:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17e6:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    17ea:	2f ef       	ldi	r18, 0xFF	; 255
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	5f ec       	ldi	r21, 0xCF	; 207
    17f2:	c7 01       	movw	r24, r14
    17f4:	b6 01       	movw	r22, r12
    17f6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
    17fa:	87 fd       	sbrc	r24, 7
    17fc:	e4 cf       	rjmp	.-56     	; 0x17c6 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	c7 01       	movw	r24, r14
    1806:	b6 01       	movw	r22, r12
    1808:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__cmpsf2>
    180c:	87 ff       	sbrs	r24, 7
    180e:	0a c0       	rjmp	.+20     	; 0x1824 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    1810:	6d e2       	ldi	r22, 0x2D	; 45
    1812:	c8 01       	movw	r24, r16
    1814:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN5Print5printEc>
    1818:	ec 01       	movw	r28, r24
     number = -number;
    181a:	f7 fa       	bst	r15, 7
    181c:	f0 94       	com	r15
    181e:	f7 f8       	bld	r15, 7
    1820:	f0 94       	com	r15
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1824:	c0 e0       	ldi	r28, 0x00	; 0
    1826:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1828:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1832:	7b 14       	cp	r7, r11
    1834:	41 f0       	breq	.+16     	; 0x1846 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 3e 11 	call	0x227c	; 0x227c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1842:	b3 94       	inc	r11
    1844:	f6 cf       	rjmp	.-20     	; 0x1832 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    1846:	a7 01       	movw	r20, r14
    1848:	96 01       	movw	r18, r12
    184a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__addsf3>
    184e:	6b 01       	movw	r12, r22
    1850:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1852:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fixunssfsi>
    1856:	4b 01       	movw	r8, r22
    1858:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    185a:	2a e0       	ldi	r18, 0x0A	; 10
    185c:	ab 01       	movw	r20, r22
    185e:	bc 01       	movw	r22, r24
    1860:	c8 01       	movw	r24, r16
    1862:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1866:	c8 0f       	add	r28, r24
    1868:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    186a:	77 20       	and	r7, r7
    186c:	b9 f1       	breq	.+110    	; 0x18dc <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    186e:	c5 01       	movw	r24, r10
    1870:	b4 01       	movw	r22, r8
    1872:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__floatunsisf>
    1876:	9b 01       	movw	r18, r22
    1878:	ac 01       	movw	r20, r24
    187a:	c7 01       	movw	r24, r14
    187c:	b6 01       	movw	r22, r12
    187e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__subsf3>
    1882:	6b 01       	movw	r12, r22
    1884:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1886:	6e e2       	ldi	r22, 0x2E	; 46
    1888:	c8 01       	movw	r24, r16
    188a:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN5Print5printEc>
    188e:	c8 0f       	add	r28, r24
    1890:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	c7 01       	movw	r24, r14
    189c:	b6 01       	movw	r22, r12
    189e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__mulsf3>
    18a2:	4b 01       	movw	r8, r22
    18a4:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    18a6:	0e 94 ba 07 	call	0xf74	; 0xf74 <__fixunssfsi>
    18aa:	6b 01       	movw	r12, r22
    18ac:	7c 01       	movw	r14, r24
    n += print(toPrint);
    18ae:	4a e0       	ldi	r20, 0x0A	; 10
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	c8 01       	movw	r24, r16
    18b4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN5Print5printEji>
    18b8:	c8 0f       	add	r28, r24
    18ba:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    18bc:	b6 01       	movw	r22, r12
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__floatunsisf>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	c5 01       	movw	r24, r10
    18cc:	b4 01       	movw	r22, r8
    18ce:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__subsf3>
    18d2:	6b 01       	movw	r12, r22
    18d4:	7c 01       	movw	r14, r24
    18d6:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    18d8:	71 10       	cpse	r7, r1
    18da:	db cf       	rjmp	.-74     	; 0x1892 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    18dc:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	bf 90       	pop	r11
    18f0:	af 90       	pop	r10
    18f2:	9f 90       	pop	r9
    18f4:	8f 90       	pop	r8
    18f6:	7f 90       	pop	r7
    18f8:	08 95       	ret

000018fa <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    18fa:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <_ZN5Print10printFloatEdh>

000018fe <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	af 93       	push	r26
    1912:	bf 93       	push	r27
    1914:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <timer0_millis>
    1918:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <timer0_millis+0x1>
    191c:	a0 91 72 04 	lds	r26, 0x0472	; 0x800472 <timer0_millis+0x2>
    1920:	b0 91 73 04 	lds	r27, 0x0473	; 0x800473 <timer0_millis+0x3>
    1924:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <timer0_fract>
    1928:	23 e0       	ldi	r18, 0x03	; 3
    192a:	23 0f       	add	r18, r19
    192c:	2d 37       	cpi	r18, 0x7D	; 125
    192e:	20 f4       	brcc	.+8      	; 0x1938 <__vector_16+0x3a>
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	a1 1d       	adc	r26, r1
    1934:	b1 1d       	adc	r27, r1
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <__vector_16+0x44>
    1938:	26 e8       	ldi	r18, 0x86	; 134
    193a:	23 0f       	add	r18, r19
    193c:	02 96       	adiw	r24, 0x02	; 2
    193e:	a1 1d       	adc	r26, r1
    1940:	b1 1d       	adc	r27, r1
    1942:	20 93 6f 04 	sts	0x046F, r18	; 0x80046f <timer0_fract>
    1946:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <timer0_millis>
    194a:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <timer0_millis+0x1>
    194e:	a0 93 72 04 	sts	0x0472, r26	; 0x800472 <timer0_millis+0x2>
    1952:	b0 93 73 04 	sts	0x0473, r27	; 0x800473 <timer0_millis+0x3>
    1956:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <timer0_overflow_count>
    195a:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <timer0_overflow_count+0x1>
    195e:	a0 91 76 04 	lds	r26, 0x0476	; 0x800476 <timer0_overflow_count+0x2>
    1962:	b0 91 77 04 	lds	r27, 0x0477	; 0x800477 <timer0_overflow_count+0x3>
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	a1 1d       	adc	r26, r1
    196a:	b1 1d       	adc	r27, r1
    196c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <timer0_overflow_count>
    1970:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <timer0_overflow_count+0x1>
    1974:	a0 93 76 04 	sts	0x0476, r26	; 0x800476 <timer0_overflow_count+0x2>
    1978:	b0 93 77 04 	sts	0x0477, r27	; 0x800477 <timer0_overflow_count+0x3>
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <millis>:
    1992:	2f b7       	in	r18, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	60 91 70 04 	lds	r22, 0x0470	; 0x800470 <timer0_millis>
    199a:	70 91 71 04 	lds	r23, 0x0471	; 0x800471 <timer0_millis+0x1>
    199e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <timer0_millis+0x2>
    19a2:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <timer0_millis+0x3>
    19a6:	2f bf       	out	0x3f, r18	; 63
    19a8:	08 95       	ret

000019aa <micros>:
    19aa:	3f b7       	in	r19, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <timer0_overflow_count>
    19b2:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <timer0_overflow_count+0x1>
    19b6:	a0 91 76 04 	lds	r26, 0x0476	; 0x800476 <timer0_overflow_count+0x2>
    19ba:	b0 91 77 04 	lds	r27, 0x0477	; 0x800477 <timer0_overflow_count+0x3>
    19be:	26 b5       	in	r18, 0x26	; 38
    19c0:	a8 9b       	sbis	0x15, 0	; 21
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <micros+0x24>
    19c4:	2f 3f       	cpi	r18, 0xFF	; 255
    19c6:	19 f0       	breq	.+6      	; 0x19ce <micros+0x24>
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	a1 1d       	adc	r26, r1
    19cc:	b1 1d       	adc	r27, r1
    19ce:	3f bf       	out	0x3f, r19	; 63
    19d0:	ba 2f       	mov	r27, r26
    19d2:	a9 2f       	mov	r26, r25
    19d4:	98 2f       	mov	r25, r24
    19d6:	88 27       	eor	r24, r24
    19d8:	82 0f       	add	r24, r18
    19da:	91 1d       	adc	r25, r1
    19dc:	a1 1d       	adc	r26, r1
    19de:	b1 1d       	adc	r27, r1
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	42 e0       	ldi	r20, 0x02	; 2
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	88 1f       	adc	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	4a 95       	dec	r20
    19f0:	d1 f7       	brne	.-12     	; 0x19e6 <micros+0x3c>
    19f2:	08 95       	ret

000019f4 <delay>:
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	6b 01       	movw	r12, r22
    1a06:	7c 01       	movw	r14, r24
    1a08:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
    1a0c:	4b 01       	movw	r8, r22
    1a0e:	5c 01       	movw	r10, r24
    1a10:	c1 14       	cp	r12, r1
    1a12:	d1 04       	cpc	r13, r1
    1a14:	e1 04       	cpc	r14, r1
    1a16:	f1 04       	cpc	r15, r1
    1a18:	01 f1       	breq	.+64     	; 0x1a5a <delay+0x66>
    1a1a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <yield>
    1a1e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <micros>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	88 19       	sub	r24, r8
    1a28:	99 09       	sbc	r25, r9
    1a2a:	aa 09       	sbc	r26, r10
    1a2c:	bb 09       	sbc	r27, r11
    1a2e:	88 3e       	cpi	r24, 0xE8	; 232
    1a30:	93 40       	sbci	r25, 0x03	; 3
    1a32:	a1 05       	cpc	r26, r1
    1a34:	b1 05       	cpc	r27, r1
    1a36:	60 f3       	brcs	.-40     	; 0x1a10 <delay+0x1c>
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	c2 1a       	sub	r12, r18
    1a3c:	d1 08       	sbc	r13, r1
    1a3e:	e1 08       	sbc	r14, r1
    1a40:	f1 08       	sbc	r15, r1
    1a42:	88 ee       	ldi	r24, 0xE8	; 232
    1a44:	88 0e       	add	r8, r24
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	98 1e       	adc	r9, r24
    1a4a:	a1 1c       	adc	r10, r1
    1a4c:	b1 1c       	adc	r11, r1
    1a4e:	c1 14       	cp	r12, r1
    1a50:	d1 04       	cpc	r13, r1
    1a52:	e1 04       	cpc	r14, r1
    1a54:	f1 04       	cpc	r15, r1
    1a56:	19 f7       	brne	.-58     	; 0x1a1e <delay+0x2a>
    1a58:	db cf       	rjmp	.-74     	; 0x1a10 <delay+0x1c>
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	bf 90       	pop	r11
    1a64:	af 90       	pop	r10
    1a66:	9f 90       	pop	r9
    1a68:	8f 90       	pop	r8
    1a6a:	08 95       	ret

00001a6c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a6c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a6e:	84 b5       	in	r24, 0x24	; 36
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a74:	84 b5       	in	r24, 0x24	; 36
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	82 60       	ori	r24, 0x02	; 2
    1a7e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a80:	85 b5       	in	r24, 0x25	; 37
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a86:	ee e6       	ldi	r30, 0x6E	; 110
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a90:	e1 e8       	ldi	r30, 0x81	; 129
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a96:	80 81       	ld	r24, Z
    1a98:	82 60       	ori	r24, 0x02	; 2
    1a9a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1aa2:	e0 e8       	ldi	r30, 0x80	; 128
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1aac:	e1 eb       	ldi	r30, 0xB1	; 177
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ab6:	e0 eb       	ldi	r30, 0xB0	; 176
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ac0:	ea e7       	ldi	r30, 0x7A	; 122
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	84 60       	ori	r24, 0x04	; 4
    1ac8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1aca:	80 81       	ld	r24, Z
    1acc:	82 60       	ori	r24, 0x02	; 2
    1ace:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1adc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ae0:	08 95       	ret

00001ae2 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1ae2:	8e 30       	cpi	r24, 0x0E	; 14
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <analogRead+0x6>
    1ae6:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1ae8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <analog_reference>
    1aec:	90 e4       	ldi	r25, 0x40	; 64
    1aee:	29 9f       	mul	r18, r25
    1af0:	90 01       	movw	r18, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	87 70       	andi	r24, 0x07	; 7
    1af6:	82 2b       	or	r24, r18
    1af8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1afc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b00:	80 64       	ori	r24, 0x40	; 64
    1b02:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1b06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1b0a:	86 fd       	sbrc	r24, 6
    1b0c:	fc cf       	rjmp	.-8      	; 0x1b06 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1b0e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1b12:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1b16:	90 e0       	ldi	r25, 0x00	; 0
}
    1b18:	92 2b       	or	r25, r18
    1b1a:	08 95       	ret

00001b1c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b1c:	83 30       	cpi	r24, 0x03	; 3
    1b1e:	81 f0       	breq	.+32     	; 0x1b40 <turnOffPWM+0x24>
    1b20:	28 f4       	brcc	.+10     	; 0x1b2c <turnOffPWM+0x10>
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	99 f0       	breq	.+38     	; 0x1b4c <turnOffPWM+0x30>
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	a1 f0       	breq	.+40     	; 0x1b52 <turnOffPWM+0x36>
    1b2a:	08 95       	ret
    1b2c:	87 30       	cpi	r24, 0x07	; 7
    1b2e:	a9 f0       	breq	.+42     	; 0x1b5a <turnOffPWM+0x3e>
    1b30:	88 30       	cpi	r24, 0x08	; 8
    1b32:	b9 f0       	breq	.+46     	; 0x1b62 <turnOffPWM+0x46>
    1b34:	84 30       	cpi	r24, 0x04	; 4
    1b36:	d1 f4       	brne	.+52     	; 0x1b6c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b3c:	8f 7d       	andi	r24, 0xDF	; 223
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b44:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b46:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b4a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b4c:	84 b5       	in	r24, 0x24	; 36
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b52:	84 b5       	in	r24, 0x24	; 36
    1b54:	8f 7d       	andi	r24, 0xDF	; 223
    1b56:	84 bd       	out	0x24, r24	; 36
    1b58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b5a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b5e:	8f 77       	andi	r24, 0x7F	; 127
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b66:	8f 7d       	andi	r24, 0xDF	; 223
    1b68:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b6c:	08 95       	ret

00001b6e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	fc 01       	movw	r30, r24
    1b76:	ec 53       	subi	r30, 0x3C	; 60
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e8 52       	subi	r30, 0x28	; 40
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b84:	88 23       	and	r24, r24
    1b86:	61 f1       	breq	.+88     	; 0x1be0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e0 50       	subi	r30, 0x00	; 0
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	c5 91       	lpm	r28, Z+
    1b96:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ea 50       	subi	r30, 0x0A	; 10
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	a5 91       	lpm	r26, Z+
    1ba0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1ba2:	61 11       	cpse	r22, r1
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1ba6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ba8:	f8 94       	cli
		*reg &= ~bit;
    1baa:	88 81       	ld	r24, Y
    1bac:	20 95       	com	r18
    1bae:	82 23       	and	r24, r18
    1bb0:	88 83       	st	Y, r24
		*out &= ~bit;
    1bb2:	ec 91       	ld	r30, X
    1bb4:	2e 23       	and	r18, r30
    1bb6:	0b c0       	rjmp	.+22     	; 0x1bce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bb8:	62 30       	cpi	r22, 0x02	; 2
    1bba:	61 f4       	brne	.+24     	; 0x1bd4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bbe:	f8 94       	cli
		*reg &= ~bit;
    1bc0:	88 81       	ld	r24, Y
    1bc2:	32 2f       	mov	r19, r18
    1bc4:	30 95       	com	r19
    1bc6:	83 23       	and	r24, r19
    1bc8:	88 83       	st	Y, r24
		*out |= bit;
    1bca:	ec 91       	ld	r30, X
    1bcc:	2e 2b       	or	r18, r30
    1bce:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bd0:	9f bf       	out	0x3f, r25	; 63
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bd4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bd6:	f8 94       	cli
		*reg |= bit;
    1bd8:	e8 81       	ld	r30, Y
    1bda:	2e 2b       	or	r18, r30
    1bdc:	28 83       	st	Y, r18
		SREG = oldSREG;
    1bde:	8f bf       	out	0x3f, r24	; 63
	}
}
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	e0 55       	subi	r30, 0x50	; 80
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	ec 53       	subi	r30, 0x3C	; 60
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c00:	f9 01       	movw	r30, r18
    1c02:	e8 52       	subi	r30, 0x28	; 40
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c08:	cc 23       	and	r28, r28
    1c0a:	c1 f0       	breq	.+48     	; 0x1c3c <digitalWrite+0x56>
    1c0c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c0e:	81 11       	cpse	r24, r1
    1c10:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <turnOffPWM>

	out = portOutputRegister(port);
    1c14:	ec 2f       	mov	r30, r28
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	ee 0f       	add	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	ea 50       	subi	r30, 0x0A	; 10
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	a5 91       	lpm	r26, Z+
    1c22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c24:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c26:	f8 94       	cli

	if (val == LOW) {
    1c28:	11 11       	cpse	r17, r1
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <digitalWrite+0x4e>
		*out &= ~bit;
    1c2c:	8c 91       	ld	r24, X
    1c2e:	d0 95       	com	r29
    1c30:	d8 23       	and	r29, r24
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c34:	ec 91       	ld	r30, X
    1c36:	de 2b       	or	r29, r30
    1c38:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c3a:	9f bf       	out	0x3f, r25	; 63
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	08 95       	ret

00001c44 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1c44:	4f 92       	push	r4
    1c46:	5f 92       	push	r5
    1c48:	6f 92       	push	r6
    1c4a:	7f 92       	push	r7
    1c4c:	af 92       	push	r10
    1c4e:	bf 92       	push	r11
    1c50:	cf 92       	push	r12
    1c52:	df 92       	push	r13
    1c54:	ef 92       	push	r14
    1c56:	ff 92       	push	r15
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	29 01       	movw	r4, r18
    1c66:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	24 19       	sub	r18, r4
    1c6e:	35 09       	sbc	r19, r5
    1c70:	46 09       	sbc	r20, r6
    1c72:	57 09       	sbc	r21, r7
    1c74:	89 89       	ldd	r24, Y+17	; 0x11
    1c76:	9a 89       	ldd	r25, Y+18	; 0x12
    1c78:	ab 89       	ldd	r26, Y+19	; 0x13
    1c7a:	bc 89       	ldd	r27, Y+20	; 0x14
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	6a 19       	sub	r22, r10
    1c82:	7b 09       	sbc	r23, r11
    1c84:	8c 09       	sbc	r24, r12
    1c86:	9d 09       	sbc	r25, r13
    1c88:	0e 94 ba 11 	call	0x2374	; 0x2374 <__mulsi3>
    1c8c:	a8 01       	movw	r20, r16
    1c8e:	97 01       	movw	r18, r14
    1c90:	24 19       	sub	r18, r4
    1c92:	35 09       	sbc	r19, r5
    1c94:	46 09       	sbc	r20, r6
    1c96:	57 09       	sbc	r21, r7
    1c98:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodsi4>
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	b9 01       	movw	r22, r18
    1ca0:	6a 0d       	add	r22, r10
    1ca2:	7b 1d       	adc	r23, r11
    1ca4:	8c 1d       	adc	r24, r12
    1ca6:	9d 1d       	adc	r25, r13
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	7f 90       	pop	r7
    1cbe:	6f 90       	pop	r6
    1cc0:	5f 90       	pop	r5
    1cc2:	4f 90       	pop	r4
    1cc4:	08 95       	ret

00001cc6 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    1cc6:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1cca:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	b9 f4       	brne	.+46     	; 0x1d02 <_ZN14SoftwareSerial4readEv+0x3c>
    1cd4:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cd8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1cdc:	98 17       	cp	r25, r24
    1cde:	89 f0       	breq	.+34     	; 0x1d02 <_ZN14SoftwareSerial4readEv+0x3c>
    1ce0:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	e6 58       	subi	r30, 0x86	; 134
    1ce8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cea:	80 81       	ld	r24, Z
    1cec:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	2f 5f       	subi	r18, 0xFF	; 255
    1cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf6:	2f 73       	andi	r18, 0x3F	; 63
    1cf8:	33 27       	eor	r19, r19
    1cfa:	20 93 78 04 	sts	0x0478, r18	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	08 95       	ret
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	08 95       	ret

00001d08 <_ZN14SoftwareSerial5writeEh>:
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	dc 01       	movw	r26, r24
    1d10:	5c 96       	adiw	r26, 0x1c	; 28
    1d12:	8d 91       	ld	r24, X+
    1d14:	9c 91       	ld	r25, X
    1d16:	5d 97       	sbiw	r26, 0x1d	; 29
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	39 f4       	brne	.+14     	; 0x1d2a <_ZN14SoftwareSerial5writeEh+0x22>
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	13 96       	adiw	r26, 0x03	; 3
    1d22:	3c 93       	st	X, r19
    1d24:	2e 93       	st	-X, r18
    1d26:	12 97       	sbiw	r26, 0x02	; 2
    1d28:	3b c0       	rjmp	.+118    	; 0x1da0 <_ZN14SoftwareSerial5writeEh+0x98>
    1d2a:	51 96       	adiw	r26, 0x11	; 17
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	52 97       	sbiw	r26, 0x12	; 18
    1d32:	50 96       	adiw	r26, 0x10	; 16
    1d34:	2c 91       	ld	r18, X
    1d36:	50 97       	sbiw	r26, 0x10	; 16
    1d38:	32 2f       	mov	r19, r18
    1d3a:	30 95       	com	r19
    1d3c:	1f b7       	in	r17, 0x3f	; 63
    1d3e:	5e 96       	adiw	r26, 0x1e	; 30
    1d40:	4c 91       	ld	r20, X
    1d42:	5e 97       	sbiw	r26, 0x1e	; 30
    1d44:	74 2f       	mov	r23, r20
    1d46:	72 70       	andi	r23, 0x02	; 2
    1d48:	41 fd       	sbrc	r20, 1
    1d4a:	60 95       	com	r22
    1d4c:	f8 94       	cli
    1d4e:	40 81       	ld	r20, Z
    1d50:	77 23       	and	r23, r23
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <_ZN14SoftwareSerial5writeEh+0x50>
    1d54:	42 2b       	or	r20, r18
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <_ZN14SoftwareSerial5writeEh+0x52>
    1d58:	43 23       	and	r20, r19
    1d5a:	40 83       	st	Z, r20
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	21 97       	sbiw	r28, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <_ZN14SoftwareSerial5writeEh+0x56>
    1d62:	48 e0       	ldi	r20, 0x08	; 8
    1d64:	50 81       	ld	r21, Z
    1d66:	60 ff       	sbrs	r22, 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <_ZN14SoftwareSerial5writeEh+0x66>
    1d6a:	52 2b       	or	r21, r18
    1d6c:	01 c0       	rjmp	.+2      	; 0x1d70 <_ZN14SoftwareSerial5writeEh+0x68>
    1d6e:	53 23       	and	r21, r19
    1d70:	50 83       	st	Z, r21
    1d72:	ec 01       	movw	r28, r24
    1d74:	21 97       	sbiw	r28, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <_ZN14SoftwareSerial5writeEh+0x6c>
    1d78:	66 95       	lsr	r22
    1d7a:	41 50       	subi	r20, 0x01	; 1
    1d7c:	99 f7       	brne	.-26     	; 0x1d64 <_ZN14SoftwareSerial5writeEh+0x5c>
    1d7e:	80 81       	ld	r24, Z
    1d80:	77 23       	and	r23, r23
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <_ZN14SoftwareSerial5writeEh+0x82>
    1d84:	83 23       	and	r24, r19
    1d86:	80 83       	st	Z, r24
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <_ZN14SoftwareSerial5writeEh+0x86>
    1d8a:	28 2b       	or	r18, r24
    1d8c:	20 83       	st	Z, r18
    1d8e:	1f bf       	out	0x3f, r17	; 63
    1d90:	5c 96       	adiw	r26, 0x1c	; 28
    1d92:	8d 91       	ld	r24, X+
    1d94:	9c 91       	ld	r25, X
    1d96:	5d 97       	sbiw	r26, 0x1d	; 29
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <_ZN14SoftwareSerial5writeEh+0x90>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	08 95       	ret

00001da8 <_ZN14SoftwareSerial5flushEv>:
    1da8:	08 95       	ret

00001daa <_ZN14SoftwareSerial4peekEv>:
    1daa:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1dae:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1db2:	28 17       	cp	r18, r24
    1db4:	39 07       	cpc	r19, r25
    1db6:	71 f4       	brne	.+28     	; 0x1dd4 <_ZN14SoftwareSerial4peekEv+0x2a>
    1db8:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1dbc:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1dc0:	98 17       	cp	r25, r24
    1dc2:	41 f0       	breq	.+16     	; 0x1dd4 <_ZN14SoftwareSerial4peekEv+0x2a>
    1dc4:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	e6 58       	subi	r30, 0x86	; 134
    1dcc:	fb 4f       	sbci	r31, 0xFB	; 251
    1dce:	80 81       	ld	r24, Z
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	08 95       	ret
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	08 95       	ret

00001dda <_ZN14SoftwareSerial9availableEv>:
    1dda:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1dde:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1de2:	28 17       	cp	r18, r24
    1de4:	39 07       	cpc	r19, r25
    1de6:	71 f4       	brne	.+28     	; 0x1e04 <_ZN14SoftwareSerial9availableEv+0x2a>
    1de8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1dec:	20 91 78 04 	lds	r18, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	80 5c       	subi	r24, 0xC0	; 192
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	82 1b       	sub	r24, r18
    1df8:	91 09       	sbc	r25, r1
    1dfa:	60 e4       	ldi	r22, 0x40	; 64
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	0e 94 ca 11 	call	0x2394	; 0x2394 <__divmodhi4>
    1e02:	08 95       	ret
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	08 95       	ret

00001e0a <_ZN14SoftwareSerial13stopListeningEv>:
    1e0a:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1e0e:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1e12:	e8 17       	cp	r30, r24
    1e14:	f9 07       	cpc	r31, r25
    1e16:	69 f4       	brne	.+26     	; 0x1e32 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1e18:	a3 89       	ldd	r26, Z+19	; 0x13
    1e1a:	b4 89       	ldd	r27, Z+20	; 0x14
    1e1c:	9c 91       	ld	r25, X
    1e1e:	85 89       	ldd	r24, Z+21	; 0x15
    1e20:	80 95       	com	r24
    1e22:	89 23       	and	r24, r25
    1e24:	8c 93       	st	X, r24
    1e26:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1e2a:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	08 95       	ret
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	08 95       	ret

00001e36 <_ZN14SoftwareSerial6listenEv>:
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	ec 01       	movw	r28, r24
    1e3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e3e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e40:	89 2b       	or	r24, r25
    1e42:	f1 f0       	breq	.+60     	; 0x1e80 <_ZN14SoftwareSerial6listenEv+0x4a>
    1e44:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1e48:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1e4c:	c8 17       	cp	r28, r24
    1e4e:	d9 07       	cpc	r29, r25
    1e50:	b9 f0       	breq	.+46     	; 0x1e80 <_ZN14SoftwareSerial6listenEv+0x4a>
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	11 f0       	breq	.+4      	; 0x1e5a <_ZN14SoftwareSerial6listenEv+0x24>
    1e56:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <_ZN14SoftwareSerial13stopListeningEv>
    1e5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e60:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1e64:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1e68:	d0 93 bb 04 	sts	0x04BB, r29	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1e6c:	c0 93 ba 04 	sts	0x04BA, r28	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1e70:	eb 89       	ldd	r30, Y+19	; 0x13
    1e72:	fc 89       	ldd	r31, Y+20	; 0x14
    1e74:	90 81       	ld	r25, Z
    1e76:	8d 89       	ldd	r24, Y+21	; 0x15
    1e78:	89 2b       	or	r24, r25
    1e7a:	80 83       	st	Z, r24
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <_ZN14SoftwareSerial6listenEv+0x4c>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <__vector_3>:
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	2f 93       	push	r18
    1e94:	3f 93       	push	r19
    1e96:	4f 93       	push	r20
    1e98:	5f 93       	push	r21
    1e9a:	6f 93       	push	r22
    1e9c:	7f 93       	push	r23
    1e9e:	8f 93       	push	r24
    1ea0:	9f 93       	push	r25
    1ea2:	af 93       	push	r26
    1ea4:	bf 93       	push	r27
    1ea6:	ef 93       	push	r30
    1ea8:	ff 93       	push	r31
    1eaa:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <_ZN14SoftwareSerial13active_objectE>
    1eae:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <_ZN14SoftwareSerial13active_objectE+0x1>
    1eb2:	30 97       	sbiw	r30, 0x00	; 0
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <__vector_3+0x30>
    1eb6:	51 c0       	rjmp	.+162    	; 0x1f5a <__vector_3+0xd2>
    1eb8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1eba:	a6 85       	ldd	r26, Z+14	; 0x0e
    1ebc:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ebe:	85 85       	ldd	r24, Z+13	; 0x0d
    1ec0:	91 ff       	sbrs	r25, 1
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <__vector_3+0x44>
    1ec4:	9c 91       	ld	r25, X
    1ec6:	89 23       	and	r24, r25
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <__vector_3+0x4c>
    1eca:	47 c0       	rjmp	.+142    	; 0x1f5a <__vector_3+0xd2>
    1ecc:	9c 91       	ld	r25, X
    1ece:	89 23       	and	r24, r25
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <__vector_3+0x4c>
    1ed2:	43 c0       	rjmp	.+134    	; 0x1f5a <__vector_3+0xd2>
    1ed4:	a3 89       	ldd	r26, Z+19	; 0x13
    1ed6:	b4 89       	ldd	r27, Z+20	; 0x14
    1ed8:	9c 91       	ld	r25, X
    1eda:	85 89       	ldd	r24, Z+21	; 0x15
    1edc:	80 95       	com	r24
    1ede:	89 23       	and	r24, r25
    1ee0:	8c 93       	st	X, r24
    1ee2:	86 89       	ldd	r24, Z+22	; 0x16
    1ee4:	97 89       	ldd	r25, Z+23	; 0x17
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <__vector_3+0x5e>
    1eea:	60 8d       	ldd	r22, Z+24	; 0x18
    1eec:	71 8d       	ldd	r23, Z+25	; 0x19
    1eee:	a6 85       	ldd	r26, Z+14	; 0x0e
    1ef0:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ef2:	55 85       	ldd	r21, Z+13	; 0x0d
    1ef4:	38 e0       	ldi	r19, 0x08	; 8
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	cb 01       	movw	r24, r22
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <__vector_3+0x72>
    1efe:	82 2f       	mov	r24, r18
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	95 95       	asr	r25
    1f04:	87 95       	ror	r24
    1f06:	28 2f       	mov	r18, r24
    1f08:	4c 91       	ld	r20, X
    1f0a:	45 23       	and	r20, r21
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <__vector_3+0x88>
    1f0e:	20 68       	ori	r18, 0x80	; 128
    1f10:	31 50       	subi	r19, 0x01	; 1
    1f12:	91 f7       	brne	.-28     	; 0x1ef8 <__vector_3+0x70>
    1f14:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f16:	81 fd       	sbrc	r24, 1
    1f18:	20 95       	com	r18
    1f1a:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	8f 73       	andi	r24, 0x3F	; 63
    1f24:	99 27       	eor	r25, r25
    1f26:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1f2a:	38 17       	cp	r19, r24
    1f2c:	49 f0       	breq	.+18     	; 0x1f40 <__vector_3+0xb8>
    1f2e:	a0 91 79 04 	lds	r26, 0x0479	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	a6 58       	subi	r26, 0x86	; 134
    1f36:	bb 4f       	sbci	r27, 0xFB	; 251
    1f38:	2c 93       	st	X, r18
    1f3a:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <__vector_3+0xbe>
    1f40:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f42:	81 60       	ori	r24, 0x01	; 1
    1f44:	86 8f       	std	Z+30, r24	; 0x1e
    1f46:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f48:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <__vector_3+0xc2>
    1f4e:	a3 89       	ldd	r26, Z+19	; 0x13
    1f50:	b4 89       	ldd	r27, Z+20	; 0x14
    1f52:	9c 91       	ld	r25, X
    1f54:	85 89       	ldd	r24, Z+21	; 0x15
    1f56:	89 2b       	or	r24, r25
    1f58:	8c 93       	st	X, r24
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <_ZN14SoftwareSerialD1Ev>:
    1f7c:	28 e7       	ldi	r18, 0x78	; 120
    1f7e:	33 e0       	ldi	r19, 0x03	; 3
    1f80:	fc 01       	movw	r30, r24
    1f82:	31 83       	std	Z+1, r19	; 0x01
    1f84:	20 83       	st	Z, r18
    1f86:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <_ZN14SoftwareSerial13stopListeningEv>

00001f8a <_ZN14SoftwareSerial5setTXEh>:
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	ec 01       	movw	r28, r24
    1f92:	16 2f       	mov	r17, r22
    1f94:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f96:	66 95       	lsr	r22
    1f98:	61 70       	andi	r22, 0x01	; 1
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	68 27       	eor	r22, r24
    1f9e:	81 2f       	mov	r24, r17
    1fa0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	81 2f       	mov	r24, r17
    1fa8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
    1fac:	81 2f       	mov	r24, r17
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	ec 53       	subi	r30, 0x3C	; 60
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	e4 91       	lpm	r30, Z
    1fb8:	e8 8b       	std	Y+16, r30	; 0x10
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e8 52       	subi	r30, 0x28	; 40
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	e4 91       	lpm	r30, Z
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ea 50       	subi	r30, 0x0A	; 10
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	85 91       	lpm	r24, Z+
    1fce:	94 91       	lpm	r25, Z
    1fd0:	9a 8b       	std	Y+18, r25	; 0x12
    1fd2:	89 8b       	std	Y+17, r24	; 0x11
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	08 95       	ret

00001fdc <_ZN14SoftwareSerial5setRXEh>:
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	16 2f       	mov	r17, r22
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	81 2f       	mov	r24, r17
    1fea:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <pinMode>
    1fee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff0:	81 fd       	sbrc	r24, 1
    1ff2:	04 c0       	rjmp	.+8      	; 0x1ffc <_ZN14SoftwareSerial5setRXEh+0x20>
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	81 2f       	mov	r24, r17
    1ff8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <digitalWrite>
    1ffc:	1c 87       	std	Y+12, r17	; 0x0c
    1ffe:	81 2f       	mov	r24, r17
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	fc 01       	movw	r30, r24
    2004:	ec 53       	subi	r30, 0x3C	; 60
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	e4 91       	lpm	r30, Z
    200a:	ed 87       	std	Y+13, r30	; 0x0d
    200c:	fc 01       	movw	r30, r24
    200e:	e8 52       	subi	r30, 0x28	; 40
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	e4 91       	lpm	r30, Z
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	e4 51       	subi	r30, 0x14	; 20
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	85 91       	lpm	r24, Z+
    2020:	94 91       	lpm	r25, Z
    2022:	9f 87       	std	Y+15, r25	; 0x0f
    2024:	8e 87       	std	Y+14, r24	; 0x0e
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	08 95       	ret

0000202e <_ZN14SoftwareSerialC1Ehhb>:
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	ec 01       	movw	r28, r24
    2036:	16 2f       	mov	r17, r22
    2038:	1b 82       	std	Y+3, r1	; 0x03
    203a:	1a 82       	std	Y+2, r1	; 0x02
    203c:	88 ee       	ldi	r24, 0xE8	; 232
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	8c 83       	std	Y+4, r24	; 0x04
    2046:	9d 83       	std	Y+5, r25	; 0x05
    2048:	ae 83       	std	Y+6, r26	; 0x06
    204a:	bf 83       	std	Y+7, r27	; 0x07
    204c:	88 e7       	ldi	r24, 0x78	; 120
    204e:	93 e0       	ldi	r25, 0x03	; 3
    2050:	99 83       	std	Y+1, r25	; 0x01
    2052:	88 83       	st	Y, r24
    2054:	1f 8a       	std	Y+23, r1	; 0x17
    2056:	1e 8a       	std	Y+22, r1	; 0x16
    2058:	19 8e       	std	Y+25, r1	; 0x19
    205a:	18 8e       	std	Y+24, r1	; 0x18
    205c:	1b 8e       	std	Y+27, r1	; 0x1b
    205e:	1a 8e       	std	Y+26, r1	; 0x1a
    2060:	1d 8e       	std	Y+29, r1	; 0x1d
    2062:	1c 8e       	std	Y+28, r1	; 0x1c
    2064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2066:	8e 7f       	andi	r24, 0xFE	; 254
    2068:	20 fb       	bst	r18, 0
    206a:	81 f9       	bld	r24, 1
    206c:	8e 8f       	std	Y+30, r24	; 0x1e
    206e:	64 2f       	mov	r22, r20
    2070:	ce 01       	movw	r24, r28
    2072:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN14SoftwareSerial5setTXEh>
    2076:	61 2f       	mov	r22, r17
    2078:	ce 01       	movw	r24, r28
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <_ZN14SoftwareSerial5setRXEh>

00002084 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	ec 01       	movw	r28, r24
    208a:	9a 01       	movw	r18, r20
    208c:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    208e:	1b 8e       	std	Y+27, r1	; 0x1b
    2090:	1a 8e       	std	Y+26, r1	; 0x1a
    2092:	19 8e       	std	Y+25, r1	; 0x19
    2094:	18 8e       	std	Y+24, r1	; 0x18
    2096:	1f 8a       	std	Y+23, r1	; 0x17
    2098:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	79 e0       	ldi	r23, 0x09	; 9
    209e:	8d e3       	ldi	r24, 0x3D	; 61
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 00 12 	call	0x2400	; 0x2400 <__divmodsi4>
    20a6:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20a8:	24 30       	cpi	r18, 0x04	; 4
    20aa:	31 05       	cpc	r19, r1
    20ac:	18 f0       	brcs	.+6      	; 0x20b4 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    20ae:	c9 01       	movw	r24, r18
    20b0:	03 97       	sbiw	r24, 0x03	; 3
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    20b8:	9d 8f       	std	Y+29, r25	; 0x1d
    20ba:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    20bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20be:	66 31       	cpi	r22, 0x16	; 22
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <_ZN14SoftwareSerial5beginEl+0x40>
    20c2:	69 c0       	rjmp	.+210    	; 0x2196 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    20c4:	c9 01       	movw	r24, r18
    20c6:	96 95       	lsr	r25
    20c8:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20ca:	84 31       	cpi	r24, 0x14	; 20
    20cc:	91 05       	cpc	r25, r1
    20ce:	10 f0       	brcs	.+4      	; 0x20d4 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    20d0:	43 97       	sbiw	r24, 0x13	; 19
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    20d8:	9f 8b       	std	Y+23, r25	; 0x17
    20da:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    20dc:	36 97       	sbiw	r30, 0x06	; 6
    20de:	18 f0       	brcs	.+6      	; 0x20e6 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    20e0:	c9 01       	movw	r24, r18
    20e2:	05 97       	sbiw	r24, 0x05	; 5
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    20ea:	99 8f       	std	Y+25, r25	; 0x19
    20ec:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    20ee:	c9 01       	movw	r24, r18
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	28 0f       	add	r18, r24
    20f6:	39 1f       	adc	r19, r25
    20f8:	36 95       	lsr	r19
    20fa:	27 95       	ror	r18
    20fc:	36 95       	lsr	r19
    20fe:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2100:	2d 30       	cpi	r18, 0x0D	; 13
    2102:	31 05       	cpc	r19, r1
    2104:	18 f0       	brcs	.+6      	; 0x210c <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    2106:	2c 50       	subi	r18, 0x0C	; 12
    2108:	31 09       	sbc	r19, r1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2110:	3b 8f       	std	Y+27, r19	; 0x1b
    2112:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2114:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    2118:	68 30       	cpi	r22, 0x08	; 8
    211a:	50 f0       	brcs	.+20     	; 0x2130 <_ZN14SoftwareSerial5beginEl+0xac>
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	6e 30       	cpi	r22, 0x0E	; 14
    2120:	08 f4       	brcc	.+2      	; 0x2124 <_ZN14SoftwareSerial5beginEl+0xa0>
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	01 c0       	rjmp	.+2      	; 0x212a <_ZN14SoftwareSerial5beginEl+0xa6>
    2128:	88 0f       	add	r24, r24
    212a:	2a 95       	dec	r18
    212c:	ea f7       	brpl	.-6      	; 0x2128 <_ZN14SoftwareSerial5beginEl+0xa4>
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <_ZN14SoftwareSerial5beginEl+0xae>
    2130:	84 e0       	ldi	r24, 0x04	; 4
    2132:	89 2b       	or	r24, r25
    2134:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2138:	9c 85       	ldd	r25, Y+12	; 0x0c
    213a:	98 30       	cpi	r25, 0x08	; 8
    213c:	38 f0       	brcs	.+14     	; 0x214c <_ZN14SoftwareSerial5beginEl+0xc8>
    213e:	9e 30       	cpi	r25, 0x0E	; 14
    2140:	40 f0       	brcs	.+16     	; 0x2152 <_ZN14SoftwareSerial5beginEl+0xce>
    2142:	96 31       	cpi	r25, 0x16	; 22
    2144:	48 f0       	brcs	.+18     	; 0x2158 <_ZN14SoftwareSerial5beginEl+0xd4>
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	08 c0       	rjmp	.+16     	; 0x215c <_ZN14SoftwareSerial5beginEl+0xd8>
    214c:	2d e6       	ldi	r18, 0x6D	; 109
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	05 c0       	rjmp	.+10     	; 0x215c <_ZN14SoftwareSerial5beginEl+0xd8>
    2152:	2b e6       	ldi	r18, 0x6B	; 107
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	02 c0       	rjmp	.+4      	; 0x215c <_ZN14SoftwareSerial5beginEl+0xd8>
    2158:	2c e6       	ldi	r18, 0x6C	; 108
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3c 8b       	std	Y+20, r19	; 0x14
    215e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2160:	98 30       	cpi	r25, 0x08	; 8
    2162:	30 f4       	brcc	.+12     	; 0x2170 <_ZN14SoftwareSerial5beginEl+0xec>
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	01 c0       	rjmp	.+2      	; 0x216a <_ZN14SoftwareSerial5beginEl+0xe6>
    2168:	88 0f       	add	r24, r24
    216a:	9a 95       	dec	r25
    216c:	ea f7       	brpl	.-6      	; 0x2168 <_ZN14SoftwareSerial5beginEl+0xe4>
    216e:	0e c0       	rjmp	.+28     	; 0x218c <_ZN14SoftwareSerial5beginEl+0x108>
    2170:	29 2f       	mov	r18, r25
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	9e 30       	cpi	r25, 0x0E	; 14
    2176:	18 f4       	brcc	.+6      	; 0x217e <_ZN14SoftwareSerial5beginEl+0xfa>
    2178:	28 50       	subi	r18, 0x08	; 8
    217a:	31 09       	sbc	r19, r1
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <_ZN14SoftwareSerial5beginEl+0xfe>
    217e:	2e 50       	subi	r18, 0x0E	; 14
    2180:	31 09       	sbc	r19, r1
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <_ZN14SoftwareSerial5beginEl+0x104>
    2186:	88 0f       	add	r24, r24
    2188:	2a 95       	dec	r18
    218a:	ea f7       	brpl	.-6      	; 0x2186 <_ZN14SoftwareSerial5beginEl+0x102>
    218c:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    218e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2190:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2196:	ce 01       	movw	r24, r28
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    219c:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_ZN14SoftwareSerial6listenEv>

000021a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    21a0:	08 95       	ret

000021a2 <__subsf3>:
    21a2:	50 58       	subi	r21, 0x80	; 128

000021a4 <__addsf3>:
    21a4:	bb 27       	eor	r27, r27
    21a6:	aa 27       	eor	r26, r26
    21a8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__addsf3x>
    21ac:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_round>
    21b0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscA>
    21b4:	38 f0       	brcs	.+14     	; 0x21c4 <__addsf3+0x20>
    21b6:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fp_pscB>
    21ba:	20 f0       	brcs	.+8      	; 0x21c4 <__addsf3+0x20>
    21bc:	39 f4       	brne	.+14     	; 0x21cc <__addsf3+0x28>
    21be:	9f 3f       	cpi	r25, 0xFF	; 255
    21c0:	19 f4       	brne	.+6      	; 0x21c8 <__addsf3+0x24>
    21c2:	26 f4       	brtc	.+8      	; 0x21cc <__addsf3+0x28>
    21c4:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_nan>
    21c8:	0e f4       	brtc	.+2      	; 0x21cc <__addsf3+0x28>
    21ca:	e0 95       	com	r30
    21cc:	e7 fb       	bst	r30, 7
    21ce:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_inf>

000021d2 <__addsf3x>:
    21d2:	e9 2f       	mov	r30, r25
    21d4:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
    21d8:	58 f3       	brcs	.-42     	; 0x21b0 <__addsf3+0xc>
    21da:	ba 17       	cp	r27, r26
    21dc:	62 07       	cpc	r22, r18
    21de:	73 07       	cpc	r23, r19
    21e0:	84 07       	cpc	r24, r20
    21e2:	95 07       	cpc	r25, r21
    21e4:	20 f0       	brcs	.+8      	; 0x21ee <__addsf3x+0x1c>
    21e6:	79 f4       	brne	.+30     	; 0x2206 <__addsf3x+0x34>
    21e8:	a6 f5       	brtc	.+104    	; 0x2252 <__addsf3x+0x80>
    21ea:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__fp_zero>
    21ee:	0e f4       	brtc	.+2      	; 0x21f2 <__addsf3x+0x20>
    21f0:	e0 95       	com	r30
    21f2:	0b 2e       	mov	r0, r27
    21f4:	ba 2f       	mov	r27, r26
    21f6:	a0 2d       	mov	r26, r0
    21f8:	0b 01       	movw	r0, r22
    21fa:	b9 01       	movw	r22, r18
    21fc:	90 01       	movw	r18, r0
    21fe:	0c 01       	movw	r0, r24
    2200:	ca 01       	movw	r24, r20
    2202:	a0 01       	movw	r20, r0
    2204:	11 24       	eor	r1, r1
    2206:	ff 27       	eor	r31, r31
    2208:	59 1b       	sub	r21, r25
    220a:	99 f0       	breq	.+38     	; 0x2232 <__addsf3x+0x60>
    220c:	59 3f       	cpi	r21, 0xF9	; 249
    220e:	50 f4       	brcc	.+20     	; 0x2224 <__addsf3x+0x52>
    2210:	50 3e       	cpi	r21, 0xE0	; 224
    2212:	68 f1       	brcs	.+90     	; 0x226e <__addsf3x+0x9c>
    2214:	1a 16       	cp	r1, r26
    2216:	f0 40       	sbci	r31, 0x00	; 0
    2218:	a2 2f       	mov	r26, r18
    221a:	23 2f       	mov	r18, r19
    221c:	34 2f       	mov	r19, r20
    221e:	44 27       	eor	r20, r20
    2220:	58 5f       	subi	r21, 0xF8	; 248
    2222:	f3 cf       	rjmp	.-26     	; 0x220a <__addsf3x+0x38>
    2224:	46 95       	lsr	r20
    2226:	37 95       	ror	r19
    2228:	27 95       	ror	r18
    222a:	a7 95       	ror	r26
    222c:	f0 40       	sbci	r31, 0x00	; 0
    222e:	53 95       	inc	r21
    2230:	c9 f7       	brne	.-14     	; 0x2224 <__addsf3x+0x52>
    2232:	7e f4       	brtc	.+30     	; 0x2252 <__addsf3x+0x80>
    2234:	1f 16       	cp	r1, r31
    2236:	ba 0b       	sbc	r27, r26
    2238:	62 0b       	sbc	r22, r18
    223a:	73 0b       	sbc	r23, r19
    223c:	84 0b       	sbc	r24, r20
    223e:	ba f0       	brmi	.+46     	; 0x226e <__addsf3x+0x9c>
    2240:	91 50       	subi	r25, 0x01	; 1
    2242:	a1 f0       	breq	.+40     	; 0x226c <__addsf3x+0x9a>
    2244:	ff 0f       	add	r31, r31
    2246:	bb 1f       	adc	r27, r27
    2248:	66 1f       	adc	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	88 1f       	adc	r24, r24
    224e:	c2 f7       	brpl	.-16     	; 0x2240 <__addsf3x+0x6e>
    2250:	0e c0       	rjmp	.+28     	; 0x226e <__addsf3x+0x9c>
    2252:	ba 0f       	add	r27, r26
    2254:	62 1f       	adc	r22, r18
    2256:	73 1f       	adc	r23, r19
    2258:	84 1f       	adc	r24, r20
    225a:	48 f4       	brcc	.+18     	; 0x226e <__addsf3x+0x9c>
    225c:	87 95       	ror	r24
    225e:	77 95       	ror	r23
    2260:	67 95       	ror	r22
    2262:	b7 95       	ror	r27
    2264:	f7 95       	ror	r31
    2266:	9e 3f       	cpi	r25, 0xFE	; 254
    2268:	08 f0       	brcs	.+2      	; 0x226c <__addsf3x+0x9a>
    226a:	b0 cf       	rjmp	.-160    	; 0x21cc <__addsf3+0x28>
    226c:	93 95       	inc	r25
    226e:	88 0f       	add	r24, r24
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__addsf3x+0xa2>
    2272:	99 27       	eor	r25, r25
    2274:	ee 0f       	add	r30, r30
    2276:	97 95       	ror	r25
    2278:	87 95       	ror	r24
    227a:	08 95       	ret

0000227c <__divsf3>:
    227c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__divsf3x>
    2280:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_round>
    2284:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fp_pscB>
    2288:	58 f0       	brcs	.+22     	; 0x22a0 <__divsf3+0x24>
    228a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscA>
    228e:	40 f0       	brcs	.+16     	; 0x22a0 <__divsf3+0x24>
    2290:	29 f4       	brne	.+10     	; 0x229c <__divsf3+0x20>
    2292:	5f 3f       	cpi	r21, 0xFF	; 255
    2294:	29 f0       	breq	.+10     	; 0x22a0 <__divsf3+0x24>
    2296:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_inf>
    229a:	51 11       	cpse	r21, r1
    229c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
    22a0:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_nan>

000022a4 <__divsf3x>:
    22a4:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_split3>
    22a8:	68 f3       	brcs	.-38     	; 0x2284 <__divsf3+0x8>

000022aa <__divsf3_pse>:
    22aa:	99 23       	and	r25, r25
    22ac:	b1 f3       	breq	.-20     	; 0x229a <__divsf3+0x1e>
    22ae:	55 23       	and	r21, r21
    22b0:	91 f3       	breq	.-28     	; 0x2296 <__divsf3+0x1a>
    22b2:	95 1b       	sub	r25, r21
    22b4:	55 0b       	sbc	r21, r21
    22b6:	bb 27       	eor	r27, r27
    22b8:	aa 27       	eor	r26, r26
    22ba:	62 17       	cp	r22, r18
    22bc:	73 07       	cpc	r23, r19
    22be:	84 07       	cpc	r24, r20
    22c0:	38 f0       	brcs	.+14     	; 0x22d0 <__divsf3_pse+0x26>
    22c2:	9f 5f       	subi	r25, 0xFF	; 255
    22c4:	5f 4f       	sbci	r21, 0xFF	; 255
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	44 1f       	adc	r20, r20
    22cc:	aa 1f       	adc	r26, r26
    22ce:	a9 f3       	breq	.-22     	; 0x22ba <__divsf3_pse+0x10>
    22d0:	35 d0       	rcall	.+106    	; 0x233c <__divsf3_pse+0x92>
    22d2:	0e 2e       	mov	r0, r30
    22d4:	3a f0       	brmi	.+14     	; 0x22e4 <__divsf3_pse+0x3a>
    22d6:	e0 e8       	ldi	r30, 0x80	; 128
    22d8:	32 d0       	rcall	.+100    	; 0x233e <__divsf3_pse+0x94>
    22da:	91 50       	subi	r25, 0x01	; 1
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	e6 95       	lsr	r30
    22e0:	00 1c       	adc	r0, r0
    22e2:	ca f7       	brpl	.-14     	; 0x22d6 <__divsf3_pse+0x2c>
    22e4:	2b d0       	rcall	.+86     	; 0x233c <__divsf3_pse+0x92>
    22e6:	fe 2f       	mov	r31, r30
    22e8:	29 d0       	rcall	.+82     	; 0x233c <__divsf3_pse+0x92>
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	88 1f       	adc	r24, r24
    22f0:	bb 1f       	adc	r27, r27
    22f2:	26 17       	cp	r18, r22
    22f4:	37 07       	cpc	r19, r23
    22f6:	48 07       	cpc	r20, r24
    22f8:	ab 07       	cpc	r26, r27
    22fa:	b0 e8       	ldi	r27, 0x80	; 128
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__divsf3_pse+0x56>
    22fe:	bb 0b       	sbc	r27, r27
    2300:	80 2d       	mov	r24, r0
    2302:	bf 01       	movw	r22, r30
    2304:	ff 27       	eor	r31, r31
    2306:	93 58       	subi	r25, 0x83	; 131
    2308:	5f 4f       	sbci	r21, 0xFF	; 255
    230a:	3a f0       	brmi	.+14     	; 0x231a <__divsf3_pse+0x70>
    230c:	9e 3f       	cpi	r25, 0xFE	; 254
    230e:	51 05       	cpc	r21, r1
    2310:	78 f0       	brcs	.+30     	; 0x2330 <__divsf3_pse+0x86>
    2312:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_inf>
    2316:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_szero>
    231a:	5f 3f       	cpi	r21, 0xFF	; 255
    231c:	e4 f3       	brlt	.-8      	; 0x2316 <__divsf3_pse+0x6c>
    231e:	98 3e       	cpi	r25, 0xE8	; 232
    2320:	d4 f3       	brlt	.-12     	; 0x2316 <__divsf3_pse+0x6c>
    2322:	86 95       	lsr	r24
    2324:	77 95       	ror	r23
    2326:	67 95       	ror	r22
    2328:	b7 95       	ror	r27
    232a:	f7 95       	ror	r31
    232c:	9f 5f       	subi	r25, 0xFF	; 255
    232e:	c9 f7       	brne	.-14     	; 0x2322 <__divsf3_pse+0x78>
    2330:	88 0f       	add	r24, r24
    2332:	91 1d       	adc	r25, r1
    2334:	96 95       	lsr	r25
    2336:	87 95       	ror	r24
    2338:	97 f9       	bld	r25, 7
    233a:	08 95       	ret
    233c:	e1 e0       	ldi	r30, 0x01	; 1
    233e:	66 0f       	add	r22, r22
    2340:	77 1f       	adc	r23, r23
    2342:	88 1f       	adc	r24, r24
    2344:	bb 1f       	adc	r27, r27
    2346:	62 17       	cp	r22, r18
    2348:	73 07       	cpc	r23, r19
    234a:	84 07       	cpc	r24, r20
    234c:	ba 07       	cpc	r27, r26
    234e:	20 f0       	brcs	.+8      	; 0x2358 <__divsf3_pse+0xae>
    2350:	62 1b       	sub	r22, r18
    2352:	73 0b       	sbc	r23, r19
    2354:	84 0b       	sbc	r24, r20
    2356:	ba 0b       	sbc	r27, r26
    2358:	ee 1f       	adc	r30, r30
    235a:	88 f7       	brcc	.-30     	; 0x233e <__divsf3_pse+0x94>
    235c:	e0 95       	com	r30
    235e:	08 95       	ret

00002360 <__gesf2>:
    2360:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_cmp>
    2364:	08 f4       	brcc	.+2      	; 0x2368 <__gesf2+0x8>
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	08 95       	ret

0000236a <__unordsf2>:
    236a:	0e 94 26 08 	call	0x104c	; 0x104c <__fp_cmp>
    236e:	88 0b       	sbc	r24, r24
    2370:	99 0b       	sbc	r25, r25
    2372:	08 95       	ret

00002374 <__mulsi3>:
    2374:	db 01       	movw	r26, r22
    2376:	8f 93       	push	r24
    2378:	9f 93       	push	r25
    237a:	0e 94 25 12 	call	0x244a	; 0x244a <__muluhisi3>
    237e:	bf 91       	pop	r27
    2380:	af 91       	pop	r26
    2382:	a2 9f       	mul	r26, r18
    2384:	80 0d       	add	r24, r0
    2386:	91 1d       	adc	r25, r1
    2388:	a3 9f       	mul	r26, r19
    238a:	90 0d       	add	r25, r0
    238c:	b2 9f       	mul	r27, r18
    238e:	90 0d       	add	r25, r0
    2390:	11 24       	eor	r1, r1
    2392:	08 95       	ret

00002394 <__divmodhi4>:
    2394:	97 fb       	bst	r25, 7
    2396:	07 2e       	mov	r0, r23
    2398:	16 f4       	brtc	.+4      	; 0x239e <__divmodhi4+0xa>
    239a:	00 94       	com	r0
    239c:	07 d0       	rcall	.+14     	; 0x23ac <__divmodhi4_neg1>
    239e:	77 fd       	sbrc	r23, 7
    23a0:	09 d0       	rcall	.+18     	; 0x23b4 <__divmodhi4_neg2>
    23a2:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodhi4>
    23a6:	07 fc       	sbrc	r0, 7
    23a8:	05 d0       	rcall	.+10     	; 0x23b4 <__divmodhi4_neg2>
    23aa:	3e f4       	brtc	.+14     	; 0x23ba <__divmodhi4_exit>

000023ac <__divmodhi4_neg1>:
    23ac:	90 95       	com	r25
    23ae:	81 95       	neg	r24
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	08 95       	ret

000023b4 <__divmodhi4_neg2>:
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255

000023ba <__divmodhi4_exit>:
    23ba:	08 95       	ret

000023bc <__udivmodsi4>:
    23bc:	a1 e2       	ldi	r26, 0x21	; 33
    23be:	1a 2e       	mov	r1, r26
    23c0:	aa 1b       	sub	r26, r26
    23c2:	bb 1b       	sub	r27, r27
    23c4:	fd 01       	movw	r30, r26
    23c6:	0d c0       	rjmp	.+26     	; 0x23e2 <__udivmodsi4_ep>

000023c8 <__udivmodsi4_loop>:
    23c8:	aa 1f       	adc	r26, r26
    23ca:	bb 1f       	adc	r27, r27
    23cc:	ee 1f       	adc	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	a2 17       	cp	r26, r18
    23d2:	b3 07       	cpc	r27, r19
    23d4:	e4 07       	cpc	r30, r20
    23d6:	f5 07       	cpc	r31, r21
    23d8:	20 f0       	brcs	.+8      	; 0x23e2 <__udivmodsi4_ep>
    23da:	a2 1b       	sub	r26, r18
    23dc:	b3 0b       	sbc	r27, r19
    23de:	e4 0b       	sbc	r30, r20
    23e0:	f5 0b       	sbc	r31, r21

000023e2 <__udivmodsi4_ep>:
    23e2:	66 1f       	adc	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	1a 94       	dec	r1
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <__udivmodsi4_loop>
    23ee:	60 95       	com	r22
    23f0:	70 95       	com	r23
    23f2:	80 95       	com	r24
    23f4:	90 95       	com	r25
    23f6:	9b 01       	movw	r18, r22
    23f8:	ac 01       	movw	r20, r24
    23fa:	bd 01       	movw	r22, r26
    23fc:	cf 01       	movw	r24, r30
    23fe:	08 95       	ret

00002400 <__divmodsi4>:
    2400:	05 2e       	mov	r0, r21
    2402:	97 fb       	bst	r25, 7
    2404:	1e f4       	brtc	.+6      	; 0x240c <__divmodsi4+0xc>
    2406:	00 94       	com	r0
    2408:	0e 94 17 12 	call	0x242e	; 0x242e <__negsi2>
    240c:	57 fd       	sbrc	r21, 7
    240e:	07 d0       	rcall	.+14     	; 0x241e <__divmodsi4_neg2>
    2410:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodsi4>
    2414:	07 fc       	sbrc	r0, 7
    2416:	03 d0       	rcall	.+6      	; 0x241e <__divmodsi4_neg2>
    2418:	4e f4       	brtc	.+18     	; 0x242c <__divmodsi4_exit>
    241a:	0c 94 17 12 	jmp	0x242e	; 0x242e <__negsi2>

0000241e <__divmodsi4_neg2>:
    241e:	50 95       	com	r21
    2420:	40 95       	com	r20
    2422:	30 95       	com	r19
    2424:	21 95       	neg	r18
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	4f 4f       	sbci	r20, 0xFF	; 255
    242a:	5f 4f       	sbci	r21, 0xFF	; 255

0000242c <__divmodsi4_exit>:
    242c:	08 95       	ret

0000242e <__negsi2>:
    242e:	90 95       	com	r25
    2430:	80 95       	com	r24
    2432:	70 95       	com	r23
    2434:	61 95       	neg	r22
    2436:	7f 4f       	sbci	r23, 0xFF	; 255
    2438:	8f 4f       	sbci	r24, 0xFF	; 255
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	08 95       	ret

0000243e <__tablejump2__>:
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	05 90       	lpm	r0, Z+
    2444:	f4 91       	lpm	r31, Z
    2446:	e0 2d       	mov	r30, r0
    2448:	09 94       	ijmp

0000244a <__muluhisi3>:
    244a:	0e 94 44 12 	call	0x2488	; 0x2488 <__umulhisi3>
    244e:	a5 9f       	mul	r26, r21
    2450:	90 0d       	add	r25, r0
    2452:	b4 9f       	mul	r27, r20
    2454:	90 0d       	add	r25, r0
    2456:	a4 9f       	mul	r26, r20
    2458:	80 0d       	add	r24, r0
    245a:	91 1d       	adc	r25, r1
    245c:	11 24       	eor	r1, r1
    245e:	08 95       	ret

00002460 <__udivmodhi4>:
    2460:	aa 1b       	sub	r26, r26
    2462:	bb 1b       	sub	r27, r27
    2464:	51 e1       	ldi	r21, 0x11	; 17
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <__udivmodhi4_ep>

00002468 <__udivmodhi4_loop>:
    2468:	aa 1f       	adc	r26, r26
    246a:	bb 1f       	adc	r27, r27
    246c:	a6 17       	cp	r26, r22
    246e:	b7 07       	cpc	r27, r23
    2470:	10 f0       	brcs	.+4      	; 0x2476 <__udivmodhi4_ep>
    2472:	a6 1b       	sub	r26, r22
    2474:	b7 0b       	sbc	r27, r23

00002476 <__udivmodhi4_ep>:
    2476:	88 1f       	adc	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	5a 95       	dec	r21
    247c:	a9 f7       	brne	.-22     	; 0x2468 <__udivmodhi4_loop>
    247e:	80 95       	com	r24
    2480:	90 95       	com	r25
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	08 95       	ret

00002488 <__umulhisi3>:
    2488:	a2 9f       	mul	r26, r18
    248a:	b0 01       	movw	r22, r0
    248c:	b3 9f       	mul	r27, r19
    248e:	c0 01       	movw	r24, r0
    2490:	a3 9f       	mul	r26, r19
    2492:	70 0d       	add	r23, r0
    2494:	81 1d       	adc	r24, r1
    2496:	11 24       	eor	r1, r1
    2498:	91 1d       	adc	r25, r1
    249a:	b2 9f       	mul	r27, r18
    249c:	70 0d       	add	r23, r0
    249e:	81 1d       	adc	r24, r1
    24a0:	11 24       	eor	r1, r1
    24a2:	91 1d       	adc	r25, r1
    24a4:	08 95       	ret

000024a6 <__do_global_dtors>:
    24a6:	10 e0       	ldi	r17, 0x00	; 0
    24a8:	c7 e8       	ldi	r28, 0x87	; 135
    24aa:	d0 e0       	ldi	r29, 0x00	; 0
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <__do_global_dtors+0x10>
    24ae:	fe 01       	movw	r30, r28
    24b0:	0e 94 1f 12 	call	0x243e	; 0x243e <__tablejump2__>
    24b4:	21 96       	adiw	r28, 0x01	; 1
    24b6:	c8 38       	cpi	r28, 0x88	; 136
    24b8:	d1 07       	cpc	r29, r17
    24ba:	c9 f7       	brne	.-14     	; 0x24ae <__do_global_dtors+0x8>
    24bc:	f8 94       	cli

000024be <__stop_program>:
    24be:	ff cf       	rjmp	.-2      	; 0x24be <__stop_program>
